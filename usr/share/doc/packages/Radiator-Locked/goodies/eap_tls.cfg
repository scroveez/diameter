# eap_tls.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with EAP TLS
# authentication. We suggest you start simple, prove to yourself that
# it works and then develop a more complicated configuration.
#
# This example will authenticate from a standard users file in the
# current directory. It will accept requests from any client and try
# to handle request for any realm. And it will print out what its
# doing in great detail.
#
# In order to authenticate, the clients user name must be in ./users 
# (the password is irrelevant for EAP TLS).
# It will also require that the certificate installed on the client
# is within one step of the root certificate, and that the subject name
# in the client certificate is the same as the user name they are trying
# to log in as.
#
# In order to test this, you can use the sample test certificates
# supplied with Radiator. For production, you WILL need to install a
# real valid server certificate and key for Radiator to use.
#
# See radius.cfg for more complete examples of features and syntax,
# and refer to the reference manual for a complete description of all
# the features and syntax.
#
# Requires Net_SSLeay.pm-1.21 or later
# Requires openssl 0.9.7beta3 or later
# Requires Digest-HMAC
# Requires Digest-SHA
#
# You should consider this file to be a starting point only
# $Id: eap_tls.cfg,v 1.13 2014/09/26 20:42:55 hvn Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
</Client>

<Handler>
	<AuthBy FILE>
		# Users must be in this file to get anywhere
		Filename %D/users

		# EAPType sets the EAP type(s) that Radiator will honour.
		# Options are: MD5-Challenge, One-Time-Password
		# Generic-Token, TLS, TTLS, PEAP, MSCHAP-V2
		# Multiple types can be comma separated. With the default (most
		# preferred) type given first
		EAPType TLS

		# EAPTLS_CAFile is the name of a file of CA certificates 
		# in PEM format. The file can contain several CA certificates
		# Radiator will first look in EAPTLS_CAFile then in
		# EAPTLS_CAPath, so there usually is no need to set both
		EAPTLS_CAFile %D/certificates/demoCA/cacert.pem

		# EAPTLS_CAPath is the name of a directory containing CA
    		# certificates (and possible CRLs) in PEM format. The files each contain one 
		# CA certificate. The files are looked up by the CA 
		# subject name hash value
#		EAPTLS_CAPath %D/certificates/demoCA

		# EAPTLS_CertificateFile is the name of a file containing
		# the servers certificate. EAPTLS_CertificateType
		# specifies the type of the file. Can be PEM or ASN1
		# defaults to ASN1
		EAPTLS_CertificateFile %D/certificates/cert-srv.pem
		EAPTLS_CertificateType PEM

		# EAPTLS_PrivateKeyFile is the name of the file containing
		# the servers private key. It is sometimes in the same file
		# as the server certificate (EAPTLS_CertificateFile)
		# If the private key is encrypted (usually the case)
		# then EAPTLS_PrivateKeyPassword is the key to descrypt it
		EAPTLS_PrivateKeyFile %D/certificates/cert-srv.pem
		EAPTLS_PrivateKeyPassword whatever

		# EAPTLS_RandomFile is an optional file containing
		# randomness
#		EAPTLS_RandomFile %D/certificates/random

		# EAPTLS_MaxFragmentSize sets the maximum TLS fragemt
		# size that will be replied by Radiator. It must be small
		# enough to fit in a single Radius request (ie less than 4096)
		# and still leave enough space for other attributes
		# Aironet APs seem to need a smaller MaxFragmentSize
		# (eg 1024) than the default of 2048. Others need even smaller sizes.
		EAPTLS_MaxFragmentSize 1000

		# Ephemeral key exchange is supported with Diffie-Hellman key
		# exchange (DHE) and Elliptic Curve Diffie-Hellman key
		# exchange (ECDHE). See the reference manual for details.
		#EAPTLS_DHFile %D/certificates/dh2048.pem
		#EAPTLS_ECDH_Curve prime256v1

		# If EAPTLS_CRLCheck is set 
		# then Radiator will look for a certificate revocation list (CRL) 
		# for the certificate issuer
		# when authenticating each client. If a CRL file is not found, or
		# if the CRL says the certificate has neen revoked, the authentication will 
		# fail with an error:
		#   SSL3_GET_CLIENT_CERTIFICATE:no certificate returned
		# One or more CRLs can be named with the EAPTLS_CRLFile parameter.
		# Alternatively, CRLs may follow a file naming convention: 
		#  the hash of the issuer subject name 
		# and a suffix that depends on the serial number.
		# eg ab1331b2.r0, ab1331b2.r1 etc.
		# You can find out the hash of the issuer name in a CRL with
		#  openssl crl -in crl.pem -hash -noout
		# CRLs with tis name convention
		# will be searched in EAPTLS_CAPath, else in the openssl 
		# certificates directory typically /usr/local/openssl/certs/
		# CRLs are expected to be in PEM format.
		# A CRL files can be generated with openssl like this:
		#  openssl ca -gencrl -revoke cert-clt.pem
		#  openssl ca -gencrl -out crl.pem
		# Use of these flags requires Net_SSLeay-1.21 or later
		# TLS_CRLFile can include operating system wildcards to refer to multiple CRLS
		#EAPTLS_CRLCheck
		#EAPTLS_CRLFile %D/certificates/crl.pem
		#EAPTLS_CRLFile %D/certificates/revocations.pem
		#EAPTLS_CRLFile %D/crls/*.r0
		
		# You can rewrite the Common Nam ein the certificate before using it
		# to find the username in the Radiator database:
		#EAPTLSRewriteCertificateCommonName s/testUser/mikem/

		# Try to match a certificate CN against an attribute in the 
		# incoming request. If matched, return th ematch else undef
		# Called like EAPTLS_CommonNameHook($cn, $username, $identity, $p)
		# This example attempts to match the CN against the 
		# Calling-Station-Id, similar to WiMAX.
		# EAPTLS_CommonNameHook sub {my $cn = $_[0]; my $p = $_[3]; return $cn if $cn eq $p->get_attr('Calling-Station-Id'); return undef;}


		# You can add further certificate checks that wil be run after the 
		# name verification is completed. 
		# It will be called like ($matchedcn, $x509_store_ctx, $cert, $subject_name, $subject, $p)
		# It is expected to return a $matchedcn if successful, else undefined
		# This example checks that the certificate O is correct
		#EAPTLS_CertificateVerifyHook sub {my $subject = $_[4];my ($org) = $subject =~ /O=([^\/]*)/; return unless $org eq 'OSC Demo Certificates'; return $_[0]}

		# With EAPTLS_NoCheckId you can also prevents the comparison of the
		# username with the certificate common name. The certificate will be
		# acccepted based only on the validity dates and the verification chain
		# to the root certificate. This allows Radiator to
		# mimic the behaviour of some other Radius servers.
		#EAPTLS_NoCheckId

		# EAPTLS_PolicyOID enables certificate policy checking and specifies one or more policy OIDs 
		# that must be present in the certificate path. It sets the \'require explicit policy\'   
		# flag as defined in RFC3280. Requires Net-SSLeay 1.37 or later
		#EAPTLS_PolicyOID 2.5.29.32.0

		# Automatically sets MS-MPPE-Send-Key and MS-MPPE-Recv-Key
		# in the final Access-Accept
		AutoMPPEKeys
	</AuthBy>
</Handler>

