# ipv6.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with 
# Radius over IPv6. You can then add and change features.
# We suggest you start simple, prove to yourself that it
# works and then develop a more complicated configuration.
#
# In order to listen to Radius over IPv6, Perl core Socket module must
# support IPv6 and the module needs to link correctly with system's
# libraries. Otherwise you need Socket6 module. Socket6 might be
# already installed and if not, you can install it with your system's
# package manager, from CPAN or
# http://www.open.com.au/radiator/free-downloads/Socket6.ppd if using
# Windows.
#
# Watch Radiator Trace 4 startup messages to see if Radiator is able
# to find working IPv6 support.
#
# IPv6 addresses and names can be denoted with the prefix
# 'ipv6:'. Names with 'ipv6:' are resolved to IPv6 addresses only.
#
# This example will authenticate from a standard users file in the
# current directory and log accounting to a file in the current
# directory. It will accept requests from any IPv4 or IPv6 client and
# try to handle request for any realm. And it will print out what its
# doing in great detail.
#
# It also shows how you can proxy a realm to a remote server over IPv6.
#
# You can use radpwtst to send an IPv6 request to localhost with something like:
#    radpwtst -trace 4 -noacct -bind_address ::1 -s ::1
#
# See radius.cfg for more complete examples of features and syntax,
# and refer to the reference manual for a complete description of all
# the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: ipv6.cfg,v 1.5 2014/11/22 01:30:09 hvn Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# Listen for radius requests on all IPv6 and IPv4 addresses on systems
# that default to IPv6_V6ONLY disabled as defined by RFC 3493.
BindAddress ::

# Enable separate IPv6 and IPv4 listen sockets. Requires Perl 5.16 or
# later or recent Socket.pm. Default is not to do setsockopt(IPv6_V6ONLY).
#BindV6Only true
#BindAddress 0.0.0.0,::

# Another example: listen on the IPv6 loopback address, and on a specific IPv4 address:
#BindAddress ::1,203.63.154.29

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with

# This will handle requests from the IPv6 loopback address only
<Client ::1>
	Secret	mysecret
</Client>

# This will handle requests from a specific IPv6 address only:
<Client 2001:db8:1500:1::a100>
	Secret	mysecret
</Client>

# This will handle requests from an IPv6 subnet:
<Client 2001:db8:1500:2::/64>
	Secret	mysecret
</Client>

# This will handle requests from an IPv4 subnet when only IPv6
# wildcard listen socket is used and received IPv4 addresses are
# mapped to IPv6 addresses.
<Client ::ffff:192.168.1.0/120>
	Secret	mysecret
</Client>

# This will handle requests from any client
<Client DEFAULT>
	Secret	mysecret
</Client>

# This proxies all users with a user name like username@proxy.com
# to an IPv6 server on loclahost
<Handler Realm=proxy.com>
	<AuthBy RADIUS>
		# This binds our outgoing proxy port to IPv6 any
		# address. We need this if the main incoming radius
		# port does not have an IPv6 BindAddress (the default
		# in an IPv4 ANY address) In order to proxy to an IPv6
		# address, LocalAddress _must_ be bound to an IPv6
		# address
#		LocalAddress ::

		# On the other hand if the main incoming BindAddress
		# is an IPv6 address, and you wish to proxy to an IPv4
		# address, you will need
		LocalAddress 0.0.0.0

		# Proxy to localhost by IPv6
		Host ::1

		AuthPort 1647
		AcctPort 1648
	</AuthBy>
</Handler>

<Handler>
	<AuthBy FILE>
		Filename %D/users
	</AuthBy>
	# Log accounting to a detail file
	AcctLogFileName	%L/detail
</Handler>

