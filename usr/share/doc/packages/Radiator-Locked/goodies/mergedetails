#!/usr/bin/perl
# -*- mode: Perl -*-
# mergedetails
# Merge multiple details files in chronological order
#
# Author: Mike McCauley (mikem@open.com.au)
# Copyright (C) 2004 Open System Consultants
# $Id: mergedetails,v 1.3 2006/02/02 05:21:07 mikem Exp $

use Time::Local;
use strict;

# Converts a month name into a 0 based month number
my %months  = 
    ( 
      'Jan',       0,      'January',   0,
      'Feb',       1,      'February',  1,
      'Mar',       2,      'March',     2,
      'Apr',       3,      'April',     3,
      'May',       4,
      'Jun',       5,      'June',      5,
      'Jul',       6,      'July',      6,
      'Aug',       7,      'August',    7,
      'Sep',       8,      'September', 8,
      'Oct',       9,      'October',   9,
      'Nov',      10,      'November', 10,
      'Dec',      11,      'December', 11,
      );


my ($file, @files, @nextdate, @records);
my $i = 0;

# Get file handles into an array
# Wierd syntax so it works on early perls too
foreach (@ARGV)
{
    local (*FILE);
    open(FILE, $ARGV[$i]) || die "Could not open file '$ARGV[$i]': $!";
    $files[$i] = *FILE;
    $i++;
}

# Paragraph mode:
$/ = '';

# As long as there are some files to be read
while (@files)
{
    my ($lowestdate, $lowestindex);
    $i = 0;
    while ($i <= $#files)
    {
	if (!defined $nextdate[$i])
	{
	    $records[$i] = readline($files[$i]);
	    $nextdate[$i] = parseDate($records[$i]);
	}
	$lowestdate = $nextdate[$i], $lowestindex = $i 
	    if defined $nextdate[$i] && (!defined $lowestdate || $lowestdate > $nextdate[$i]);
	$i++;
    }
    last unless defined $lowestindex;
    print $records[$lowestindex];
    $nextdate[$lowestindex] = undef;
}

sub parseDate
{
    my ($date) = @_;
    
    if ($date =~ /^[A-Za-z]{3}\s+([A-Za-z]{3})\s+(\d{1,2})\s+(\d{2}):(\d{2}):(\d{2})\s+(\d{4})/)
    {
	# Ddd Mmm dd hh:mm:ss yyyy
	my $mon = $months{$1};
	my $year = $6;
	# Follow Perl standards for Y2K compliance
	$year -= 1900 if $year > 1900;
	$year += 100 if $year <= 37;
	# Dates way in the future are clamped to perls limit
	# of about 2037
	$year = 137 if $year > 137;
	my ($hour, $minute, $second) = ($3, $4, $5);
	return &main::timelocal($second, $minute, $hour, $2, $mon, $year);
    }
    return;
}
