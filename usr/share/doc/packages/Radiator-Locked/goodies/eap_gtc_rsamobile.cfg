# eap_gtc_rsamobile.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with 
# EAP Generic Token Card authentication and RSA Mobile authentication.
#
# RSA Mobile supports a number of authentication methods, including 
# - username and password
# - an access code sent by SMS to your mobile phone
# - RSA Secureid Token Cards
# and all of these can be configured with AuthBy RSAMOBILE
#
# We suggest you start simple, prove to yourself that it
# works and then develop a more complicated configuration.
#
# This example will authenticate all users from RSA Mobile
# It will accept requests from any client and try to handle request
# for any realm.
# And it will print out what its doing in great detail.
#
# Requires SOAP::Lite and all its prerequisites
#
# You can test EQAP Generic Token Card with 'radpwtst -noacct -eapgtc'
# You will be presented with an RSA Mobile Challenges for your personal PIN.
# After the PIN is entered, RSA Mobile will send you a Tokencode to your mobile
# phone, which you need to enter into the Tokencode prompt, something like this:
#
# [mikem@zulu Radiator]$ radpwtst -noacct -eapgtc -timeout 10 -user yourusername
# sending Access-Request...
# PIN:: abc123
# sending Access-Request...                     #RSA Mobile now sends Token code 70840885 by SMS
# Tokencode:: 70840885
#
# You can also test with conventional Radius Access-Request/Access-Challenge like this, where
# abc123 is the users PIN. If the initial -password is empty, then RSA MOBILE will first prompt for the PIN, then
# the Tokencode:
# [mikem@zulu Radiator]$ radpwtst -noacct -timeout 30 -user yourusername -password abc123 -interactive
# sending Access-Request...                    #RSA Mobile now sends Token code 12231051 by SMS
# Tokencode:
# 12231051
# sending Access-Request...
# OK
#
# Also tested with Funk Odyssey client, using EAP Token-Card.
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: eap_gtc_rsamobile.cfg,v 1.4 2005/03/17 04:58:04 mikem Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
	# Some clients such as Checkpoint have aggressive retransmit timeouts
	# try to ignore them.
	DupInterval 20
</Client>

<Realm DEFAULT>
	<AuthBy RSAMOBILE>

		# This defines the location of the RSA Mobile web service
		Host localhost:7001

		# These define the username and password that will be used to get access
		# to the RSA Mobile web service interface.
		SessionUsername authapiuser
		SessionPassword abc123

		# Prevent looking for DEFAULT users if auth fails
		NoDefault

		# This enables the SOAP::Lite internal tracing. Allowable values are
		# transport dispatch result parameters headers objects method fault 
		# freeform trace debug all
		# or any combination. Defaults to no tracing.
		#SOAPTrace all

		# This tells RSA Mobile the type of authentication policy to use
		# options are:
		#  *System Policy: Password Only
		#  *System Policy: RSA Mobile Only
		#  *System Policy: RSA SecurID Only
		#  *System Policy: RSA SecurID OR Password
		# default is RSA Mobile Only
		#Policy *System Policy: Password Only

		# EAPType sets the EAP type(s) that Radiator will honour.
		# Options are: MD5-Challenge, One-Time-Password
		# Generic-Token, TLS, TTLS, PEAP, MSCHAP-V2
		# Multiple types can be comma separated. With the default (most
		# preferred) type given first
		# Only Generic-Token would usually make sense for RSAMOBILE in an inner EAP handler.
		EAPType Generic-Token
	</AuthBy>
</Realm>

