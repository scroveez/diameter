# ldap-aps.cfg
#
# Example Radiator configuration file for authenticating from
# an Apple Directory Server LDAP server, and perhaps authenticating usernames
# against the Apple Password Server.
#
# This very simple file will allow you to get started with 
# a simple MAC-OSX directory server authentication system. 
#
# We suggest you start simple, prove to yourself that it
# works and then develop a more complicated configuration.
#
# In this example, there is a remote LDAP database on yoke, a standard MAC
# OS-X server, configured to use Directory Server and Password Server.
# The LDAP database administrator has a common name of:
#   uid=diradmin,cn=users,dc=yoke,dc=local
# and a password for the LDAP database ('diradmin' in this example).
# The LDAP server in this example manages a Base DN of:
#   dc=yoke,dc=local
# The LDAP database contains entries for each OS-X user in the database.
# In the standard MAC OS-X directory server database, there is an LDAP
# attribute 'authAuthority' which contains information about how to authenticate
# that users password. If the user is configured to use Apple Password Server,
# authAuthority will contain an entry for ApplePasswordServer and AuthBy
# LDAP-APS will contact that password server to authenticate the user password.
#
# Therefore, this module support Mac OS-X authentication of users configured into 
# Apple Directory Server with an authentication type of Apple Password Server.
#
# Supports PAP, MSCHAPV2, but not CHAP, MSCHAPV1 or DIGEST-MD5
# Supports TTLS-EAP-MSCHAPV2.
# Can support PEAP-EAP-MSCHAPV2 (but this simple config file is not set up for
# that)
#
# test with
#  radpwtst -noacct -user guest -password guest
#  radpwtst -noacct -user guest -password guest -mschapv2
#
# Requires:
# Crypt::OpenSSL::Random;
# Crypt::OpenSSL::RSA;
# Crypt::OpenSSL::Bignum;
# MIME::Base64;
# Digest::MD5;
# Digest::HMAC_MD5;
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: ldap-aps.cfg,v 1.6 2014/09/26 20:42:55 hvn Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
Trace		4

# You will probably want to add other Clients to suit your site.
<Client DEFAULT>
	Secret	mysecret
</Client>

<Handler>
	<AuthBy LDAP_APS>
		# Tell Radiator how to talk to the LDAP server
		Host		yoke

		# You will only need these if your LDAP server
		# requires authentication. These are the examples
		# in a default OpenLDAP installation
		# see /etc/openldap/slapd.conf
		AuthDN		uid=diradmin,cn=users,dc=yoke,dc=local
		AuthPassword	diradmin

		# This the top of the search tree where users
		# will be found. It should match the configuration
		# of your server, see /etc/openldap/slapd.conf
		BaseDN		dc=yoke,dc=local

		# This is the LDAP attribute to match the radius user name
		# (used as %0 in SearchFilter)
		UsernameAttr	uid

		# Apple LDAP server keeps information in 
		# the LDAP authAuthority attribute about how to authenticate
		# passwords. AuthBy LDAP-APS needs to get this information
		# into the User-Password check item so it can contact the Password Server
		PasswordAttr    authAuthority
		
		# Apple LDAP is happy to use HoldServerConnection
		HoldServerConnection
		  
		# With LDAP2 and perl-ldap 0.22 and better on Unix/Linux, You can enable SSL or TLS.
		# See http://www.openldap.org/pub/ksoper/OpenLDAP_TLS_howto.html
		# for assistance on how to generate certificates and
		# configure openldap for SSL and/or TLS
		# To use SSL, set these
		#UseSSL
		#SSLCAClientCert ldapcertificates/clientcrt.pem
		#SSLCAClientKey ldapcertificates/clientkey.pem
		# and one of
		#SSLCAFile ldapcertificates/demoCA/cacert.pem
		# SSLCAPath /path/to/file/containing/certificate/of/CA
		#  (certificates must be in PEM format)
		
		# To use TLS, set these
		#UseTLS
		#SSLCAClientCert ldapcertificates/clientcrt.pem
		#SSLCAClientKey ldapcertificates/clientkey.pem
		# and one of
		#SSLCAFile ldapcertificates/demoCA/cacert.pem
		# SSLCAPath /path/to/file/containing/certificate/of/CA
		#  (certificates must be in PEM format)
		# These set the corresponding parameters in the 
		# LDAPS connection (see perl-ldap docs)
		# Requires IO::Socket::SSL, Net::SSLeay and openssl

		# You can control the timout for connection failure,
		# plus the backoff time after failure. Timout defaults
		# to 10 secs and FailureBackoffTime to 10 mins
		#Timeout 2
		# FailureBackoffTime 10

		# With PostSearchHook you can do your own processing
		# of the LDAP data. 
		# Arg 0 is the AuthBy LDAP object
		# Arg 1 is the user name being authenticated
		# Arg 2 is the received request packet
		# Arg 3 is the user object holding check and reply
		#  items for this user
		# Arg 4 is the search results handle, whose type
		#   depends on whether its LDAP, LDAP2, or LDAPSDK
		#PostSearchHook sub {print "PostSearchHook @_\n";\
		#	my $attr = $_[4]->get('someldapattr');\
		#	print "get attribute $attr\n";}

		# You can control the LDAP protocol version to be used
		# to talk to the LDAP server. OpenLDAP 2 requires
		# Version 3 unless you have 'allow bind_v2' in your
		# slapd.conf. Defaults to version 2			
		Version 3

		# You can specify the maximum number of LDAP records
	        # that match the search that will be used for
		# check and reply items. Only the first will be
		# used for ServerChecksPasssword. Defaults to 1
		#MaxRecords 2

		# If this parameter is set, it forces Radiator to use the
		# specified address as the address of the Apple Password
		# server, instead of deducing it from the user's password
		# details. Addresses may be one of the forms: 203.63.154.59,
		# dns/yoke.open.com.au, ipv4/203.63.154.59 or
		# ipv6/2001:db8:1500:1::a100. This can be useful with
		# replicated password servers.
		#PasswordServerAddress 127.0.0.1

		# The following is the standard stuff to support TTLS

		# EAPType sets the EAP type(s) that Radiator will honour.
		# Options are: MD5-Challenge, One-Time-Password
		# Generic-Token, TLS, TTLS, PEAP, MSCHAP-V2
		# Multiple types can be comma separated. With the default (most
		# preferred) type given first
		EAPType TTLS, MSCHAP-V2

		# EAPTLS_CAFile is the name of a file of CA certificates 
		# in PEM format. The file can contain several CA certificates
		# Radiator will first look in EAPTLS_CAFile then in
		# EAPTLS_CAPath, so there usually is no need to set both
		EAPTLS_CAFile %D/certificates/demoCA/cacert.pem

		# EAPTLS_CAPath is the name of a directory containing CA
    		# certificates in PEM format. The files each contain one 
		# CA certificate. The files are looked up by the CA 
		# subject name hash value
#		EAPTLS_CAPath

		# EAPTLS_CertificateFile is the name of a file containing
		# the servers certificate. EAPTLS_CertificateType
		# specifies the type of the file. Can be PEM or ASN1
		# defaults to ASN1
		EAPTLS_CertificateFile %D/certificates/cert-srv.pem
		EAPTLS_CertificateType PEM

		# EAPTLS_PrivateKeyFile is the name of the file containing
		# the servers private key. It is sometimes in the same file
		# as the server certificate (EAPTLS_CertificateFile)
		# If the private key is encrypted (usually the case)
		# then EAPTLS_PrivateKeyPassword is the key to descrypt it
		EAPTLS_PrivateKeyFile %D/certificates/cert-srv.pem
		EAPTLS_PrivateKeyPassword whatever

		# EAPTLS_RandomFile is an optional file containing
		# randomness
#		EAPTLS_RandomFile %D/certificates/random

		# EAPTLS_MaxFragmentSize sets the maximum TLS fragemt
		# size that will be replied by Radiator. It must be small
		# enough to fit in a single Radius request (ie less than 4096)
		# and still leave enough space for other attributes
		# Aironet APs seem to need a smaller MaxFragmentSize
		# (eg 1024) than the default of 2048. Others need even smaller sizes.
		EAPTLS_MaxFragmentSize 1000

		# Ephemeral key exchange is supported with Diffie-Hellman key
		# exchange (DHE) and Elliptic Curve Diffie-Hellman key
		# exchange (ECDHE). See the reference manual for details.
		#EAPTLS_DHFile %D/certificates/dh2048.pem
		#EAPTLS_ECDH_Curve prime256v1

		# If EAPTLS_CRLCheck is set  and the client presents a certificate
		# then Radiator will look for a certificate revocation list (CRL) 
		# for the certificate issuer
		# when authenticating each client. If a CRL file is not found, or
		# if the CRL says the certificate has neen revoked, the authentication will 
		# fail with an error:
		#   SSL3_GET_CLIENT_CERTIFICATE:no certificate returned
		# One or more CRLs can be named with the EAPTLS_CRLFile parameter.
		# Alternatively, CRLs may follow a file naming convention: 
		#  the hash of the issuer subject name 
		# and a suffix that depends on the serial number.
		# eg ab1331b2.r0, ab1331b2.r1 etc.
		# You can find out the hash of the issuer name in a CRL with
		#  openssl crl -in crl.pem -hash -noout
		# CRLs with tis name convention
		# will be searched in EAPTLS_CAPath, else in the openssl 
		# certificates directory typically /usr/local/openssl/certs/
		# CRLs are expected to be in PEM format.
		# A CRL files can be generated with openssl like this:
		#  openssl ca -gencrl -revoke cert-clt.pem
		#  openssl ca -gencrl -out crl.pem
		# Use of these flags requires Net_SSLeay-1.21 or later
		#EAPTLS_CRLCheck
		#EAPTLS_CRLFile %D/certificates/crl.pem
		#EAPTLS_CRLFile %D/certificates/revocations.pem
		
		# Some clients, depending on their configuration, may require you to specify
		# MPPE send and receive keys. This _will_ be required if you select
		# 'Keys will be generated automatically for data privacy' in the Funk Odyssey
		# client Network Properties dialog.
		# Automatically sets MS-MPPE-Send-Key and MS-MPPE-Recv-Key
		# in the final Access-Accept
		AutoMPPEKeys

		# You can configure the User-Name that will be used for the inner
		# authentication. Defaults to 'anonymous'. This can be useful
		# when proxying the inner authentication. If tehre is a realm, it can 
		# be used to choose a local Realm to handle the inner authentication.
		# %0 is replaced with the EAP identitiy
		# EAPAnonymous anonymous@some.other.realm

		# You can enable or disable support for TTLS Session Resumption and
		# PEAP Fast Reconnect with the EAPTLS_SessionResumption flag.
		# Default is enabled
		#EAPTLS_SessionResumption 0

		# You can limit how long after the initial session that a session can be resumed
		# with EAPTLS_SessionResumptionLimit (time in seconds). Defaults to 43200
		# (12 hours)
		#EAPTLS_SessionResumptionLimit 10

		# Some supplicants (notably PBG4 on MAC OSX) do not conform to the TTLS
                # protocol specification, and do not understand the ACK sent
		# by the server at the end of TLS negotiation and session
		# resumption, resulting in session resumption not
		# completing. This flag enables a workaround for such
		# supplicants. Many other supplicants are happy with this too.
		#EAPTTLS_NoAckRequired
	</AuthBy>
</Handler>

