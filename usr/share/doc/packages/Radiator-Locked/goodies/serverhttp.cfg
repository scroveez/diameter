# serverhttp.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with 
# using ServerHTTP to monitor and reconfigure Radiator
# We suggest you start simple, prove to yourself that it
# works and then develop a more complicated configuration.
#
# Run this config file with:
#  perl ./radiusd -config goodies/serverhttp.cfg
# Then connect to it with your favourite browser with the address:
#  http://localhost:9048
# You will be presented with a login prompt. Login in as
#  Username: mikem
#  Password: fred
# You will then be able to inspect and alter the configuration, restart the
# server, inspect the internal state of the server, get details about the
# installed Perl etc.
#
# This example will authenticate from a standard users file in
# the current directory and log accounting to a file in the current
# directory.
# It will accept requests from any client and try to handle request
# for any realm.
# And it will print out what its doing in great detail.
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: serverhttp.cfg,v 1.6 2014/09/26 20:42:55 hvn Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
	DupInterval 0
</Client>

<Realm DEFAULT>
	<AuthBy FILE>
		Filename ./users
		EAPType GTC
	</AuthBy>
	# Log accounting to a detail file
	AcctLogFileName	./detail
</Realm>

# CAUTION: Careless configuration of this clause can open security holes in
# your RADIUS host. The following example configuration is for testing only.
# It is recommended that you:
#  1. limit the clients that can connect with the Clients parameter
#  2. Make sure this configuration file is only readable by root
#  3. Consider making radiusd run as a non-priveleged user
#  4. Use secure usernames and password to authenticate access to this server.
#  5. Disable this clause when not required.
<ServerHTTP>
	# Specifies the TCP port to use. Defaults to 9048
	#Port %{GlobalVar:serverhttpport}
	Port 9048
	     
	# ServerHTTP saves for viewing the last LogMaxLines log entries 
	# at or below this trace level.
	Trace 4

	# LogMaxLines specifies the max number of recent log messages that are
	# saved. Defaults to 500. If you set this to 0, then no
	# logger will be created for ServerHTTP, slightly improving performance
	#LogMaxLines 1000

	# BindAddress allows you to bind to a different network address
	# for multihomed hosts. Defaults to 0.0.0.0
	#BindAddress 203.63.154.29, 127.0.0.1

	# You can have one or more AuthBy clauses or AuthBy parameters
	# to specify how to authenticate HTTP connections. AuthByPolicy is also
	# supported. If the last AuthBy returns ACCEPT, the connection 
	# is accepted. If the last AuthBy returns IGNORE, or there are
	# no AuthBy, then fall back to the hardwired Username and
	# Password parameters
	# If the authenticated user has a Management-Policy-Id reply item, 
	# it will be used
	# as that users privilege level, instead of DefaultPrivilegeLevel.
#	<AuthBy FILE>
#		Filename %D/users
#	</AuthBy>

	# This is the fallback username and password that clients must LOGIN as
	# if there are no AuthBy clauses, or if they return IGNORE
	# If there are no AuthBys (or the last returns IGNORE) and there is no
	# Username, you can connect to this interface anonymously (not
	# recommended except for testing in secure enviromnents).
	Username mikem
	# Password can be plaintext or any of the encrypted formats such as
	# {crypt}....., {nthash}....., {SHA}...., {SSHA}....., {mysql}....,
	# {msssql}...., {dechpwd}...., {MD5}......, {clear}....
	Password fred

	# Controls the ServerHTTP users privilege level if
	# a per-user Management-Policy-Id is not available from a successful 
	# authentication from the AuthBy list. 
	# The privilege level is a bitmask. The following privilege levels are
	# defined, and may be logically or'd together
	#  0 means no access, including no login permission. 
	#  1 means viewing basic status only.
	#  2 means ability to reset the server
	#  4 means the ability to edit and change the running config (but not
	#    save it)
	#  8 means the ability to save changes to the configuration
	#  15 means all privileges
	# Defaults to 1
	DefaultPrivilegeLevel 15

	# Clients let you limit which clients you will accept connects from
	# You can specify one or more comma or space separated IP addresses
	# Use this parameter to make your server more secure by limiting 
	# which clients can connect.
	#Clients 127.0.0.2, 203.63.154.29
	# This one limits access to the same host that Radiator runs on:
	Clients 127.0.0.1

	# If AuditTrail is defined, all editing operations and changes will be
	# logged to the file (as well as to the normal log file at trace level 3)
	AuditTrail %D/audit.txt

	# Like most loggers, you can enable LogMicroseconds to get
        # microsecond accuracy in log messages. Requires the
	# Time::HiRes module
	#LogMicroseconds

	# Specifies the maximum time before the user has to log in again
	# Defaults to 1 hour
	#SessionTimeout 3600

	# You can force SSL connections, and use all the standard TLS
	# certificate and verification mechanisms
#	UseSSL 1
	TLS_CAFile ./certificates/demoCA/cacert.pem
	TLS_CertificateFile ./certificates/cert-srv.pem
	TLS_CertificateType PEM
	TLS_PrivateKeyFile ./certificates/cert-srv.pem
	TLS_PrivateKeyPassword whatever
	#TLS_RequireClientCert
	#TLS_ExpectedPeerName .+
	#TLS_SubjectAltNameURI .*open.com.au
	#TLS_CRLCheck
	#TLS_CRLFile %D/certificates/revocations.pem
	#TLS_CRLFile %D/certificates/revocations2.pem

	# Ephemeral key exchange is supported with Diffie-Hellman key
	# exchange (DHE) and Elliptic Curve Diffie-Hellman key
	# exchange (ECDHE). See the reference manual for details.
	#TLS_DHFile %D/certificates/dh2048.pem
	#TLS_ECDH_Curve prime256v1

	# Users that log in to the Server HTTP interface can be logged with an
	# AuthLog clause:
	<AuthLog FILE>
		 Filename %L/authlog
	</AuthLog>
	
	# If a page is requested but not found in the set of built-in pages
	# PageNotFoundHook is called to try to handle the request.
	# PageNotFoundHook is passed the requested URI and a reference to the 
	# ServerHTTP connection. If it can handle the request, it returns an
	# array of ($httpcode, $content, @httpheaders) else undef.
	#PageNotFoundHook sub {return (200, "your HTML content");}

</ServerHTTP>
