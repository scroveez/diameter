# proxyalgorithm.cfg
#
# Example Radiator configuration file.
# This sample files shows some examples of using various
# Proxying systems, using AuthBy RADIUS, AuthBy ROUNDROBIN,
# AuthBy VOLUMEBALANCE and AuthBy LOADBALANCE
# 
# These modules allow you to implemnet the load balancing algorithm 
# that suits your needs best
# Author mikem@open.com.au
# $Id: proxyalgorithm.cfg,v 1.6 2014/09/05 21:44:01 hvn Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to change this to suit your site.
<Client DEFAULT>
	Secret	mysecret
</Client>

# This DEFAULT Realm uses the default proxying algorithm:
# Always try to send each packet to the first Host listed.
# If that fails (because of too many retries), try the next
# listed etc until they are all exhausted, then give up
<Realm DEFAULT>
	<AuthBy RADIUS>
		# You can optionally set a backoff time. The default of
		# 0 means that it will always try the first one
		# for every request 
#		FailureBackoffTime 60

		# The default values for the Hosts clauses
		# below come from the attributes of the same name
		# here. You can override them in the Host clause
		Secret mysecret
		RetryTimeout 1
		Retries 1

		<Host 203.63.154.2>
		</Host>
		<Host 203.63.154.3>
		</Host>
		<Host 203.63.154.4>
		</Host>
	</AuthBy>
</Realm>

# This realm will round robin among all Hosts, and also implement
# a failure backoff period. If no reply is received from a host,
# it will be dropped from the list until the failure backoff time
# expires.
<Realm roundrobin>
	<AuthBy ROUNDROBIN>	
		# FailureBackoffTime will cause ROUNDROBIN to 
		# not consider a host for a period of time
		# if no reply is received.
		# CAUTION: the default value of 0 will cause
		# endless retransmission until success: 
		# You should probably make sure that
		# FailureBackoffTime exceeds the total possible
		# retransmission time (the product of Retries and 
		# and RetryTimeout for all Hosts)
		FailureBackoffTime 60

		# The default values for the Hosts clauses
		# below come from the attributes of the same name
		# here. You can override them in the Host clause
		Secret mysecret
		RetryTimeout 1
		Retries 1

		<Host 203.63.154.2>
		</Host>
		<Host 203.63.154.3>
		</Host>
		<Host 203.63.154.4>
			AuthPort 1647
			AcctPort 1648
		</Host>
	</AuthBy>

</Realm>

# This realm will load balance among all hosts, and also implement
# a failure backoff period. If no reply is received from a host,
# it will be dropped from the list until the failure backoff time
# expires.
# The load balancing is based on the request turnaround time
# (the time taken to process the request
# as measured by the proxying Radiator), scaled with the per-host
# BogoMips number. The proxying Radiator will choose the host that 
# is currently responding fastest (according to recent measured, scaled
# response times)
# A Host with BogoMips set to 0 will not be a candidate for proxying
# Requires the Time::HiRes perl module
<Realm loadbalance>
	<AuthBy LOADBALANCE>	
		# FailureBackoffTime will cause LOADBALANCE to 
		# not consider a host for a period of time
		# if no reply is received.
		# CAUTION: the default value of 0 will cause
		# endless retransmission until success: 
		# You should probably make sure that
		# FailureBackoffTime exceeds the total possible
		# retransmission time (the product of Retries and 
		# and RetryTimeout for all Hosts)
		FailureBackoffTime 60

		# The default values for the Hosts clauses
		# below come from the attributes of the same name
		# here. You can override them in the Host clause
		Secret mysecret
		RetryTimeout 1
		Retries 0

#		<Host 203.63.154.2>
#		</Host>
#		<Host 203.63.154.3>
#		</Host>
#		<Host 203.63.154.4>
#			AuthPort 1647
#			AcctPort 1648
#		</Host>
		<Host localhost>
			BogoMips 2
			AuthPort 1647
			AcctPort 1648
		</Host>
		<Host localhost>
			BogoMips 3
			AuthPort 1649
			AcctPort 1650
		</Host>
	</AuthBy>
</Realm>

# This realm will volume balance among all hosts, and also implement
# a failure backoff period. If no reply is received from a host,
# it will be dropped from the list until the failure backoff time
# expires.
# The volume balancing is based on the BogoMips rating for each
# host. The hosts with the largest BogoMips get the most requests
# sent to them. All hosts will get a proportion of requests, 
# based in the relative sizes of their BogoMips rating.
# If all hosts have the same number of BogoMips,
# the result is identical to ProxyAlgorithm ROUNDROBIN.
# A Host with BogoMips set to 0 will not be a candidate for proxying
<Realm volumebalance>
	<AuthBy VOLUMEBALANCE>	
		# FailureBackoffTime will cause VOLUMEBALANCE to 
		# not consider a host for a period of time
		# if no reply is received.
		# CAUTION: the default value of 0 will cause
		# endless retransmission until success: 
		# You should probably make sure that
		# FailureBackoffTime exceeds the total possible
		# retransmission time (the product of Retries and 
		# and RetryTimeout for all Hosts)
		FailureBackoffTime 60

		# MaxTargetHosts limits the number of different hosts a request
		# will be proxied to in the case of no reply. Defaults to 0
		# which mean no limit: if the load balancer does not receive a
		# reply from a host, it will keep trying until all hosts are
		# exhausted.
		# MaxTargetHosts 1 will make sure VOLUMEBALANCE will only send a request to at 
		# most 1 host, even if that host does not reply.
		#MaxTargetHosts 1

		# The default values for the Hosts clauses
		# below come from the attributes of the same name
		# here. You can override them in the Host clause
		Secret mysecret
		RetryTimeout 1
		Retries 0

		<Host 203.63.154.2>
			BogoMips 1
		</Host>

		# This host will get twice as many requests as
		# the one above
		<Host 203.63.154.3>
			BogoMips 2
		</Host>

		# This host will get three times as many requests as
		# the first one
		<Host 203.63.154.4>
			AuthPort 1649
			AcctPort 1650
			BogoMips 3
		</Host>
	</AuthBy>
</Realm>

# This realm will use information in the incoming request to choose the 
# preferred host, with the intention that all requests in a single EAP conversation will 
# all go to the same target server, enabling EAP and other stateful
# RADIUS transactions to be loadbalanced without interfering with streams 
# of related requests.
# If the preferred host is not available try the following ones until all are exhausted
<Realm hashbalance>
	<AuthBy HASHBALANCE>
		# You can optionally set a backoff time. The default of
		# 0 means that it will always try the preferred host first
		FailureBackoffTime 60

		# The default values for the Hosts clauses
		# below come from the attributes of the same name
		# here. You can override them in the Host clause
		Secret mysecret
		RetryTimeout 1
		Retries 0

		<Host 203.63.154.2>
		</Host>
		<Host 203.63.154.3>
		</Host>
		<Host 203.63.154.4>
		</Host>

		# You can optionally configure how the hash is computed. You
		# Should not need to change this.
		#HashAttributes %{Calling-Station-Id}:%{Called-Station-Id}:%n
	</AuthBy>
</Realm>
