# freeradiussql.cfg
#
# Example Radiator configuration file that allows you to
# authenticate from a FreeRadius compatible SQL database.
#
# You should consider this file to be a starting point only
# $Id: freeradiussql.cfg,v 1.2 2007/07/25 08:38:14 mikem Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
Trace		4

# These variables define the database to connect to and how to authenticate
# the database connection. The same database is
# used for all clauses.
# Adjust them to suit your database
DefineGlobalVar dbsource dbi:mysql:radius
DefineGlobalVar dbusername mikem
DefineGlobalVar dbauth fred

# You will probably want to change this to suit your site.
# You should only honour clients listed in the nas table, so
# only use this for testing:
#<Client DEFAULT>
#	Secret	mysecret
#	DupInterval 0
#</Client>

# Look in a FreeRadius compatible NAS table for the clients to honour
<ClientListSQL>
	DBSource	%{GlobalVar:dbsource}
	DBUsername	%{GlobalVar:dbusername}
	DBAuth		%{GlobalVar:dbauth}
	
	# Be compatible with FreeRadius:
	GetClientQuery select nasname,secret,0,NULL,NULL,type,community from nas
</ClientListSQL>

# This will authenticate all users from the standard FreeRadius radcheck, radreply,
# radgroupcheck and radgroupreply tables:
<Realm DEFAULT>
       # Add Acct-Unique-Session-Id to incoming accounting requests
       # Its a MD5 hash of User-Name, Acct-Session-Id, NAS-IP-Address, NAS-Port
       # Acct-Unique-Session-Id whcich should be unique across all accounting.
       # It will then be available for the accounting tables
       PreProcessingHook sub { my $p = ${$_[0]};\
		   if ($p->code() eq 'Accounting-Request'){\
		   my $key = $p->get_attr('User-Name') . ',' \
		     . $p->get_attr('Acct-Session-Id') . ',' \
		     . $p->get_attr('NAS-IP-Address') . ',' \
		     . $p->get_attr('NAS-Port');\
		   my $hash = Digest::MD5::md5_hex($key);\
		   $p->add_attr('Acct-Unique-Session-Id', $hash);\
		   }}

    # Authenticate by looking in the FreeRadius SQL tables
    <AuthBy FREERADIUSSQL>
	DBSource	%{GlobalVar:dbsource}
	DBUsername	%{GlobalVar:dbusername}
	DBAuth		%{GlobalVar:dbauth}

    </AuthBy>

    # Make sure all auth successes and failures are logged to radpostauth
    <AuthLog SQL>
	DBSource	%{GlobalVar:dbsource}
	DBUsername	%{GlobalVar:dbusername}
	DBAuth		%{GlobalVar:dbauth}

	LogSuccess 1
	# Inserts the current date into the date field
	SuccessQuery insert into radpostauth (user,pass,reply) values(%2,%3,'Access-Accept')
	LogFailure 1
	FailureQuery insert into radpostauth (user,pass,reply) values(%2,%3,'Access-Reject')
    </AuthLog>
</Realm>
