# eap_gtc_ace.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with 
# EAP Generic Token Card authentication with the SecurID ACE server.
#
# We suggest you start simple, prove to yourself that it
# works and then develop a more complicated configuration.
#
# This example will authenticate all users from SecurID ACE
# It will accept requests from any client and try to handle request
# for any realm.
# And it will print out what its doing in great detail.
#
# You can test this with 'radpwtst -noacct -eapgtc'
#
# [mikem@zulu Radiator]$ ./radpwtst -noacct -eapgtc
# sending Access-Request...
# Enter PASSCODE: :
#
#    ( now read the current token code showing on your token (eg 596008)
#    ( and prepend it with your secret PIN (eg 3810)
# Enter PASSCODE: : 3810596008
# sending Access-Request...
# OK
#
# Also tested with Funk Odyssey client, using EAP Token-Card.
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: eap_gtc_ace.cfg,v 1.2 2004/10/11 06:32:42 mikem Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
	DupInterval 0
</Client>

<Realm DEFAULT>
	<AuthBy ACE>
		# You may need to tell ACE where your
		# sdconf.rec file is. Make sure it is accessible
		# to the user who runs Radiator.
		# Not required on Windows
		ConfigDirectory /opt/ace/data

		# EAPType sets the EAP type(s) that Radiator will honour.
		# Options are: MD5-Challenge, One-Time-Password
		# Generic-Token, TLS, TTLS, PEAP, MSCHAP-V2
		# Multiple types can be comma separated. With the default (most
		# preferred) type given first
		EAPType Generic-Token
	</AuthBy>
</Realm>

