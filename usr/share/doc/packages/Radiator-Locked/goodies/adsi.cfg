# adsi.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with 
# a Active Directory authentication on Windows.
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: adsi.cfg,v 1.5 2004/08/24 06:08:39 mikem Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to change this to suit your site.
<Client DEFAULT>
	Secret	mysecret
	DupInterval 0
</Client>

<Realm DEFAULT>
	# During authentication, AuthBy ADSI finds a matching user
	# record, checks the AccountDisabled and IsAccountLocked flags,
	# checks the LoginHours permitted times, and the users password

	<AuthBy ADSI>
		Identifier ADSI

		# BindString is the string that defines what AD
		# object will be bound in order to find user details.
		# AuthUser tells how to contruct the user name to 
		# authenticate in order to get access to the object
		# specified by BindString
		# You can bind to any Active Directory provider supported
		# on your Radiator host, but WinNT and LDAP will be the
		# usual choices. BindString must specify which provider to
		# use and how to match the user. Use %0 to specify the
		# user name to match.
		#
		# WinNT means to use an NT 4.0 promary or backup domain
		# controller, eg "WinNT:MyDomain/%0,User" means to 
		# match Users in the Windows NT domain called MyDomain.
		# If the domain is omitted, the "best" domain controller
		# in the default domain will be used.
		# Other acceptable variants are:
		# BindString WinNT://%0,User
		# BindString WinNT://domain/%0,User
		# BindString WinNT://domain/controller/%0,User
		#
		# WinNT means to use an NT 4.0 promary or backup domain
		# controller, eg "WinNT:MyDomain/%0,User" means to 
		# match Users in the Windows NT domain called MyDomain.
		# If the domain is omitted, the "best" domain controller
		# in the default domain will be used.
		# Other acceptable variants are:
		# BindString WinNT://%0,User
		# BindString WinNT://domain/%0,User
		# BindString WinNT://domain/controller/%0,User
		#
		# LDAP means to use the an LDAP server, including 
		# Microsoft Exchange and Windows 2000 Active Directory
		# Using Active Directory, there are several options depending
		# on whether SearchAttribute (an optional parameter) is defined.
		#
		# If SearchAttribute IS defined, it specifies the LDAP attribute
		# to search against.  It will find a user where
		# SearchAttribute = AuthUser.
		# For example, to search off the userPrincipalName (which is the
		# user@domain.com style of name), you would define SearchAttribute
		# as "userPrincipalName":
#		SearchAttribute   userPrincipalName
		# and then define BindString to be the start location in the LDAP
		# tree to begin the search, eg "LDAP://ldapsvr/dc=yourdomain,dc=com".
		# Radiator will search for the user via the userPrincipalName
		# and authenticate.
		# The following configuration will perform this search, assuming
		# AuthUser contains the fully-qualified email address
#		BindString LDAP://dc=open,dc=com,dc=au
		# AuthUser would contain the value to search against.  If it has a realm
		# that equals your Internet domain:
#		AuthUser  %0
		# If your client does not include a realm, you'll need to append the domain
		# name for the search to succeed.
#		AuthUser  %0@open.com.au

		# If SearchAttribute is NOT defined, then no search is done and Radiator
		# will open the object directly using the distinguished name you specify.
		# eg "LDAP://ldapsvr/cn=%0,cn=Users,dc=yourdomainname,dc=com means to match
		# a user with the given common name (cn), 
		# in the AD domain yourdomainname.com
		# If ldapsvr is omitted, the default AD server
		# will be used. Bind string must convert to the 
		# Distinguished Name of the user to be authenticated,
		# and AuthName must convert to one of the permitted
		# login names of the user.
		# Other acceptable variants are:
		# BindString LDAP://cn=.......
		# BindString LDAP://controller/cn=.......
		# BindString LDAP://msexchangeserver.bigco.com/cn=.......
		# BindString LDAP://msexchangeserver:390/cn=.......
		# Usually you will need to specify the Users container
		# and the domain name of your AD domain, as dc's
		# The following works for our AD for open.com.au, with
		# a vanilla default configuration. This will 
		# Authenticate the username using NTLM, and get
		# the user account details from the (standard) 
		# AD Users group
		# Note that SearchAttribute is NOT defined for this to work!		
		BindString LDAP://cn=%0,cn=Users,dc=open,dc=com,dc=au

		# This example will authenticate the user name and password
		# from the AD record for users in the organisational
		# unit called 'csx users', even if user names
		# contain spaces
#		BindString LDAP://cn=%0,ou=csx users,dc=open,dc=com,dc=au
#		AuthUser cn=%0,ou=csx users,dc=open,dc=com,dc=au
#		AuthFlags 0

		# NDS means use Novell Directory Services. eg
		# "NDS://MarsTree/O=MARS/OU=MARTIANS/CN=%0
		#
		# The default is "WinNT://%0,User" which means
		# a user with the given user name in the default domain
#		BindString WinNT://OSC/%0,User

		# You can also use other attributes in the ADSI
		# user record to create additional Radius check and reply 
		# itms with AuthAttrDef. The general format is
		# AuthAttrDef	adsiname,radiusattr,type
		# adsiname is the name of an ADSI user attribute
		# radiusattr is the name of the Radius attribute to
		# associate with it. 
		# type can be one of 'check' or 'reply'
		# This turns the value of the adsiname parameter 
		# in the ADSI
		# user record into a Radius check or reply item that
		# is used radiusattr. If the ADSI parameter is multivalued
		# check items will be automatically separated by '|', permitting
		# a 'one-of' match. For reply items, they will be converted into 
		# Multiple reply items.
		# For example, 
		# AuthAttrDef address,Framed-IP-Address,reply
		# would get an atttribute called 
		# 'address' from the ADSI
		# user record, and put it into Framed-IP-Address
		# attribute in the Radius reply.
		# This is most useful if you add your 
		# own attributes to the User schema
		#   eg:
		# AuthAttrDef HomePhone,Calling-Station-Id,check
		# multi-valued check item attribtues like otherHomePhone
		# are converted into multiple permitted check items so that
		# any one is permitted.
		AuthAttrDef otherHomePhone,Calling-Station-Id,check

		# This will set up some standard reply items for
		# your NAS, you may need others for your NAS
		DefaultReply Service-Type=Framed-User,Framed-Protocol=PPP

		# CheckGroup will set the Class attribute according to group
		# membership.  For Active Directory LDAP, only the CN= portion 
		# needs to be defined.
		# The config below will check for membership to the iPassUsers
		# group and set the Class to 'ou=iPass'.		
                #CheckGroup      CN=iPassUsers,ou=iPass

		# GroupRequired is an optional parameter that will check for
		# group membership before allowing access.  This way, you can
		# grant access to a user by placing them in a specific Windows
		# group.
		# The config below will check for membership in the iPassUsers.
		# If the user is a member, access granted.  If not, access denied
		# even if the user/password is correct.
                #GroupRequired    CN=iPassUsers

		# You can make individual per-user Group checks with a
                #  Group="CN=iPassUsers"
		# check item in a users file too  
	</AuthBy>
</Realm>

<Realm grouptest>
	RewriteUsername	s/^([^@]+).*/$1/
	<AuthBy FILE>
		Filename ./adsiusers
	</AuthBy>
</Realm>
