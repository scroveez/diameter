# ldap-sasl.cfg
#
# Example Radiator configuration file for authenticating from
# an local LDAP server, using SASL to authentication the connection to
# the LDAP server.
#
# When UseSASL is enabled, AuthBy LDAP 2 will send the SASLUser and
# SASLPassword to the LDAP server when it does an LDAP bind prior to
# searching for the Radius user to authenticate. The LDAP server will
# then use the SASL configuration mechanism configured into the LDAP
# server to authenticate the bind.
#
# This very simple file will allow you to get started with 
# a simple LDAP + SASL authentication system. 
#
# We suggest you start simple, prove to yourself that it
# works and then develop a more complicated configuration.
#
# In this example, there is a local LDAP database
# The LDAP database administrator has a common name of:
#   cn=Manager, dc=example, dc=com
# The LDAP server in this example manages a Base DN of:
#   dc=example, dc=com
# IN the database, there is an entry for each user. Their username
# is in the LDAP attribute called "uid", and there is a plaintext 
# password in the LDAP attribute called userPassword.
#
# Also, you will need to install the SASL authentication libraries on
# the LDAP server host, and add a user to the SASL database your LDAP
# server will use (typically, you can do this with something like 
#  /usr/sbin/saslpasswd2 -c saslusername
# where saslusername is the name of the SASL user, and must match the
# SASLUser configured into AuthBy LDAP.
# Furthermore, you have to tell OpenLDAP that the SASL username is to
# be mapped to an LDAP user with the same
# priveleges as the LDAP manager (and hence have
# access to protected password fields etc), you would need
# something like this in your OpenLDAP configuration
# (typically /etc/openldap/slapd.conf):
# sasl-regexp uid=saslusername,cn=digest-md5,cn=auth cn=Manager,dc=example,dc=com
# Consult your LDAp server documentation for detail on how
# to enable SASL authentication and user privelege mapping.
#
# This system is tested against OpenLDAP 2.1.
#
# Also requires perl-ldap 0.33 and the Authen::SASL 2.09 module
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: ldap-sasl.cfg,v 1.3 2012/06/27 23:27:18 mikem Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
Trace		4

# You will probably want to add other Clients to suit your site.
<Client DEFAULT>
	Secret	mysecret
	DupInterval 0
</Client>

<Realm DEFAULT>
	<AuthBy LDAP2>
		# Tell Radiator how to talk to the LDAP server
		Host		localhost

		# Tell the LDAP server to authenticate the LDAP bind
		# with SASL:
		UseSASL

		# When you are using SASL authentication to connect to
		# the LDAP server, Radiator will
		# use AuthDN and AuthPassword to authenticate using
		# SASL instead of the default simple authentication.
		# In this example, we have
		# configured a SASL user called mikem into the SASL
		# user database using saslpasswd2. In order for 
		# openldap to map the SASL user 'mikem' to the same
		# priveleges as the LDAP manager (and hence have
		# access to protected password fields etc), you would need
		# something like this in your OpenLDAP configuration
		# (typically /etc/openldap/slapd.conf):
		# sasl-regexp uid=mikem,cn=digest-md5,cn=au cn=Manager,dc=example,dc=com
		AuthDN mikem
		AuthPassword fred

		# You can also control which SASL mechanisms are
		# acceptable for SASL authentication. SASLMechanism is
		# a space separated list of mechanism names supported
		# by Authen::SASL, such as ANONYMOUS CRAM-MD5
		# DIGEST-MD5 EXTERNAL LOGIN PLAIN.
		# Defaults to DIGEST-MD5. If you change this you may
		# need to change your SASL->LDAP user mapping
		#SASLMechanism CRAM-MD5

		# This the top of the search tree where users
		# will be found. It should match the configuration
		# of your server, see /etc/openldap/slapd.conf
		BaseDN		dc=example, dc=com

		# This is the LDAP attribute to match the radius user name
		UsernameAttr	cn

		# If you dont specify ServerChecksPassword, you
		# need to tell Radiator which attribute in the LDAP
		# database contains
		# the users correct password. It can be plaintext or encrypted
		PasswordAttr    userPassword
		
		# This tells AuthBy LDAP2 not to check the users password,
		# ie that LDAP is just used to store check or reply items
		# and the authentication happens elsewhere
		# Requires latest patches to Radiator 3.11
		#NoCheckPassword

		# On some (most?) LDAP servers, you can tell AuthBy
                # LDAP to keep the connection to the server up for as
		# long as possible, and not close it after each
		# authentication. This can improve performance,
		# especially where UseTLS or USeSSL are in
		# operation. Not all server can support this, so if you
		# enable it and things dont work right: disable it
		# again.
		HoldServerConnection
		  
		# You can use CheckAttr, ReplyAttr and AuthAttrDef
		# to specify check and reply attributes in the LDAP 
		# database. See the reference manual for more 
		# information
		#AuthAttrDef ipaddress,Framed-IP-Address,reply

		# These are the classic things to add to each users 
		# reply to allow a PPP dialup session. It may be 
		# different for your NAS. This will add some 
		# reply items to everyone's reply
		AddToReply Framed-Protocol = PPP,\
        		Framed-IP-Netmask = 255.255.255.255,\
        		Framed-Routing = None,\
        		Framed-MTU = 1500,\
			Framed-Compression = Van-Jacobson-TCP-IP

		# You can enable debugging of the Net::LDAP
		# module with this, which will dump LDAP requests
		# sent  to and from the LDAP server
		#Debug 255

		# With LDAP2 and perl-ldap 0.22 and better on Unix/Linux, You can enable SSL or TLS.
		# See http://www.openldap.org/pub/ksoper/OpenLDAP_TLS_howto.html
		# for assistance on how to generate certificates and
		# configure openldap for SSL and/or TLS
		# To use SSL, set these
		#UseSSL
		#SSLCAClientCert ldapcertificates/clientcrt.pem
		#SSLCAClientKey ldapcertificates/clientkey.pem
		# and one of
		#SSLCAFile ldapcertificates/demoCA/cacert.pem
		# SSLCAPath /path/to/file/containing/certificate/of/CA
		#  (certificates must be in PEM format)
		
		# To use TLS, set these
		#UseTLS
		#SSLCAClientCert ldapcertificates/clientcrt.pem
		#SSLCAClientKey ldapcertificates/clientkey.pem
		# and one of
		#SSLCAFile ldapcertificates/demoCA/cacert.pem
		# SSLCAPath /path/to/file/containing/certificate/of/CA
		#  (certificates must be in PEM format)
		# These set the corresponding parameters in the 
		# LDAPS connection (see perl-ldap docs)
		# Requires IO::Socket::SSL, Net::SSLeay and openssl

		# You can control the timout for connection failure,
		# plus the backoff time after failure. Timout defaults
		# to 10 secs and FailureBackoffTime to 10 mins
		#Timeout 2
		# FailureBackoffTime 10

		# With PostSearchHook you can do your own processing
		# of the LDAP data. 
		# Arg 0 is the AuthBy LDAP object
		# Arg 1 is the user name being authenticated
		# Arg 2 is the received request packet
		# Arg 3 is the user object holding check and reply
		#  items for this user
		# Arg 4 is the search results handle, whose type
		#   depends on whether its LDAP, LDAP2, or LDAPSDK
		#PostSearchHook sub {print "PostSearchHook @_\n";\
		#	my $attr = $_[4]->get('someldapattr');\
		#	print "get attribute $attr\n";}

		# You can control the LDAP protocol version to be used
		# to talk to the LDAP server. OpenLDAP 2 requires
		# Version 3 unless you have 'allow bind_v2' in your
		# slapd.conf. Defaults to version 2			
		Version 3

		# You can specify the maximum number of LDAP records
	        # that match the search that will be used for
		# check and reply items. Only the first will be
		# used for ServerChecksPasssword. Defaults to 1
		#MaxRecords 2
	</AuthBy>
</Realm>

