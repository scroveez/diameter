# internalhook.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with 
# AuthBy INTERNAL using hooks.
#
# AuthBy INTERNAL allows you to define in a fixed way how to respond 
# to each kind of request handled by the AuthBy. And it also allows
# you to call a hook for each kind of request. If a hook is defined
# the result of the request depends on the returned value from the hook,
# otherwise it depends on the Result* parameters
# For each type of request you can specify whether to accept, reject, 
# ignore or challenge the request. This can be useful for
# ignoring certain types of requests, or to adjust the behaviour
# of cascades of AuthBy clauses.
# The following hooks can be defined:
#  RequestHook
#  AuthHook
#  AcctHook
#  AcctStartHook
#  AcctStopHook
#  AcctAliveHook
#  AcctOtherHook
#  OtherHook
# 
# All hooks are called with 3 arguments: 
#  $p the current request being handled
#  $rp the reply being constructed in response to the request
#  $extra_checks, a string of additional check items that might be
#    required to be checked.
# Hooks are expected to reply with an array of 2 variables.
# The first variable in the array is the result of the hook. Allowable
# results are:
#   $main::ACCEPT
#   $main::REJECT
#   $main::IGNORE
#   $main::CHALLENGE
#   $main::REJECT_IMMEDIATE
# (Note that for accounting requests, anything except ACCEPT means to
# to send no reply to the client.)
# The second variable in the array is an optional reason message that
# will be used to log the reason for rejections.
#
# You should consider this file to be a starting point only
# $Id: internalhook.cfg,v 1.1 2002/03/24 23:07:49 mikem Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
	DupInterval 0
</Client>

# All the *Result parameters take one of the following keywords
# to determine how to reply to that type of request. The keywords
# are case insensitive, and may be embedded within any string
#  accept
#  reject
#  ignore
#  challenge
#   anything else will IGNORE
# Caution: for accounting requests, reject is the same as ignore
<Realm DEFAULT>
	<AuthBy INTERNAL>
		# If RequestHook is defined, then the result of every request
		# will be determined by the return from the hook
		#RequestHook sub {return ($main::REJECT, "Rejected by RequestHook");}

		# If AuthHook is defined, then the result of every 
		# Access-Request
		# will be determined by the return from the hook
		# This example ACCEPTS user mikem (irrespective of password
		# and REJECTS everyone else
		#AuthHook sub {return $_[0]->getUserName() eq 'mikem' ? ($main::ACCEPT) : ($main::REJECT, "Not mikem");}

		# If AcctHook is defined, then the result of every 
		# Accouting-Request
		# will be determined by the return from the hook
		#AcctHook sub {return ($main::REJECT, "Rejected by AcctHook");}

		# If AcctHook is defined, then the result of every 
		# Accounting-Request Start
		# will be determined by the return from the hook
		# You can also define AcctStartHook, AcctStopHook, 
		# AcctAliveHook, AcctOtherHook
		#AcctStartHook sub {return ($main::REJECT, "Rejected by AcctStopHook");}

		# DefaultResult will determine what is done with requests
		# not handled by a hook
		DefaultResult ACCEPT

		# You can use all the standard AddToReply etc
		# to adjust accepts
#		AddToReply Reply-Message=test
	</AuthBy>
</Realm>

