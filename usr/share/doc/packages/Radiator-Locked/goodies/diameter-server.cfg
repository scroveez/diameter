# diameter-server.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with 
# proxying from one Radiator to another using AuthBy DIAMETER.
# It listens for AuthBy DIAMETER connections on port 9048, and 
# services each request locally.
# 
# We suggest you start simple, prove to yourself that it
# works and then develop a more complicated configuration.
# This file shows how to implement the server end of an AuthBy
# DIAMETER connection, which will proxy all requests to the
# remote radius server by a TCP connection
#
# Complies with RFC 3588 and 6733, RFC 4005, RFC 4072
#
# You can test this with
# perl goodies/diapwtst -usetls
#
# This example will authenticate from a standard users file in
# the current directory and log accounting to a file in the current
# directory.
# It will accept requests from any client and try to handle request
# for any realm.
# And it will print out what its doing in great detail.
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: diameter-server.cfg,v 1.16 2014/11/27 20:57:06 hvn Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# Dont listen on any Radius UDP ports
AuthPort
AcctPort

# You can augment the default Diameter dictionary if you have custom
# Diameter VSA's
#DiameterDictionaryFile %D/my_private_diameter_attrs.dat
#DiameterDictionaryFile /tmp/arthur/diameter_attrs.dat
#DictionaryFile %D/dictionary,/tmp/arthur/dictionary.3gpp

# Listen for DIAMETER connections from Diameter peers. Incoming
# Diameter requests will be converted to Radius requets and
# dispatched to a Handler or Realm.
<ServerDIAMETER>
	OriginHost zulu.open.com.au
	OriginRealm open.com.au

	# You can control the network interface(s) to listen on with BindAddress.
	# You can specify multiple address separated by commas. Defaults to the global
	# BindAddress, which defaults to 0.0.0.0 (all interfaces).
	#BindAddress 203.63.154.29, 127.0.0.1

	# This is the name or number of the TCP or SCTP port to listen
        # on. Defaults to the IANA official Diameter port 3868
	#Port 9048

	# You can specify which protocol to use. Options are
	# 'tcp' or 'sctp'. Defaults to 'tcp'. This must agree
	# with what is configured into the Diameter peers that
	# connect to us. SCTP is not supported by all platforms.
#	Protocol sctp

	# You can enable TLS on this connection for encryption
	# and mutual authentication. If the TLS handshake is
	# successful, all traffic will be encrypted with TLS
	# This also provides mutual authentication between the
	# Diameter peer and this ServerDIAMETER.
	# You _must_ have a valid server certificate for DIAMETER
	# to work with UseTLS. The client will not be able to connect
	# unless the server presents a valid certificate.
	# Requires Net_SSLeay and openssl
#	UseTLS
	TLS_CAFile ./certificates/demoCA/cacert.pem
	TLS_CertificateFile ./certificates/cert-srv.pem
	TLS_CertificateType PEM
	TLS_PrivateKeyFile ./certificates/cert-srv.pem
	TLS_PrivateKeyPassword whatever

	# Force client certificate authentication.
	# If TLS_RequireClientCert is set, the server will require
	# every Diameter peer to present a valid client certificate
	# with a CN that matches TLS_ExpectedPeerName
	# otherwise the TLS handshake will fail and the client
	# will not be able to connect. To enable the client to send a
	# certificate, you must set at least
	# TLS_CertificateFile and TLS_PrivateKeyFile in the client.
	# The sample client certificate has a CN of
	# 'testUser' and therefore you should set TLS_ExpectedPeerName
	# as below
#	TLS_RequireClientCert

	# By default the server certificate is verified by
	# comparing the certificate CNs and subjectAltNames (IP
	# Address types)
	# against the clients's IP address. If these fail, you can
	# specify a pattern to match against the certificate Subject
	# In any case, the certificate must still be verified againt
	# the issuers root certificate.
	# Defaults to .+ which will match any subject, provided it is
	# validated by the root certificate and any CRLs
	#TLS_ExpectedPeerName .+

	# Ephemeral key exchange is supported with Diffie-Hellman key
	# exchange (DHE) and Elliptic Curve Diffie-Hellman key
	# exchange (ECDHE). To enable DHE you need to specify the name
	# of the DH group file. To enable ECDHE you need to specify
	# the EC curve name. See openssl ecparam -list_curves for the
	# curve names. Note: these options do not force ephemeral
	# keying but allow it to be used if the both peers agree to
	# use a suitable ciper suite.
	#TLS_DHFile %D/certificates/dh2048.pem
	#TLS_ECDH_Curve prime256v1

	# If TLS_CRLCheck is set 
	# then Radiator will look for a certificate revocation list (CRL) 
	# for the certificate issuer
	# when authenticating each client. If a CRL file is not found, or
	# if the CRL says the certificate has neen revoked, the authentication will 
	# fail with an error:
	#   SSL3_GET_CLIENT_CERTIFICATE:no certificate returned
	# One or more CRLs can be named with multiple TLS_CRLFile parameters.
	# Alternatively, CRLs may follow a file naming convention: 
	#  the hash of the issuer subject name 
	# and a suffix that depends on the serial number.
	# eg ab1331b2.r0, ab1331b2.r1 etc.
	# You can find out the hash of the issuer name in a CRL with
	#  openssl crl -in crl.pem -hash -noout
	# CRLs with tis name convention
	# will be searched in TLS_CAPath, else in the openssl 
	# certificates directory typically /usr/local/openssl/certs/
	# CRLs are expected to be in PEM format.
	# A CRL files can be generated with openssl like this:
	#  openssl ca -gencrl -revoke cert-clt.pem
	#  openssl ca -gencrl -out crl.pem
	# Use of these flags requires Net_SSLeay-1.21 or later
	# Each TLS_CRLFile will be reloaded and reread at the start of each new
	# Diameter session if the file has changed since the last session.
	# TLS_CRLFile can include operating system wildcards to refer to multiple CRLS
#	TLS_CRLCheck
#	TLS_CRLFile %D/certificates/revocations.pem
#	TLS_CRLFile %D/certificates/revocations2.pem
#	TLS_CRLFile %D/crls/*.r0

	# SupportedVendorIds is a list of Supported Vendor Ids announced in the Diameter CER.
	# There is no default and no Supported-Vendor-Id is announced by default.
	# Keyword 'DictVendors' is an alias for all vendors in the all loaded
	# dictionaries and the dictionary file configured with
	# DiameterDictionaryFile
	#SupportedVendorIds 10415

	# AuthApplicationIds is a list of Auth-Application-Id
	# attributes announced in the Diameter CER.  Defaults to '0,
	# 1, 5' (DIAMETER BASE, NASREQ and Diameter-EAP).
	#AuthApplicationIds 0, 1

	# AcctApplicationIds is a list of Acct Application Ids announced in the Diameter CER.
	# Defaults to '3' (BASE_ACCOUNTING)
	#AcctApplicationIds 3

	# This optional parameter allows you to define a Perl function
	# that will be called during packet
	# processing. PostDiaToRadiusConversionHook is called after an
	# incoming Diameter request has been converted to its
	# equivalent RADIUS request, allowing you to alter or ad to
	# attritbute conversions etc. It is passed references to the
	# incoming Diameter reqest and the converted RADIUS request.
#	PostDiaToRadiusConversionHook sub { my $d = ${$_[0]}; my $p = ${$_[1]}; print "here in PostDiaToRadiusConversionHook $d, $p\n";}

	# This optional parameter allows you to define a Perl function
	# that will be called during packet
	# processing. PostDiaToRadiusConversionHook is called after an
	# RADIUS reply has been converted to its equivalent Diameter
	# reply, prior to being sent back to the Diameter client. It
	# is passed references to the RADIUS reply and the converted
	# Diameter reply.
#	PostRadiusToDiaConversionHook sub { my $p = ${$_[0]}; my $d = ${$_[1]};print "here in PostRadiusToDiaConversionHook $p, $d\n";}

</ServerDIAMETER>

<Realm DEFAULT>
	<AuthBy FILE>
		Filename ./users
		AutoMPPEKeys
		EAPType MD5-Challenge
	</AuthBy>
</Realm>
