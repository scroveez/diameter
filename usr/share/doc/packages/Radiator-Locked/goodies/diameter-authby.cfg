# diameter-authby.cfg
#
# This is an example Radiator configuration file showing how to proxy
# RADIUS messages to DIAMETER server based on RFC 4005.
#
# This example will convert RADIUS requests to DIAMETER requests and
# send them to a DIAMETER server. It will accept requests from any
# client and try to handle request for any realm. And it will print
# out what its doing in great detail.
#
# You can test this with Radiator ServerDIAMETER. Start one radiusd
# using goodies/diameter-server.cfg and another radiusd using
# goodies/diameter-authby.cfg (this file). Test with radpwtst
# 'radpwtst -trace 4'.
#
# AuthBy DIAMETER is currently set to advertise values 0 and 1
# (Diameter common message and NASREQ) with Auth-Application-Id and
# value 3 (Diameter base accounting) with Acct-Application-Id.
#
# In order to test TLS, you can use the sample test certificates
# supplied with Radiator. For production, you WILL need to install a
# real valid server certificate and key for Radiator to use.
#
# We suggest you start simple, prove to yourself that it works and
# then develop a more complicated configuration.
#
# See radius.cfg for more complete examples of features and syntax,
# and refer to the reference manual for a complete description of all
# the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: diameter-authby.cfg,v 1.6 2014/11/27 20:57:06 hvn Exp $

Foreground
LogStdout
LogDir .
DbDir  .

# User a lower trace level in production systems:
Trace 4

# For testing: this allows us to honour requests from on the same host.
<Client DEFAULT>
	Secret mysecret
</Client>

<Handler>
	<AuthBy DIAMETER>
		# Currently only one DIAMETER peer is supported for AuthBy
		Peer 127.0.0.1

		# This is the name or number of the Diameter peer TCP
		# or SCTP port to connect to. Defaults to the IANA
		# official Diameter port 3868
		#Port 9048

		# OriginHost and OriginRealm are required. If
		# DestinationHost is unset, no Destination-Host
		# attribute is added. If DestinationRealm is unset,
		# the realm is deduced from RADIUS User-Name or left
		# empty if there is no realm part in the User-Name.
		OriginHost bravo.open.com.au
		OriginRealm open.com.au
		#DestinationHost aaa.example.com
		#DestinationRealm example.com

		# SupportedVendorIds is a list of Supported Vendor Ids announced in the Diameter CER.
		# There is no default and no Supported-Vendor-Id is announced by default.
		# Keyword 'DictVendors' is an alias for all vendors in the all loaded
		# dictionaries and the dictionary file configured with
		# DiameterDictionaryFile
		#SupportedVendorIds 10415
		
		# AuthApplicationIds is a list of Auth-Application-Id
		# attributes announced in the Diameter CER.  Defaults to '0,
		# 1, 5' (DIAMETER BASE, NASREQ and Diameter-EAP).
		#AuthApplicationIds 0, 1

		# AcctApplicationIds is a list of Acct Application Ids announced in the Diameter CER.
		# Defaults to '3' (BASE_ACCOUNTING)
		#AcctApplicationIds 3

		# This optional parameter allows you to define a Perl
		# function that will be called during packet
		# processing. PostDiaToRadiusConversionHook is called
		# after an incoming Diameter message has been
		# converted to its equivalent RADIUS message, allowing
		# you to alter or add to attribute conversions etc. It
		# is passed references to the incoming Diameter request
		# and the converted RADIUS request.
		#PostDiaToRadiusConversionHook sub { my $d = ${$_[0]}; my $p = ${$_[1]}; main::log($main::LOG_DEBUG, "here in PostDiaToRadiusConversionHook"); $p->{rp}->add_attr('Reply-Message', 'Msg from PostDiaToRadius');}

		# This optional parameter allows you to define a Perl
		# function that will be called during packet
		# processing. PostRadiusToDiaConversionHook is called
		# after an RADIUS message has been converted to its
		# equivalent Diameter reply, prior to being sent back
		# to the Diameter client. It is passed references to
		# the RADIUS reply and the converted Diameter reply.
		#PostRadiusToDiaConversionHook sub { my $p = ${$_[0]}; my $d = ${$_[1]}; main::log($main::LOG_DEBUG, "here in PostRadiusToDiaConversionHook"); $d->add_attr(0, 9048, $Radius::DiaAttrList::AFLAG_VENDOR, 'OSC-AVPAIR from PostRadiusToDia');}

		# You can specify which protocol to use. Options are
		# 'tcp' or 'sctp'. Defaults to 'tcp'. This must agree
		# with what is configured into the Diameter
		# server. SCTP is not supported by all platforms.
		#Protocol sctp

		# When Protocol is 'sctp', you can specify the SCTP
		# peers with SCTPPeer option. When one or more
		# SCTPPeer is defined, SCTP association attempt is
		# made to each peer in the listed order. Currently
		# ReconnectTimeout option value is used to cancel
		# current association attempt and switch to the next
		# SCTPPeer. In the future SCTP API calls may be used.
		# When SCTPPeer is defined with Protocol 'sctp', Host
		# option is ignored. Formatting characters are allowed
		#SCTPPeer 172.16.88.35
		#SCTPPeer sctp2.example.com
		#SCTPPeer 172.16.99.22

		# This optional parameter specifies the number of
 		# seconds to wait before canceling a connection
 		# attempt or attempting to reconnect a failed, dropped
 		# or disconnected Diameter connection.  Defaults to 5
 		# seconds.
		#ReconnectTimeout 2

		# You can enable TLS for encryption and mutual
		# authentication. AuthBy DIAMETER will act as a TLS
		# client, and will attempt a TLS handshake with the
		# DIAMETER server which acts as a TLS server.  This
		# also provides mutual authentication between the
		# DIAMETER client and DIAMETER server. Requires
		# Net-SSLeay
		#UseTLS
		#TLS_CAFile ./certificates/demoCA/cacert.pem
		#TLS_CertificateFile ./certificates/cert-clt.pem
		#TLS_CertificateType PEM
		#TLS_PrivateKeyFile ./certificates/cert-clt.pem
		#TLS_PrivateKeyPassword whatever

		# By default the server certificate is verified by
		# comparing the certificate CNs and DNS type
		# subjectAltNames against the server's Host name as
		# configured above. If these fail, you can specify a
		# pattern to match agains the certificate Subject In
		# any case, the certificate must still be verified
		# againt the issuers root certificate.
		#TLS_ExpectedPeerName CN=test.server.some.company.com

		# Alternatively, you can verify the certificate based on a
		# regexp pattern match against a SubjectAltNAme of type URI:
		#TLS_SubjectAltNameURI .*open.com.au

		# You can require that the peer matches one of a
		# specified set of signatures with
		# TLS_CertificateFingerprint.  When a TLS peer
		# presents a certificate, this optional parameter
		# specifies one or more fingerprints, one of which
		# must match the fingerprint of the peer
		# certificate. Format is algorithm:fingerprint.
		# Requires Net::SSLeay 1.37 or later
		#TLS_CertificateFingerprint sha-1:A2:6F:15:F5:8D:94:B3:22:B0:66:44:D8:F1:00:CD:5D:B8:D5:34:BC
		#TLS_CertificateFingerprint sha-256:A0:19:4F:A5:68:DC:3B:A6:7A:23:42:54:8A:21:9D:27:A6:69:34:6D:03:64:2B:76:8E:9D:2F:09:0C:A3:B0:49
		#TLS_CertificateFingerprint md5:71:31:BC:57:F6:9F:A1:AF:1C:EE:3A:51:05:0C:30:E3

		# If TLS_CRLCheck is set then Radiator will look for a
		# certificate revocation list (CRL) for the certificate
		# issuer when authenticating each client.
		# If a CRL file is not found, or if the CRL says the
		# certificate has neen revoked, the authentication will
		# fail with an error:
		#   SSL3_GET_CLIENT_CERTIFICATE:no certificate returned
		# One or more CRLs can be named with multiple TLS_CRLFile
		# parameters.
		# Alternatively, CRLs may follow a file naming convention:
		#  the hash of the issuer subject name
		# and a suffix that depends on the serial number.
		# eg ab1331b2.r0, ab1331b2.r1 etc.
		# You can find out the hash of the issuer name in a CRL with
		#  openssl crl -in crl.pem -hash -noout
		# CRLs with tis name convention
		# will be searched in TLS_CAPath, else in the openssl
		# certificates directory typically /usr/local/openssl/certs/
		# CRLs are expected to be in PEM format.
		# A CRL files can be generated with openssl like this:
		#  openssl ca -gencrl -revoke cert-clt.pem
		#  openssl ca -gencrl -out crl.pem
		# Use of these flags requires Net_SSLeay-1.21 or later
		# Each TLS_CRLFile will be reloaded and reread at the start
		# of each new Diameter session if the file has changed since
		# the last session. TLS_CRLFile can include operating system
		# wildcards to refer to multiple CRLS
		#TLS_CRLCheck
		#TLS_CRLFile %D/certificates/revocations.pem
		#TLS_CRLFile %D/certificates/revocations2.pem
		#TLS_CRLFile %D/crls/*.r0

		# You can control the address and optionally the port
		# number to use for the client source port, although
		# this is not usually necessary. LocalPort can be a
		# port number or name. If not specified, a port number
		# will be allocated in the usual way.
		#LocalAddress 203.63.154.29
		#LocalPort 12345
	</AuthBy>
</Handler>
