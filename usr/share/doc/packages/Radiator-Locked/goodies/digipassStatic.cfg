# digipassStatic.cfg
#
# Example Radiator configuration file.
#
# Simple config file, which shows how split the incoming password between 
# 2 different authentication systems.
# IN this case, the users password is mad up of both a Digipass tokencode of 6 chars, followed by
# the users static password for an LDAP database.
# This example first adjusts the password so AuthBy DIGIPASS only sees the first 6 chars, and 
# the final AuthBy only sees the chars after the 6th.
#
# You should consider this file to be a starting point only
# $Id: digipassStatic.cfg,v 1.1 2007/08/06 10:02:58 mikem Exp $

Foreground
LogStdout
LogDir          .
DbDir           .
# User a lower trace level in production systems:
Trace           4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
        Secret  mysecret
        DupInterval 0
</Client>

<Realm DEFAULT>
        AuthByPolicy ContinueWhileAccept
        
        # Here we adjust the decoded password so AuthBy DIGIPASS only sees the first 6 
        # chars, which are expected to be the Digipass tokencode.
        <AuthBy INTERNAL>
               DefaultResult    ACCEPT
               AuthHook sub { $_[0]->{DecodedPassword} = substr($_[0]->decodedPassword(), 0, 6);\
                        return ($main::ACCEPT);}
        </AuthBy>

        <AuthBy DIGIPASS>
                # Adjust DBSource, DBUsername, DBAuth to suit your DB
                DBSource        dbi:mysql:radius
                DBUsername      mikem
                DBAuth          fred
        
                # Select which EAP type(s) you are willing to support   
                EAPType One-Time-Password

        </AuthBy>

        # Now we readjust the decoded password so the final AuthBy only sees the characters after the 6th
        # char of the original password
       <AuthBy INTERNAL>
               DefaultResult    ACCEPT
               AuthHook sub { $_[0]->{DecodedPassword} = undef; \
                        $_[0]->{DecodedPassword} = substr($_[0]->decodedPassword(), 6);\
                        return ($main::ACCEPT);}
       </AuthBy>

       # Now AuthBy FILE only sees the characters after the first 6 as the submitted password.
       # You can use almost any AuthBy here, and it will still see only the
       # chars after the 6th
       <AuthBy FILE>
               Filename %D/users
       </AuthBy>
      
</Realm>