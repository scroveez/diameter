# otp.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with 
# AuthBy OTP One-Time-Password authenticaiton..
#
# AuthBy OTP is a generic, configurable system for generating, delivering and checking
# one-time-passwords. It works with ordinary dialup PPP, EAP-OTP and EAP-GTC.
# It can work by pronpting the user, or by delivering the OTP to the user 
# through an external channel (not provided).
#
# We suggest you start simple, prove to yourself that it
# works and then develop a more complicated configuration.
#
# This example will generate a OTP, call an external program to deliver the
# OTP to the user (just prints it out in this example) then autnenticates the password.
# The correct OTP is cached in Radiator memory
#
# And it will print out what its doing in great detail.
#
# You can test stndard Radius PPP auth with:
#  radpwtst -noacct -interactive -password ''
# You can test EAP-OTP auth with
#  radpwtst -noacct -eapotp
# You can test EAP-GTC auth (with EAPType set to Generic-Token) with
#  radpwtst -noacct -eapgtc
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: otp.cfg,v 1.2 2007/12/18 21:23:50 mikem Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
	DupInterval 0
</Client>

<Realm DEFAULT>
	<AuthBy OTP>
		# AuthBy OTP supports EAP-OTP, EAP-GTC and ordinary Radius PPP
		EAPType One-Time-Password,Generic-Token
#		EAPType Generic-Token,One-Time-Password

		# You can specify a pattern for automatically generated one-time-passwords
		# The following special letters apply:
		#  a lowercase alphanumeric (abcdefghijklmnopqrstuvwxyz0123456789)
		#  A uppercase alphanumeric (ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789)
		#  c lowercase consonant (bcdfghjklmnpqrstvwxyz)
		#  C uppercase consonant (BCDFGHJKLMNPQRSTVWXYZ)
		#  v lowercase vowel (aeiou)
		#  V uppercase vowel (AEIOU)
		#  9 numeric (0123456789)
		#  anything else is used literally
		# The default is cvcvcvc99 which produces passwords like:
		# vosuyic04
		# rezeqek86
		# jocupon50
		#  etc
#		PasswordPattern AaAaAa

		# You can specify your own ChallengeHook
		# ChallengeHook is expected to generate a OTP if necessary
		# save the OTP if necessary (in $context is sometimes convenient)
		# and send the OTP to the user by a back channnel if necessary.
		# It should return a challenge string that will be presented to the
		# user by the client, informing them of how to get or
		# generate their password.
		# It is passed args
		#  ref to the current AuthBy module object
		#  user name
		#  current Radius request packet
		#  a user context that will be available later in VerifyHook
		# The default ChallengeHook generates a random password according
		# to PasswordPattern, saves it in the context  and returns it
		# This example shows how to generate a random password and pass it to an external 
		# program which must deliver it to the user through some back channel like SMS
#		ChallengeHook sub {my ($self, $user, $p, $context) = @_;\
#			$context->{otp_password} = $self->generate_password();\
#			system('/bin/echo', "in sample ChallengeHook for", $user, "password is", $context->{otp_password});\
#			return "Your OTP password has been printed by Radiator on STDOUT";}

		# You can specify your own VerifyHook
		# VerifyHook is expected to validate a OTP and return 1 on success
		# It is passed args
		#  ref to the current AuthBy module object
		#  user name
		#  the submitted OTP password in plaintext
		#  current Radius request packet
		#  a user context that will be available later in VerifyHook
		# The default compares the submitted password to the otp_password
		# in the context.
		# This example only accepts the password 'xyzzy'
#		VerifyHook sub {my ($self, $user, $submitted_pw, $p, $context) = @_;\
#			return $context->{otp_password} eq 'xyzzy';}
	</AuthBy>
</Realm>

