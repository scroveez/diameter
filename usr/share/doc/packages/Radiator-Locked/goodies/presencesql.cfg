# presencesql.cfg
#
# Example Radiator configuration file that allows you to
# authenticate from an SQL database, and also get presence data
# using special request with Service-Type=Call-Check-User
#
# See the reference manual for more details.
# This is a very simple exmaple to get you started. It will
# work with the tables created by the goodies/*.sql scripts.
# You can create a test table, test user and mysql user with the following
# commands:
#mysql <<EOF
#CREATE DATABASE radius;
#GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX,LOCK TABLES,CREATE TEMPORARY TABLES ON radius.* TO mikem@localhost IDENTIFIED BY 'fred';
#EOF
#mysql -umikem -pfred radius <goodies/mysqlCreate.sql  
#
# You can test with 
#radpwtst -noacct -user 'mikem' -service_type Call-Check-User
# which will return an Access-Accept with attributes set according
# to where we last heard of that user
#
# You should consider this file to be a starting point only
# $Id: presencesql.cfg,v 1.2 2007/12/18 21:23:50 mikem Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
Trace		4

# You will probably want to change this to suit your site.
<Client DEFAULT>
	Secret	mysecret
	DupInterval 0
</Client>

# This will authenticate users from SUBSCRIBERS
<Realm DEFAULT>
    # PRESENCESQL will IGNORE if its not a presence request
    # with Service-Type=Call-Check-User
    AuthByPolicy ContinueWhileIgnore
    <AuthBy PRESENCESQL>
	# USual stuff to tell us where the database is
	DBSource	dbi:mysql:radius
	DBUsername	mikem
	DBAuth		fred
    
	# You can customise PresenceSelect, which is the SQL query
	# that looks for accounting starts and stops for a given user
	# it is expected to return 
	#  timestamp, statustype, locationname
	# in descending timestamp order.
	# timestamp is unix epoch time
	# statustype is 'Start', 'Stop'
	# locationname a access point name. Could be
	# NASIDENTIFER, CALLEDSTATIONID, or whatever makes sense in your
	# accounting database. 
	# Subject to mapping via MapLocation. You may want to use a join to
	# map the AP into a string using the database directly instead of
	# using MapLocation. 
	# PresenceSelect select TIME_STAMP, ACCTSTATUSTYPE, NASIDENTIFIER from ACCOUNTING where USERNAME=%0 order by TIME_STAMP desc

	# You can map whatever is in the 3rd field into a string.
	# locationname is typically NASIDENTIFIER or CALLEDSTATIONID, an
	# indication of the unique specific device where the user connected
	# If you have several APs at one physical location, you may want to map
	# them all to one canonical location name, or you may just want to
	# give sensible names to specific devices for the benefit of the
	# client who is asking for the presence info
	# MapLocation nasidentifier1,Marketing
	# MapLocation nasidentifier2,Marketing
	# MapLocation nasidentifier3,Production
	# MapLocation nasidentifier4,Production
	# MapLocation nasidentifier5,Engineering
	# MapLocation nasidentifier6,Management Wing

	MapLocation id1,Mapped Location name 1
	MapLocation id2,Mapped Location name 2
	MapLocation id3,Mapped Location name 3
    </AuthBy>

    # Not a presence request, handle normally
    <AuthBy SQL>
	# Adjust DBSource, DBUsername, DBAuth to suit your DB

	DBSource	dbi:mysql:radius
	DBUsername	mikem
	DBAuth		fred

	# You may want to tailor these for your ACCOUNTING table
	# You can add your own columns to store whatever you like
	AccountingTable	ACCOUNTING
	AcctColumnDef	USERNAME,User-Name
	AcctColumnDef	TIME_STAMP,Timestamp,integer
	AcctColumnDef	ACCTSTATUSTYPE,Acct-Status-Type
	AcctColumnDef	ACCTDELAYTIME,Acct-Delay-Time,integer
	AcctColumnDef	ACCTINPUTOCTETS,Acct-Input-Octets,integer
	AcctColumnDef	ACCTOUTPUTOCTETS,Acct-Output-Octets,integer
	AcctColumnDef	ACCTSESSIONID,Acct-Session-Id
	AcctColumnDef	ACCTSESSIONTIME,Acct-Session-Time,integer
	AcctColumnDef	ACCTTERMINATECAUSE,Acct-Terminate-Cause
	AcctColumnDef	NASIDENTIFIER,NAS-Identifier
	AcctColumnDef	NASPORT,NAS-Port,integer
	AcctColumnDef	FRAMEDIPADDRESS,Framed-IP-Address

	# You can arrange to log accounting to a file if the
	# SQL insert fails with AcctFailedLogFileName
	# That way you could recover from a broken SQL
	# server
	#AcctFailedLogFileName %D/missedaccounting

	# Alternatively, you can arrange to save failed SQL accounting insert queries to a text
	# file with SQLRecoveryFile
	SQLRecoveryFile %D/missedaccounting

	# You can run a hook whenever Radiator (re)connects to the database. This
	# can be useful for doing database-specific config or setup
	# The hook is called like hook($object, $handle)
	# $object is the SqlDb object that is doing the connecting,
	# and $handle is the database handle if the newly connected database
	# This example shows how to set some connection specific attributes
	# for Interbase
	#ConnectionHook sub {$_[1]->func(-access_mode => 'read_write',\
        #	-isolation_level => 'read_committed',\
        #	-lock_resolution => 'wait',\
        #	'ib_set_tx_param')}

    </AuthBy>
</Realm>
