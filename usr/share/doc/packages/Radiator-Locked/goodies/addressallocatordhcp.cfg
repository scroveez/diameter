# addressallocatordhcp.cfg
#
# Example Radiator configuration file showing how to
# do dynamic address allocation using DHCP
# Radiator must be run as root, and there cannot be a DHCP or bootp
# server running on the same host.
#
#
# Using with FarmSize:
#
# When configured with FarmSize, you must enable
# UseClassForAllocationInfo configuration parameter. With this
# parameter the information required for DHCP release is shared
# between the farm workers with the Class attribute. You should also
# consider enabling ClientHardwareAddress option so that the DHCP
# request chaddr value is not based on the xid value that is internal
# to each worker.
#
# Note: your RADIUS clients must support Class attribute which should
# not be a problem with modern RADIUS implementations.
#
# LocalAddress can be configured like this: LocalAddress 10.1.2.%O
# When FarmSize is set to 3, the above will cause the workers to bind
# 10.1.2.1, 10.1.2.2, and 10.1.2.3. Because each instance has its own
# address they can each bind to the same LocalPort. This allows using
# for example, ISC DHCP which always uses its own listen port number
# as the reply's destination port number.
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# You should consider this file to be a starting point only

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to change this to suit your site.
<Client DEFAULT>
	Secret	mysecret
</Client>

<AddressAllocator DHCP>
	# This name allows us to refer to it 
	# from inside an AuthBy DYNADDRESS
	Identifier dhcpallocator

	# This is the target DHCP server and its listen port.
	# Defaults to 255.255.255.255 (broadcast) and 67
	#Host 10.1.1.5
	#Port 1067

	# This is the local address
	# Defaults to the address returned
	# by gethostbyname(hostname()).
	#LocalAddress 10.1.1.1

	# LocalPort defaults to 67. This is the UDP source port for
	# the requests sent to the target DHCP server.
	#LocalPort 1067

	# This is the attribute to use for the DHCP
	# server Client-Identifier field
	# Defaults to %{User-Name}
	#DHCPClientIdentifier %{User-Name}

	# If SessionTimeout is set by a previous AuthBy
	# then that is used as the expiry time. Otherwise
	# DefaultLease (in seconds) is used.
	# Defaults to 1 day
	#DefaultLease	86400

	# The DHCP standard specifies a retry algorithm
	# based on three values, minimum, maximum and factor.
	# The first timeout value is the minimum, and subsequent
	# values are calculated such that:
	# timeout = minimum, timeout = timeout * factor, timeout <= maximum
	# values default to 2, 16, 2
	#TimeoutMinimum 2
	#TimeoutMaximum 16
	#TimeoutFactor 2

	# Subnet Selection Option
	# Now defined in RFC 3011 to be 118.
	# Earlier versions of the ISC DHCP server
	# used the unofficial option 211.
	#SubnetSelectionOption 118
	SubnetSelectionOption 211

	# Use Class attribute to store information about allocation
	# See comments above for additional notes.
	#UseClassForAllocationInfo

	# This says to operate synchronously with the DHCP server
	#Synchronous

	# ClientHardwareAddress is an attribute in the incoming 
	# address which contains the hex encoded 
	# MAC address of the client. If present, it will be used as CHADDR in the DHCP request. 
	# If not present, and fake CHADDR based on the request XID will be used. 
	# The DHCP server may use this when allocating an address for the client.
	# The MAC address can contain extraneous characters such as . or : as long as it 
	# contains the 12 hex characters (case insensitive) of the MAC address.
	# Special characters are permitted
	#ClientHardwareAddress %{Unisphere-Dhcp-Mac-Addr}
</AddressAllocator>

<Realm DEFAULT>
	AuthByPolicy ContinueWhileAccept

	<AuthBy FILE>
		# The file can contain entries like:
		#u1	Password=x
		#	PoolHint = 10.2.2.2
		#u2	Password=x
		#	PoolHint = 10.2.2.2,
		#	Session-Timeout=1000

		Filename ./users
	</AuthBy>

	# AuthBy DYNADDRESS needs to be the last AuthBy. If
	# all the previous ones have succeeded, then an address
	# is allocated
	<AuthBy DYNADDRESS>
		# This refers to the AddressAllocator
		# defined above. It says to use that allocator
		# to get an address. Instead of this, you can
		# put the <AddressAllocator xxx> clause directly
		# in here
		AddressAllocator dhcpallocator

		# This specifies how to form the pool hint, that
		# the allocator uses to specifiy which pool
		# to allocate an address from. The default
		# is %{Reply:PoolHint}, ie a pseudo
		# attribute in the current reply,
		# presumably set by an earlier
		# AuthBy, but it could be for example
		# the NAS IP address or similar, or a hardwired
		# string.
		#PoolHint %{Reply:PoolHint}

		# These parameters tell us how to set reply
		# attribtues from the result of the allocation.
		# The left hand side of each pair is
		# the "name" of the data item. The right hand
		# side is the Radius attribute name to use
		# in the reply. The valid data item names are:
		# yiaddr - The allocated address
		# subnetmask - The subnet mask to use
		# dnsserver - the IP address of the DNS server
		# serveridentifier - the identifier (IP address) 
		#			of the DHCP server
		# The default mappings are:
		#MapAttribute	yiaddr, Framed-IP-Address
		#MapAttribute	subnetmask, Framed-IP-Netmask

		# The AuthBy FILE above sets the pseudo reply attribute
		# PoolHint as the clue to the address allocator
		# need to strip it out at the end of processing
		StripFromReply PoolHint

	</AuthBy>

</Realm>

