# eapbalance.cfg
#
# Example Radiator configuration file.
# This shows how to set up a server farm that will distribute requests among 
# multiple back ends, and will also ensure that EAP conversations always go to the same 
# backend that handled the first request in the conversation.
# Suitable for use in a server farm.
#
# Author mikem@open.com.au
# $Id: eapbalance.cfg,v 1.2 2009/04/29 00:16:07 mikem Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# This tells Radiator to run as a server farm of FarmSize instances.
# Each instance will listen on all incoming request sockets, and 
# incoming requests will be distributed by the operating system in 
# round-robin fashion. This allows you to run several identical instances of 
# Radiator as a server farm on a multicore machine.
# This is not useful unless you have a multicore or multiprocessor machine where
# each fork runs on a separate CPU.
# The default of 0 means just run one instance as per usual.
# Unix only
#FarmSize %{GlobalVar:farm_size}
FarmSize 3

# You can have a separate log file for each server farm instance by using the %O 
# special character which is translated into the farm instance number 
# (defaults to 0 for the main parent instance)
LogFile %D/logfile-farm-instance-%O

# You will probably want to change this to suit your site.
<Client DEFAULT>
	Secret	mysecret
	DupInterval 0
</Client>

# EAPBALANCE distributes EAP conversations among multiple back ends
# and ensures that a given conversation always goes to the same backend that
# handled the fisrts request in the conversation
<Realm DEFAULT>
	<AuthBy EAPBALANCE>
		# You can optionally set a backoff time. The default of
		# 0 means that it will always try the preferred host
		# for every request 
		FailureBackoffTime 60

		# The default values for the Hosts clauses
		# below come from the attributes of the same name
		# here. You can override them in the Host clause
		Secret mysecret
		RetryTimeout 1
		Retries 0

		# Caution: the server farm proxies requests to the backends from
		# different ports and with potentially different IDS. This can cause
		# problems with duplicate detection in the backends unless the backend
		# Clients have UseContentsForDuplicateDetection set
		<Host 203.63.154.29>
		      AuthPort 9000
		      AcctPort 9001
		</Host>
		<Host 203.63.154.29>
		      AuthPort 9002
		      AcctPort 9003
		</Host>
	</AuthBy>
</Realm>
