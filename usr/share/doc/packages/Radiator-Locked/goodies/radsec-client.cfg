# radsec-client.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with proxying
# from one Radiator to another using AuthBy RADSEC (RFC 6614) This
# file shows how to implement the client end of an AuthBy RADSEC
# connection, which will proxy all requests to the remote radius
# server by a TCP connection
# See also radsec-server.cfg
#
# We suggest you start simple, prove to yourself that it
# works and then develop a more complicated configuration.
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: radsec-client.cfg,v 1.24 2014/11/22 01:30:09 hvn Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
</Client>

<Handler>
	<AuthBy RADSEC>
		# Specifies the name or address of one ServerRADSEC
		# host to connect to Alternatively, you can use one or
		# more <Host hostname> clauses. See below for examples
		# of the Host clause
#		Host localhost

		# Specifies which TCP (or SCTP) port to connect to on
		# Host. Defaults to the IANA official RadSec port 2083
		#Port 9048

		# If RadSec connection to Host fails or gets
		# diconnected, try to reconnect every ReconnectTimeout
		# seconds. 0 means aggressive continuous
		# reconnects. Defaults to 5 seconds.
		#ReconnectTimeout 1

		# You can specify which protocol to use. Options are
		# 'tcp' or 'sctp'. Defaults to 'tcp'. This must agree
		# with what is configured into the ServerRADSEC
		# we connect to. SCTP is not supported by all platforms.
#		Protocol sctp

		# If a request is forwarded to the remote
		# ServerRADSEC, but no reply is received within this
		# number of seconds, the NoReplyHook will be called
		# for each unreplied request
		NoreplyTimeout 5

		# KeepaliveTimeout specifies the maximum time in
		# seconds that a RadSec connection can be idle before
		# a Status-Server request is sent to keep the TCP
		# connection alive.  This helps to keep TCP
		# connections open in the face of "smart" firewalls
		# that might try to close idle connections down.
		# Defaults to 120 seconds (2 minutes). If set to 0,
		# keepalives are not used.
		#KeepaliveTimeout 120

		# If this flag is enabled, use only Status-Server
		# requests (if any) to monitor the next hop for
		# failures.  Uses NoreplyTimeout, MaxFailedRequests,
		# MaxFailedGraceTime, FailureBackoffTime during
		# failure detection.
		# When enabled, you should also ensure
		# KeepaliveTimeout is set to a sensible value to
		# balance between detecting failures early and causing
		# load on the target server.
		#UseStatusServerForFailureDetect

		# You can control the address and optionally the port
		# number to use for the client source port, although
		# this is not usually necessary. LocalPort can be a
		# port number or name. If not specified, a port number
		# wil be allocated in the usual way.
		#LocalAddress 203.63.154.29
		#LocalPort 12345

		# Enable TLS on this connection for encryption and
		# mutual authentication. This AuthBy RADSEC will act
		# as a TLS client, and will attempt a TLS handshake
		# with the ServerRADSEC which acts as a TLS server. If
		# the handshake is successful, all traffic will be
		# encrypted with TLS This also provides mutual
		# authentication between the AuthRADSEC client and
		# ServerRADSEC server.
		# Requires Net_SSLeay and openssl
		# NOTE: UseTLS is enabled by default.
		UseTLS
		TLS_CAFile ./certificates/demoCA/cacert.pem

		# If you do not define TLS_CertificateFile and
		# TLS_PrivateKeyFile, the client will not present a
		# certificate, and the server cannot authenticate the
		# client. If the server has TLS_RequireClientCert set,
		# then the TLS handshake will fail. The certificate
		# Common Name (CN) must be the same as the client's
		# hostname (as resolved from the clients IP address)
		# This sample client certificate has a CN of
		# 'testUser' and therefore can not be used for client
		# authentication.
		TLS_CertificateFile ./certificates/cert-clt.pem
		TLS_CertificateType PEM
		TLS_PrivateKeyFile ./certificates/cert-clt.pem
		TLS_PrivateKeyPassword whatever

		# By default the server certificate is verified by
		# comparing the certificate CNs and DNS type
		# subjectAltNames against the server's Host name as
		# configured above. If these fail, you can specify a
		# pattern to match agains the certificate Subject In
		# any case, the certificate must still be verified
		# againt the issuers root certificate.
		#TLS_ExpectedPeerName CN=.*\.eduroam\.org
		TLS_ExpectedPeerName CN=test.server.some.company.com

		# Alternatively, you can verify the certificate based on a
		# regexp pattern match against a SubjectAltNAme of type URI:
		#TLS_SubjectAltNameURI .*open.com.au

		# You can require that the peer matches one of a
		# specified set of signatures with
		# TLS_CertificateFingerprint.  When a TLS peer
		# presents a certificate, this optional parameter
		# specifies one or more fingerprints, one of which
		# must match the fingerprint of the peer
		# certificate. Format is algorithm:fingerprint.
		# Requires Net::SSLeay 1.37 or later
		#TLS_CertificateFingerprint sha-1:8E:94:50:0E:2F:D6:DE:16:1D:84:76:FE:2F:14:33:2D:AC:57:04:FF
		#TLS_CertificateFingerprint sha-1:E1:2D:53:2B:7C:6B:8A:29:A2:76:C8:64:36:0B:08:4B:7A:F1:9E:9D
		#TLS_CertificateFingerprint sha-256:EC:14:77:FA:33:AD:2C:20:FF:D2:C8:1C:46:31:73:04:28:9E:ED:12:D7:8E:79:A0:24:C0:DE:0B:88:A9:DB:3C
		#TLS_CertificateFingerprint md5:2A:2D:F1:44:40:81:22:D4:60:6D:9A:B0:F4:BF:DD:24

		# The ConnectOnDemand flag parameter tells AuthBy
		# RADSEC to only attempt a connection to the target
		# RadSec server when the first packet is required to
		# be sent to it. Otherwise it will attempt to make the
		# connection at startup time and try to maintain the
		# connection forever.
		#ConnectOnDemand

		# If TLS_CRLCheck is set then Radiator will look for a
		# certificate revocation list (CRL) for the
		# certificate issuer when authenticating the
		# server. If a CRL file is not found, or if the CRL
		# says the certificate has been revoked, the
		# authentication will fail with an error:
		#   SSL3_GET_CLIENT_CERTIFICATE:no certificate returned
		# One or more CRLs can be named with multiple
		# TLS_CRLFile parameters. Alternatively, CRLs may
		# follow a file naming convention: the hash of the
		# issuer subject name and a suffix that depends on the
		# serial number. For example, ab1331b2.r0, ab1331b2.r1

		# You can find out the hash of the issuer name in a CRL with
		#  openssl crl -in crl.pem -hash -noout

		# CRLs with this name convention will be searched
		# first from TLS_CAPath, then from the openssl
		# certificates directory typically
		# /usr/local/openssl/certs/. CRLs are expected to be
		# in PEM format.
		# CRL files can be generated with openssl like this:
		#  openssl ca -gencrl -revoke cert-clt.pem
		#  openssl ca -gencrl -out crl.pem
		# Use of these flags requires Net_SSLeay-1.21 or later
		# Each TLS_CRLFile will be reloaded and reread at the
		# start of each new RadSec session if the file has
		# changed since the last session.  TLS_CRLFile can
		# include operating system wildcards to refer to
		# multiple CRLS
#		TLS_CRLCheck
#		TLS_CRLFile %D/certificates/revocations.pem
#		TLS_CRLFile %D/certificates/revocations2.pem
#		TLS_CRLFile %D/crls/*.r0

		# TLS_PolicyOID enables certificate policy checking
		# and specifies one or more policy OIDs that must be
		# present in the certificate path. It sets the
		# 'require explicit policy' flag as defined in
		# RFC3280. Requires Net-SSLeay 1.37 or later
		#TLS_PolicyOID 2.5.29.32.0

		# You can enable automatic host failure detection and
		# skip sending to a host for a period of time by
		# defining these parameters. If more than
		# MaxFailedRequests receive no reply over a period of
		# less than MaxFailedGraceTime seconds, then the host
		# and its downstream hosts will be regarded as dead
		# until FailureBackoffTime seconds have elapsed. Then
		# the Host will be tried again
		# If FailureBackoffTime is not defined, AuthBy RADSEC
		# will always try first to send a request to the first
		# host named, then the second etc. See also
		# UseStatusServerForFailureDetect
#		FailureBackoffTime 10
#		MaxFailedRequests 2
#		MaxFailedGraceTime 10
#		NoReplyHook sub {print "***** in no reply hook\n";}

		# You can specify one or more hosts to connect
                # to. AuthBy RADSEC will attempt to connect to the
                # first one listed, and if no reply is received within
                # NoreplyTimeout seconds, it will attempt to send to
                # the next one etc.

		# Host clause can include values for: Secret Port
		# NoreplyTimeout KeepaliveTimeout FailureBackoffTime
		# MaxBufferSize ReconnectTimeout ConnectOnDemand
		# Protocol UseTLS TLS_CAFile TLS_CAPath
		# TLS_CertificateFile TLS_CertificateType
		# TLS_PrivateKeyFile TLS_PrivateKeyPassword
		# TLS_RandomFile TLS_DHFile TLS_CRLCheck TLS_CRLFile
		# TLS_SessionResumption TLS_SessionResumptionLimit
		# TLS_ExpectedPeerName MaxFailedRequests
		# MaxFailedGraceTime. The values default to what is
		# defined in the enclosing AuthBy RADSEC. For this
		# reason it is recommended to have the Host clauses
		# near the end of AuthBy RADSEC.
		#
		# The name given in the clause header will be used as
		# the host name after special characters are
		# replaced. IPV4 and IPV6 name and addresses are
		# permitted. The default shared secret according to
		# RFC 6614 is 'radsec'
#		<Host localhost>
#		      Port 1000
#		      UseTLS 0
#		      Secret radsec
#		      FailureBackoffTime 100
#		      # You could put many other per-host parameters here
#		      # specific for this Host
#		      LocalAddress 203.63.154.29
#		      LocalPort 12345
#		</Host>
#		# IPv6 loopback address
#		<Host ::1>
#		      Port 2083
#		      UseTLS
#		      FailureBackoffTime 10
#		</Host>
		<Host 10.20.30.40>
		      Port 2083
		      UseTLS
		      FailureBackoffTime 10
		</Host>
#		<Host dell>
#		      UseTLS
#		      FailureBackoffTime 10
#		</Host>
	</AuthBy>
</Handler>
