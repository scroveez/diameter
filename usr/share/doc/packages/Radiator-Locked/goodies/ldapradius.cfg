# ldapadius.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with 
# a simple AuthBy LDAPRADIUS system.
#
# AuthBy LDAPRADIUS looks up a target radius server for every request in an
# LDAP database, then proxies to the target server. It uses the realm 
# as the default lookup into the database.
#
# It is useful for managing large numbers of downstream radius
# servers, where the proxy server details are in an LDAP database
#
#
# Requires a suitable schema table in an LDAAP databse. See goodies/radiator-ldap.schema for example
# schema and  goodies/radiator-ldap.ldif for an example realm definition for that schema
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# You should consider this file to be a starting point only
# Author: Mike McCauley (mikem@open.com.au)
# Copyright (C) 2001-2004 Open System Consultants
# $Id: ldapradius.cfg,v 1.3 2005/04/06 23:09:25 mikem Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
	DupInterval 0
</Client>

# Instead of hardwired clients above,
# You can put client details in an LDAP database table
# and get their details from there with something like this:
<ClientListLDAP>
	# Tell Radiator how to talk to the LDAP server
	Host		localhost

	# You will only need these if your LDAP server
	# requires authentication. These are the examples
	# in a default OpenLDAP installation
	# see /etc/openldap/slapd.conf
	AuthDN		cn=Manager, dc=example, dc=com
	AuthPassword	secret

	# This the top of the search tree where realm records
	# will be found. It should match the configuration
	# of your server, see /etc/openldap/slapd.conf
	BaseDN		dc=example, dc=com

	# You can control the LDAP protocol version to be used
	# to talk to the LDAP server. OpenLDAP 2 requires
	# Version 3 unless you have 'allow bind_v2' in your
	# slapd.conf. Defaults to version 2			
	Version 3

	# A number of other LDAP attributes, including SSL parameters, Timeout, FailureBackoffTime
	# Debug etc are also supported, see below.

	# SearchFilter specifies how to find the LDAP records that contain Client configuration information
	# The default is (objectclass=oscRadiusClient), which is compatible with the example
	# schema provided in goodies/radiator-ldap.schema. Special characters are supported.
	# This example finds oscRadiusClient LDAP objects, but only the ones for
	# a specific location
	#SearchFilter (&(objectclass=oscRadiusClient)(location=my_pop_1))

	# If RefreshPeriod is set to non-zero, it specifies the period in seconds that the client list will
	# be refreshed by rereading the database. Each RefreshPeriod,
	# any Clients previously created by this ClientList are cleared
	# and a new set of clients read from the database.
	# Clients defined in the configuration file will not be clobbered.
	# The same effect can be got by signalling the process with with SIGHUP
	#RefreshPeriod 600

	# ClientAttrDef parameters allow you to alter the set of LDAP attributes that will be fetched and how they
	# are mapped to Client clause parameters.
	# Format is 'ClientAttrDef ldapattrname,clientparamname'
	# If no ClientAttrDef lines are defined, defaults to the equivalent of the following,
	# which is compatible with the example schema provided in goodies/radiator-ldap.schema
	#ClientAttrDef oscRadiusClientName,Name
	#ClientAttrDef oscRadiusSecret,Secret
	#ClientAttrDef oscRadiusIgnoreAcctSignature,IgnoreAcctSignature
	#ClientAttrDef oscRadiusDupInterval,DupInterval
	#ClientAttrDef oscRadiusNasType,NasType
	#ClientAttrDef oscRadiusSNMPCommunity,SNMPCommunity
	#ClientAttrDef oscRadiusLivingstonOffs,LivingstonOffs
	#ClientAttrDef oscRadiusLivingstonHole,LivingstonHole
	#ClientAttrDef oscRadiusFramedGroupBaseAddress,FramedGroupBaseAddress
	#ClientAttrDef oscRadiusFramedGroupMaxPortsPerClassC,FramedGroupMaxPortsPerClassC
	#ClientAttrDef oscRadiusFramedGroupPortOffset,FramedGroupPortOffset
	#ClientAttrDef oscRadiusRewriteUsername,RewriteUsername
	#ClientAttrDef oscRadiusUseOldAscendPasswords,UseOldAscendPasswords
	#ClientAttrDef oscRadiusStatusServerShowClientDetails,StatusServerShowClientDetails
	#ClientAttrDef oscRadiusPreHandlerHook,PreHandlerHook
	#ClientAttrDef oscRadiusPacketTrace,PacketTrace
	#ClientAttrDef oscRadiusIdenticalClients,IdenticalClients
	#ClientAttrDef oscRadiusNoIgnoreDuplicates,NoIgnoreDuplicates
	#ClientAttrDef oscRadiusDefaultReply,DefaultReply
	#ClientAttrDef oscRadiusFramedGroup,FramedGroup
	#ClientAttrDef oscRadiusStripFromReply,StripFromReply
	#ClientAttrDef oscRadiusAllowInReply,AllowInReply
	#ClientAttrDef oscRadiusAddToReply,AddToReply
	#ClientAttrDef oscRadiusAddToReplyIfNotExist,AddToReplyIfNotExist
	#ClientAttrDef oscRadiusDynamicReply,DynamicReply
	#ClientAttrDef oscRadiusStripfromRequest,StripfromRequest
	#ClientAttrDef oscRadiusAddToRequest,AddToRequest
	#ClientAttrDef oscRadiusAddToRequestIfNotExist,AddToRequestIfNotExist
</ClientListLDAP>


<Realm DEFAULT>
    	# This uses the users realm to look up the target
	# radius server in an SQL database
	<AuthBy LDAPRADIUS>
		# Tell Radiator how to talk to the LDAP server
		Host		localhost

		# You will only need these if your LDAP server
		# requires authentication. These are the examples
		# in a default OpenLDAP installation
		# see /etc/openldap/slapd.conf
		AuthDN		cn=Manager, dc=example, dc=com
		AuthPassword	secret

		# This the top of the search tree where realm records
		# will be found. It should match the configuration
		# of your server, see /etc/openldap/slapd.conf
		BaseDN		dc=example, dc=com

		# You can enable debugging of the Net::LDAP
		# module with this:
		#Debug 255

		# With LDAP2, You can enable SSL or TLS with perl-ldap 0.22 and better
		# by setting UseSSL or UseTLS. Not supported on Windows
		#UseSSL
		# UseTLS
		# If you set UseSSL or UseTLS, also need to set these:
		#SSLCAClientCert certificates/cert-clt.pem
		#SSLCAClientKey whatever
		#  (certificates in PEM format)
		# Also need to set one of:
		#SSLCAFile certificates/demoCA/cacert.pem
		# SSLCAPath /path/to/file/containing/certificate/of/CA
		#  (certificates in PEM format)
		# These set the corresponding parameters in the 
		# LDAPS connection (see perl-ldap docs)
		# Requires IO::Socket::SSL, Net::SSLeay and openssl

		# You can control the timout for connection failure,
		# plus the backoff time after failure. Timout defaults
		# to 10 secs and FailureBackoffTime to 10 mins
		# Timeout 2
		# FailureBackoffTime 10

		# You can control the LDAP protocol version to be used
		# to talk to the LDAP server. OpenLDAP 2 requires
		# Version 3 unless you have 'allow bind_v2' in your
		# slapd.conf. Defaults to version 2			
		Version 3

		# NumHosts defines the maximum number of searches to be done for a given request
		# If this count is exceeded, or if the LDAP search results in no data, the request will be ignored.
		# Defaults to 1
		#NumHosts 2
		
		# SearchFilter specifies how the LDAP record containing the
		# desired remote server data is to be found
		# Defaults to (oscRadiusTarget=%R), which selects a record based on the
		# the users realm name, and which is compatible with the sample schema
		# in goodies/radiator-ldap.schema. %0 is replaced with the host counter, an integer
		# which starts at 1 and increases by one each time a search is made for a given request. 
		# This allows you to look up different records for consecutive host searches.
		# The following example looks up based
		# on the Called-Station-Id
		#SearchFilter (oscRadiusTarget=%{Called-Station-Id})	

		# HostAttrDef specifies which parameters to get from an LDAP record and 
		# how they are to be used to set the paramters of the Radiator Host clause
		# for proxying. Format is 'HostAttrDef ldapattrname,hostparamname'
		# ldapattrname may contain special charactears, and %0 is replaced by hostCounter, an integer
		# which starts at 1 and increases by one each time a search is made for a given request. 
		# You can use that mechanism to fetch different LDAP attributes for the primary, secondary etc
		# radius servers.
		# If no HostAttrDef lines are specified, defaults to the equivalent of:
		#HostAttrDef oscRadiusHost,Host
		#HostAttrDef oscRadiusSecret,Secret
		#HostAttrDef oscRadiusAuthPort,AuthPort
		#HostAttrDef oscRadiusAcctPort,AcctPort
		#HostAttrDef oscRadiusRetries,Retries
		#HostAttrDef oscRadiusRetryTimeout,RetryTimeout
		#HostAttrDef oscRadiusUseOldAscendPasswords,UseOldAscendPasswords
		#HostAttrDef oscRadiusServerHasBrokenPortNumbers,ServerHasBrokenPortNumbers
		#HostAttrDef oscRadiusServerHasBrokenAddresses,ServerHasBrokenAddresses
		#HostAttrDef oscRadiusIgnoreReplySignature,IgnoreReplySignature
		#HostAttrDef oscRadiusFailurePolicy,failurePolicy

		# You can define <Host> clauses here like in AuthBy RADIUS.
		# They will be used to proxy requests that do not
		# have no matching LDAP records
		# Use this mechanism to handle default realms.
		#<Host 1.2.3.4>
		#	Secret xxx
		#       ... etc ....
		#</Host>
	</AuthBy>
</Realm>

