# tacacsplusserver.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with TACACS+
# authentication, authorization and accounting.
#
# This example shows how to use the AuthorizeUser and AuthorizeGroup
# parameters which were introduced in Radiator 3.11+patches to replace
# the now deprected CommandAuth parameter. CommandAuth is still
# supported, but AuthorizeGroup are much more flexible.
#
# This example will listen for TACACS+ requests (on the standard port
# 49) authenticate from a standard users file in the current directory
# and log accounting to a file in the current directory.
#
# It will accept requests from any TACACS+ client and try to handle request
# for any realm.
# And it will print out what its doing in great detail.
#
# You can test this configuration with:
# This should succeed authentication and authorisation:
#  perl goodies/tacacsplustest -user tacuser1 -password tacuser1 -noacct -author_args service=shell,cmd=show,cmd-arg=xxx
# This should fail authentication:
#  perl goodies/tacacsplustest -user tacuser1 -password wrongpassword -noacct -author_args service=shell,cmd=show,cmd-arg=xxx
# This should fail authorisation due to authorisation denied
#  perl goodies/tacacsplustest -user tacuser1 -password tacuser1 -noacct -author_args service=shell,cmd=someforbiddencommand,cmd-arg=xxx
#
# See radius.cfg for more complete examples of features and syntax,
# and refer to the reference manual for a complete description of all
# the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: tacacsplusserver.cfg,v 1.21 2014/02/14 22:49:41 hvn Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# These next 2 lines stop Radiator listening for Radius requests.
# However, you can have Radiator handle both Radius and TACACS+ at the
# same time (listening on different ports, of course)
AuthPort
AcctPort

# Tacacs+ requests received from 1.2.3.4 will use this Client's
# TACACSPLUSKey, if its defined, else the Secret. If there is no
# matching Client clause, the Server TACACSPLUYSKey parameter will be
# used. This way, you can have any number of per-client Tacacs keys.
<Client 1.2.3.4>
	TACACSPLUSKey somekey
	# If TACACSPLUSKey is not defined, it will fall back to Secret:
	#Secret someotherkey

	# You can specify a default realm on a per-client basis
	#DefaultRealm myotherrealm.com
</Client>

# This clause tells Radiator to listen for and handle TACACS+ requests.
# Each incoming TACACS+ authentication request is converted into a Radius request that can
# be serviced locally or perhaps proxied to another Radius server.
# Any cisco-avpair reply items that result from the Radius authentication will be used for
# TACACS+ authorization.
<ServerTACACSPLUS>
	# This is the default shared secret that will be used for all TACACS+
	# connections to this server.
	# It will be used if a specific Client Secret or Client TACACSPLUSKey
	# is not found
	Key mysecret

	# You can control the port to listen on.
	# Defaults to 49, which generally requires root or other privileged access
	#Port 49

	# You can control the network interface(s) to listen on with
	# BindAddress.  You can specify multiple address separated by
	# commas. Defaults to the global BindAddress, which defaults
	# to 0.0.0.0 (all interfaces). IPv6 is also supported.
	#BindAddress ipv6:::
	#BindAddress 203.63.154.29, 127.0.0.1

	# AuthorizationReplace specifies a authorization
	# attribute-value pair that will REPLACE the default ones the
	# client want to use. You can have as many
	# AuthorizationReplace parameters as you want.
	#AuthorizationReplace service=aironet
	#AuthorizationReplace protocol=shell
	#AuthorizationReplace aironet:admin-capability=write+snmp+ident+firmware+admin

	# AuthorizationAdd ADDS a specific authorization
	# attribute-value pair to all Authorization RESPONSEs. You can
	# have as many AuthorizationAdd parameters as you want.
	# In addition, any cisco-avpair attributes in the radius reply
	# resulting from the TACACS+ authentication will also be
	# added. So you can add per-user authorization to the users'
	# reply items in your user database This example adds
	# authorization for all administrative actions in an Aironet.
	# Consult your client documentation for the specific
	# authorization your client may need
	#AuthorizationAdd aironet:admin-capability=write+snmp+ident+firmware+admin

	# AddToRequest can be used to add any Radius attributes to the
	# Radius requests that this module generates
	AddToRequest NAS-Identifier=TACACS

	# This specifies the name of a Radius attribute (real or
	# pseudo) in the Access-Accept that will be used to deduce the
	# tacacs group name for that user. The tacacs group name is
	# used to match the groupname in AuthorizeGroup parameters.
	# If there is no such attribute in the Access-Accept, the
	# tacacs group name for the user will be assumed to be
	# 'DEFAULT'
        GroupMemberAttr tacacsgroup

        # General Authorization rule format:
	# AuthorizeGroup <groupname> <permit|permitreplace|deny> pattern1 pattern2 ... {replyattr1=val replyattr2="val 2" ...}
	#
	# When a tacacs authorization request is received, the list of
	# AuthorizeGroup rules is searched for rules matching the
	# group name identified by the GroupMemberAttr attribute.
	# Each rule is examined in order until a matching rule is
	# found. The patterns are used to do the matching. Each
	# pattern is a perl regexp.
	#
	# Pattern1 is matched against the first tacacs request argument (usually 'service=xyz')
	# Pattern2 is matched against the second tacacs request argument etc.
	# If every pattern matches its tacacs argument, then the rule matches.
	# If the first matching rule is a 'deny', the authorisation will be denied.
	# If the first matching rule is 'permit', the request is authorised, and the list of reply attr=val
	# entries are sent back to the Tacacs client to be added to the command arguments.
	# If the first matching rule is 'permitreplace', the request is authorised, and the list of reply attr=val
	# entries are sent back to the Tacacs client and are used to replace the requested comamnd arguments.

	# In these examples, there are two different Tacacs groups. group1 is only permitted
	# to do 'show' commands but group2 is allowed to do anything. Group1 is allowed to
	# start a ppp ip session, which will get an inacl of 101 and outacl of 102.
	AuthorizeGroup group1 permit service=shell cmd=show cmd-arg=.*
	AuthorizeGroup group1 permit service=shell cmd\* {autocmd="telnet 169.163.226.81"}
	AuthorizeGroup group1 permit service=ppp protocol=ip {inacl=101 outacl=102}
	AuthorizeGroup group1 deny   service=shell cmd=someforbiddencommand
	# Some Cisco devices have authorisation for optional roles.
	# This next rule automatically selects the right role(s) depending on
	# the shell:contextname in the authorisation request.
	# Only the set of roles corresponding to the request
	# contextname will be returned
	# test with perl goodies/tacacsplustest -user tacuser1 -password tacuser1 -noacct -author_args service=shell,shell:contextname1\*
	# perl goodies/tacacsplustest -user tacuser1 -password tacuser1 -noacct -author_args service=shell,shell:contextname2\*
	AuthorizeGroup group1 permit service=shell {shell:contextname1*"role1 role2 role3" shell:contextname2*role2}
	AuthorizeGroup group1 deny .*

	AuthorizeGroup group2 permit .*

	# As an alternative to controlling individual command
	# authorization, you can set a privilege level for the user
	# when they start their exec session. Thereafter, the router
	# will limit which command the user can use, depending on the
	# priv-lvl. 0 is the lowest, and permits disable, enable,
	# exit, help, and logout.
	# priv-lvl=1 ids the non-privileged user.
	# priv-lvl=15 is the highest privilege level, the level after going into enable mode.
	# Here users in group 3 get a priv-lvl of 15.
	# The start of a session sends the args 'service=shell cmd*'
	AuthorizeGroup group3 permit service=shell cmd\* {priv-lvl=15}

	# In IOS XR the privilege levels have been removed in favor of more advanced
	# "task groups" which can also be provisioned via TACACS+ like this
	AuthorizeGroup xr-only permit service=shell cmd\* {task=#root-system,#cisco-support}
	# However, older Cisco boxes don't like the task attribute since it's not
	# implemented. To get around this you set the task attributes as optional
	# in the TACACS header. This is done by using an asterisk as a delimiter instead
	# as so:
	AuthorizeGroup xr-friendly permit service=shell cmd\* {task*#root-system,#cisco-support priv-lvl=15}
	# Make sure you have priv-lvl=15 on the end cause XR maps up the old priv-lvls
	# to task groups and if it get's the priv-lvl before it get the task groups from
	# TACACS+ it's gonna map up 15 to #root-system instead of just reading the task
	# attribute.

	# Here is how you can enable all privileges on a Cisco Aironet
	# wireless AP with TACACS+. The aironet will request
	# service=aironet protocol=shell when you attemt to log in and
	# user-management is enabled on the AP. The
	# aironet:admin-capability is required to set the privilege
	# level. As an alternative you could have the
	# aironet:admin-capability in a per-user cisco-avpair reply
	# attribute
	#AuthorizeGroup DEFAULT permit service=aironet protocol=shell {aironet:admin-capability=write+snmp+ident+firmware+admin}

	# If this parameter is specified, it specifies the name of an
	# attribute in Access-Accept that will contain per-command
	# authorization patterns for authorising TACACS+ commands. The
	# format is the same as the AuthorizeGroup format excluding
	# the group name. Returned attributes are processed before any
	# configured-in AuthorizeGroup parameters.
	#AuthorizeGroupAttr OSC-Authorize-Group

	# When enabled, allows Radiator to create a RADIUS
	# Access-Request with Service-Type attribute set to
	# Authorize-Only when TACACS+ authorization request is
	# received but Radiator has no previous information about the
	# user's authorization. This may happen if the TACACS+ client
	# does not use TACACS+ for authentication, has authenticated
	# against another TACACS+ server, Radiator has been reloaded
	# or AuthorizationTimeout has expired. Defaults to disabled.
	#AllowAuthorizeOnly 1

	# These hooks are called during processing of Tacacs
	# authentication start and authentication continue
	# requests. They can be used to for special processing of
	# start and continue requests. If the hook returns an empty
	# list, normal processing of the request will continue else no
	# further processing will be done and the hook is expected to
	# handle the request.
	#AuthenticationStartHook sub {print "in AuthenticationStartHook\n"; return}
	#AuthenticationContinueHook sub {print "in AuthenticationContinueHook\n"; return}

	# If a TACACS+ client stays connected for more than this
	# number of seconds without sending any requests it will be
	# disconnected.
	# A value of 0 means no timeout. Defaults to 180 seconds
	#IdleTimeout 180

	# This optional parameter tells the server to try to maintain
	# a single session for all TACACS+ request from the same client.
	#SingleSession 0

	# DefaultRealm optional parameter can be used to specify a default
	# realm to use for received TACACS requests that have a username that
	# does not include a realm. If the incoming user name does not have a
	# realm (i.e. there is no @something following the user name) and if
	# DefaultRealm is specified, the User-Name in the resulting RADIUS
	# request will have @defaultrealm appended to it. The realm can then
	# be used to trigger a specific <Realm> or <Handler> clause. This is
	# useful if you operate a number of TACACS clients for different
	# customer groups and where some or all of your customers log in
	# without specifying a realm. Can be overridden on a per-client basis
	# by setting DefaultRealm in the Client clause.
	#DefaultRealm mydefaultrealm.com

</ServerTACACSPLUS>

# This Handler shows you how to proxy requests to other Radius servers
# Requests from user@test will be forwarded to a different Radius server
<Handler Realm=test>
	# Strip the @test
	RewriteUsername	s/^([^@]+).*/$1/
	<AuthBy RADIUS>
		Host localhost
		Secret mysecret
	</AuthBy>
</Handler>

# See AllowAuthorizeOnly for authorization requests.
# These requests do not carry the User-Password attribute.
<Handler Service-Type=Authorize-Only>
	<AuthBy FILE>
		Filename ./users
		NoCheckPassword
	</AuthBy>
	# Log accounting to a detail file
	AcctLogFileName	./detail
</Handler>

# All other users will be authenticated from a flat file
<Handler>
	<AuthBy FILE>
		Filename ./users
	</AuthBy>
	# Log accounting to a detail file
	AcctLogFileName	./detail
</Handler>
