# eap_tls_proxy.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with proxying of
# EAP-TTLS authentication. With this example, you can proxy handle
# EAP-TTLS requests and send the inner authentication requests to a
# remote Radius server, which does not need to be EAP-TTLS enabled.
#
# We suggest you start simple, prove to yourself that it works and
# then develop a more complicated configuration.
#
# This example will received EAP-TTLS requests, unpack the inner
# authentication requests and proxy the inner authenication to a
# remote server, based on the realm and username of the inner
# authentication.
#
# Alternatively, you can service the inner requests locally within
# this server. See goodies/eap_ttls.cfg for an example.
#
# In order to test this, you can use the sample test certificates
# supplied with Radiator. For production, you WILL need to install a
# real valid server certificate and key for Radiator to use. Runs with
# openssl on Unix and Windows.
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# Requires Net_SSLeay.pm-1.21
# Requires openssl 0.9.7beta or later from www.openssl.org
# Requires Digest-HMAC
# Requires Digest-SHA
#
# You should consider this file to be a starting point only
# $Id: eap_ttls_proxy.cfg,v 1.13 2014/09/26 20:42:55 hvn Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
</Client>

# This handler intercepts the inner authentication requests and sends
# them to another server. The remote Radius server does not need to
# know anything about EAP-TTLS.
<Handler TunnelledByTTLS=1>
	<AuthBy RADIUS>
		Host 203.63.154.29
		AuthPort 9000
		AcctPort 9001
		Secret mysecret
	</AuthBy>
</Handler>

# The original EAP-TTLS request from a NAS will be sent to a matching
# Realm or Handler in the usual way, where it will be unpacked and the
# inner authentication extracted.
#
# The inner authentication request will sent again to a matching Realm
# or Handler. The special check item TunnelledByTTLS=1 can be used to
# select a specific handler. This allows you to select an inner
# authentication method based on realm, or the fact that they were
# tunnelled. You can therfore act just as a EAP-TTLS server, or also
# act as the AAA/H home server, and authenticate EAP-TTLS requests
# locally or proxy them to another remote server based on the realm of
# the inner authentication request.
#
# The following handler gets the outer authentication request and
# unpacks the inner authentication. The inner authentication is then
# redespatched where it will be handled by the <Handler
# TunnelledByTTLS=1> clause above
<Handler>
	<AuthBy FILE>
		# users file will not be used for tunnelled EAP outer
		# authentication. EAP-TTLS inner authentication is
		# handled by its own Handler above.
		Filename %D/users

		# EAPType sets the EAP type(s) that Radiator will honour.
		# Options are: MD5-Challenge, One-Time-Password
		# Generic-Token, TLS, TTLS, PEAP, MSCHAP-V2
		# Multiple types can be comma separated. With the default (most
		# preferred) type given first
		EAPType TTLS

		# EAPTLS_CAFile is the name of a file of CA certificates 
		# in PEM format. The file can contain several CA certificates
		# Radiator will first look in EAPTLS_CAFile then in
		# EAPTLS_CAPath, so there usually is no need to set both
		EAPTLS_CAFile %D/certificates/demoCA/cacert.pem

		# EAPTLS_CAPath is the name of a directory containing CA
    		# certificates in PEM format. The files each contain one 
		# CA certificate. The files are looked up by the CA 
		# subject name hash value
#		EAPTLS_CAPath

		# EAPTLS_CertificateFile is the name of a file containing
		# the servers certificate. EAPTLS_CertificateType
		# specifies the type of the file. Can be PEM or ASN1
		# defaults to ASN1
		EAPTLS_CertificateFile %D/certificates/cert-srv.pem
		EAPTLS_CertificateType PEM

		# EAPTLS_PrivateKeyFile is the name of the file containing
		# the servers private key. It is sometimes in the same file
		# as the server certificate (EAPTLS_CertificateFile)
		# If the private key is encrypted (usually the case)
		# then EAPTLS_PrivateKeyPassword is the key to descrypt it
		EAPTLS_PrivateKeyFile %D/certificates/cert-srv.pem
		EAPTLS_PrivateKeyPassword whatever

		# EAPTLS_RandomFile is an optional file containing
		# randomness
#		EAPTLS_RandomFile %D/certificates/random

		# EAPTLS_MaxFragmentSize sets the maximum TLS fragemt
		# size that will be replied by Radiator. It must be small
		# enough to fit in a single Radius request (ie less than 4096)
		# and still leave enough space for other attributes
		# Aironet APs seem to need a smaller MaxFragmentSize
		# (eg 1024) than the default of 2048. Others need even smaller sizes.
		EAPTLS_MaxFragmentSize 1000

		# Ephemeral key exchange is supported with Diffie-Hellman key
		# exchange (DHE) and Elliptic Curve Diffie-Hellman key
		# exchange (ECDHE). See the reference manual for details.
		#EAPTLS_DHFile %D/certificates/dh2048.pem
		#EAPTLS_ECDH_Curve prime256v1

		# Automatically sets MS-MPPE-Send-Key and MS-MPPE-Recv-Key
		# in the final Access-Accept
		AutoMPPEKeys

		# You can configure the User-Name that will be used
		# for the inner authentication if the inner
		# authentication does not already have
		# User-Name. Defaults to 'anonymous'. This can be
		# useful when proxying the inner authentication. If
		# there is a realm, it can be used to choose a Handler
		# to handle the inner authentication.
		# %0 is replaced with the EAP identity.
		# EAPAnonymous anonymous@some.other.realm
	</AuthBy>
</Handler>
