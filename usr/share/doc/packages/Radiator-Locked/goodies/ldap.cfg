# ldap.cfg
#
# Example Radiator configuration file for authenticating from
# an local LDAP server
#
# This very simple file will allow you to get started with 
# a simple LDAP authentication system. 
#
# We suggest you start simple, prove to yourself that it
# works and then develop a more complicated configuration.
#
# In this example, there is a local LDAP database
# The LDAP database administrator has a common name of:
#   cn=Manager, dc=example, dc=com
# and a password from the LDAP database ('secret' in this example).
# The LDAP server in this example manages a Base DN of:
#   dc=example, dc=com
# IN the database, there is an entry for each user. Their username
# is in the LDAP attribute called "uid", and there is a plaintext 
# password in the LDAP attribute called userPassword
#
# See goodies/users.ldif for example LDAP data for testing.
#
# So, the example will work with the sample databases supplied with
# OpenLDAP, UMich and Netscape LDAP servers.
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: ldap.cfg,v 1.28 2014/11/22 01:30:09 hvn Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
Trace		4

# You will probably want to add other Clients to suit your site.
<Client DEFAULT>
	Secret	mysecret
</Client>

<Handler>
	<AuthBy LDAP2>
		# Tell Radiator how to talk to the LDAP server
		Host		localhost
		# Or you can have multiple space separated Host names, and Net::LDAP will choose
		# the first available one
		#Host ldaphost1 ldaphost2 ldaphost3

		# You will only need these if your LDAP server
		# requires authentication. These are the examples
		# in a default OpenLDAP installation
		# see /etc/openldap/slapd.conf
		AuthDN		cn=Manager, dc=example, dc=com
		AuthPassword	secret

		# This the top of the search tree where users
		# will be found. It should match the configuration
		# of your server, see /etc/openldap/slapd.conf
		BaseDN		dc=example, dc=com

		# The SearchFilter parameter controls which records will
		# be searched for matching users. %0 is replaced by
		# UsernameAttr and %1 by the user name to be found
		# SearchFilter (%0=%1)

		# This is the LDAP attribute to match the radius user name
		# (used as %0 in SearchFilter)
		UsernameAttr	cn
		NoDefault

		# If you dont specify ServerChecksPassword, you
		# need to tell Radiator which attribute contains
		# the password. It can be plaintext or encrypted
		PasswordAttr    userPassword
		
		# This tells AuthBy LDAP2 not to check the users password,
		# ie that LDAP is just used to store check or reply items
		# and the authentication happens elsewhere
		#NoCheckPassword

		# On some (most?) LDAP servers, you can tell AuthBy
                # LDAP to keep the connection to the server up for as
		# long as possible, and not close it after each
		# authentication. This can improve performance,
		# especially where UseTLS or USeSSL are in
		# operation. Not all server can support this, so if you
		# enable it and things dont work right: disable it
		# again.
		HoldServerConnection
		  
		# You can use CheckAttr, ReplyAttr and AuthAttrDef
		# to specify check and reply attributes in the LDAP 
		# database, with and without special character formatting. 
		# See the reference manual for more information
		#AuthAttrDef ipaddress,Framed-IP-Address,reply
		#AuthAttrDef ipaddress,Framed-IP-Address,reply,formatted

		# When you need attributes that are only available
		# with search scope of base, AuthBy LDAP2 will first
		# search for the user DN, and follow with a second
		# search to get the requested attributes
		#AttrsWithBaseScope

		# You can enable debugging of the Net::LDAP
		# module with this, which will dump LDAP requests
		# sent  to and from the LDAP server
		#Debug 255

		# With LDAP2 and perl-ldap 0.22 and better on Unix/Linux, You can enable SSL or TLS.
		# See http://www.openldap.org/pub/ksoper/OpenLDAP_TLS_howto.html
		# for assistance on how to generate certificates and
		# configure openldap for SSL and/or TLS
		# To use SSL, set these
		#UseSSL
		#SSLCAClientCert ldapcertificates/clientcrt.pem
		#SSLCAClientKey ldapcertificates/clientkey.pem
		# and one of
		#SSLCAFile ldapcertificates/demoCA/cacert.pem
		# SSLCAPath /path/to/file/containing/certificate/of/CA
		#  (certificates must be in PEM format)
		
		# To use TLS, set these
		#UseTLS
		#SSLCAClientCert ldapcertificates/clientcrt.pem
		#SSLCAClientKey ldapcertificates/clientkey.pem
		# and one of
		#SSLCAFile ldapcertificates/demoCA/cacert.pem
		# SSLCAPath /path/to/file/containing/certificate/of/CA
		#  (certificates must be in PEM format)
		# These set the corresponding parameters in the 
		# LDAPS connection (see perl-ldap docs)
		# Requires IO::Socket::SSL, Net::SSLeay and openssl

		# You can control the timout for connection failure,
		# plus the backoff time after failure. Timout defaults
		# to 10 secs and FailureBackoffTime to 10 mins
		#Timeout 2
		# FailureBackoffTime 10

		# With PostSearchHook you can do your own processing
		# of the LDAP data. 
		# Arg 0 is the AuthBy LDAP object
		# Arg 1 is the user name being authenticated
		# Arg 2 is the received request packet
		# Arg 3 is the user object holding check and reply
		#  items for this user
		# Arg 4 is the search results handle, whose type
		#   depends on whether its LDAP, LDAP2, or LDAPSDK
		#PostSearchHook sub {print "PostSearchHook @_\n";\
		#	my $attr = $_[4]->get('someldapattr');\
		#	print "get attribute $attr\n";}

		# You can control the LDAP protocol version to be used
		# to talk to the LDAP server. OpenLDAP 2 requires
		# Version 3 unless you have 'allow bind_v2' in your
		# slapd.conf. Defaults to version 2			
		Version 3

		# You can specify the maximum number of LDAP records
	        # that match the search that will be used for
		# check and reply items. Only the first will be
		# used for ServerChecksPasssword. Defaults to 1
		#MaxRecords 2

		# You can specify the local address for the client side of the LDAP connection with BindAddress, 
		# in the form hostname[:port].
		# It will be used to set LocalAddr parameter of the underlying IO::Socket used as the LDAP client.
		# This is usually only useful on multihomed hosts, where you need to control the 
		# source address of the LDAP connection, perhaps for firewall rules.
		#BindAddress 192.164.1.77:999

		# AuthBy LDAP can also check for group memberships in unusual places by defining the
		# GroupSearchFilter
		#GroupSearchFilter (uniquemember=%1)
		#GroupBaseDN xxx
		#GroupNameCN cn
	</AuthBy>
</Handler>

