# hotp.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with 
# HOTP (RFC 4226) authentication.
#
# HOTP one-time-passwords are authenticated based on a secret key stored in an SQL 
# database. Supports counter resynchronisation.
# Detects replay attacks and brute-force attacks
# Can also support static passwords for 2 factor authentication when the user prefixes 
# their static password before the HOTP one-time-password.
#
# Supports authentication by RADIUS PAP, EAP-OTP and EAP-GTC
# Conforms to the HOTP requirements of OATH (http://www.openauthentication.org)
#
# The default configuration works with the sample database in goodies/hotp.sql
# in your Radiator distribution. That sample file installs 2 sample users, each
# with the same test secret as given in RFC 4226. User 'mikem' has no PIN 
# and user 'fred' has a PIN of 'fred'
# you can test with:
# perl radiusd -config goodies/hotp.cfg  
# 
# perl radpwtst -noacct -user mikem -password 755224
# perl radpwtst -noacct -user mikem -password 287082
# perl radpwtst -noacct -user mikem -password 359152
#    and (note the static PIN of 'fred' prefixed to each HOTP one-time-password):
# perl radpwtst -noacct -user fred -password fred755224
# perl radpwtst -noacct -user fred -password fred287082
# perl radpwtst -noacct -user fred -password fred359152
# 
# We suggest you start simple, prove to yourself that it
# works and then develop a more complicated configuration if necessary.
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: hotp.cfg,v 1.5 2014/11/22 01:30:09 hvn Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
</Client>

<Handler>
	<AuthBy SQLHOTP>
		# Authenticate access to the HOTP token database.
		# These need to match the values used when creating the HOTP token database
		DBSource	dbi:mysql:radius
		DBUsername	mikem
		DBAuth		fred

		# AuthSelect is an SQL query that fetches HOTP data from the SQL database
		# It is passed the user name in %0
		# It is expected to return (secret, active, userId, counter, staticpassword)
		# Field 0 (secret) is the HEX encoded secret for the token. It must be
		#  present for the authentication to succeed. Mandatory.
		# Fields 1 and 2 are the counter high and low parts respectively. 
		#  Mandatory. All following fields are optional
		# If field 3 (active) is defined is must be 1 else the authentication 
		#   is rejected
		# Field 4 (pin) is the users static PIN It will be checked
		#  if the user specifies a static password or if Require2Factor is set
		# Field 5 (digits) is the number of digits in the users HOTP code. If NULL
		#  the value of DefaultDigits will be used
		# Field 6 (bad_logins) counts the number of consecutive authentication 
		#  failures. If defined it wil be used to detect brute force attacks
		#  and must be updated by UpdateQuery
		# Field 7 (last_time_accessed) is the unix timestamp of the last 
		#  authentication atttempt. It is used to detect brute force attacks
		#
		# The default works with the sample database schema provided 
		# in goodies/hotp.sql
		# AuthSelect select secret, counter_high, counter_low, active, pin, digits, bad_logins, unix_timestamp(accessed) from hotpkeys where username=%0

		# UpdateQuery is an SQL query that updates the HOTP data in the SQL database
		# After a successful authentication
		# It will be passed the 
		#  new authentication counter high in %0
		#  new authentication counter low in %1
		#  bad login count in %2
		#  the username in %3
		# The default works with the sample databse schema provided 
		# in goodies/hotp.sql
		# UpdateQuery update hotpkeys set accessed=now(), counter_high=%0, counter_low=%1, bad_logins=%2 where username=%3'

		# If Require2Factor is set, then the user must provide their static password
		# as a prefix to their HOTP one-time-password. The correct static password
		# is retrieved from 4th field returned by AuthSelect.
		# If this flag is not set, but the user provides a static password prefix, 
		# then the static password will be checked anyway
		#Require2Factor 1

		# DefaultDigits specifies the number of HOTP digits to use if the user record
		# does not define digits. Defaults to 6.
		# DefaultDigits 6

		# MaxBadLogins specifies how many consecutive bad PINs or bad HOTP codes 
		# will be tolerated in the last BadLoginWindow seconds. If more than
		# MaxBadLogins bad authentication attempts (according to field 5 
		# from AuthSelect occurs and if the last one is 
		# within the last BadLoginWindow seconds (according to field 6 
		# from AuthSelect), the authentication attempt 
		# will be rejected. The user must wait at least BadLoginWindow 
		# seconds before attempting to authenticate again.
		# MaxBadLogins defaults to 10.
		# BadLoginWindow defaults to 10 seconds.
		# MaxBadLogins 10
		# BadLoginWindow 10

		# ResyncWindow Maximum number of missing authentications that will be 
		# tolerated for counter resynchronisation. Defaults to 20.
		# ResyncWindow 20

		# You can also support EAP-OTP and/or EAP-GTC, besides PAP
		EAPType OTP GTC
		#EAPType GTC OTP

	</AuthBy>
</Handler>

