# totp.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with 
# TOTP (RFC 6238) authentication.
#
# The default is to use SHA1 based authentication, but SHA256 and
# SHA512 are also supported.
#
# TOTP one-time-passwords are authenticated based on a secret key stored in an SQL 
# database. Supports counter resynchronisation.
# Detects replay attacks and brute-force attacks
# Can also support static passwords for 2 factor authentication when the user prefixes 
# their static password before the TOTP one-time-password.
#
# Supports authentication by RADIUS PAP, EAP-OTP and EAP-GTC
#
# Conforms to the TOTP requirements of OATH
# (http://www.openauthentication.org) using SHA1, SHA256 and
# SHA512. Supports 6 and 8 digit OTPs and detects replay attacks.
#
# Replay atack detection is not specified in RFC 6238. Nevertheless
# AuthSQLTOTP implements replay attack detection by recording the TOTP
# timestep of the last valid authentication. It will not authenticate
# a TOTP with the same or earlier timestep as the last recorded
# timestep.
#
# Dont forget that correct operation of the TOTP protocol requires the
# client and authenticator to be in time synchronisation to within
# (TimeStep * DelayWindow) seconds.
#
# The default configuration works with the sample database in
# goodies/totp.sql in your Radiator distribution. That sample file
# installs 3+1+1 users with different secrets, digit lengths and PIN
# requirements. See the file more about different OTP authenticators
# and more testing information.
#
# You can test with:
# perl radiusd -config goodies/totp.cfg  
# 
# (change the following TOTPs according to the current time):
# perl radpwtst -noacct -user mikem -password 75135224
# perl radpwtst -noacct -user mikem256 -password 21587082
# perl radpwtst -noacct -user mikem512 -password 35963152
#    and (note the static PIN of 'fred' prefixed to each TOTP one-time-password):
# perl radpwtst -noacct -user fred -password fred755224
# perl radpwtst -noacct -user fred -password fred287082
# perl radpwtst -noacct -user fred -password fred359152
#
# Also see goodies/generate-totp.pl for a simple utility to generate
# shared secrets and QR codes.
#
# We suggest you start simple, prove to yourself that it
# works and then develop a more complicated configuration if necessary.
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: totp.cfg,v 1.6 2014/11/13 20:31:27 hvn Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
</Client>

<Handler>
	<AuthBy SQLTOTP>
		# Authenticate access to the TOTP token database.
		# These need to match the values used when creating the TOTP token database
		DBSource	dbi:mysql:radius
		DBUsername	mikem
		DBAuth		fred

		# AuthSelect is an SQL query that fetches TOTP data from the SQL database
		# It is passed the user name in %0
		# It is expected to return (secret, active, userId, counter, staticpassword)
		# Field 0 (secret) is the HEX encoded secret key for the token. It must be
		#  present for the authentication to succeed. Mandatory.
		# If field 1 (active) is defined is must be 1 else the authentication 
		#   is rejected
		# Field 2 (pin) is the users static PIN It will be checked
		#  if the user specifies a static password or if Require2Factor is set
		# Field 3 (digits) is the number of digits in the users TOTP code. If NULL
		#  the value of DefaultDigits will be used
		# Field 4 (bad_logins) counts the number of consecutive authentication 
		#  failures. If defined it wil be used to detect brute force attacks
		#  and must be updated by UpdateQuery
		# Field 5 (last_time_accessed) is the unix timestamp of the last 
		#  authentication attempt. It is used to detect brute force attacks
		#  Updated automatically by UpdateQuery.
		# Field 6 (last_timestep) is the TOTP timestep of the last valid authentiction.
		#  It is used to detect replay attacks.
		#  Updated automatically by UpdateQuery.
		# Field 7 (algorithm) is the chosen SHA variant. Valid
		#  values are SHA1, SHA256 and SHA512. Defaults to SHA1
		#  when the value is unknown or not fetched from the DB.
		# Field 8 (timestep) is the TOTP timestep. A non-NULL
		#  and non-zero value overrides the default value of
		#  TimeStep configuration parameter.
		# Field 9 (timestep_origin) overrides, when non-NULL,
		#  the default value of TimeStepOrigin configuration
		#  parameter.
		# The default AuthSelect works with the sample
		# database schema provided in goodies/totp.sql. It
		# does not fetch fields 7, 8 or 9.
		#AuthSelect select secret, active, pin, digits, bad_logins, unix_timestamp(accessed), last_timestep, algorithm, timestep, timestep_origin from totpkeys where username=%0

		# UpdateQuery is an SQL query that updates the TOTP data in the SQL database
		# After a successful authentication
		# It will be passed the 
		#  bad login count in %0
		#  the username in %1
		#  the last_timestep in %2
		# The default works with the sample database schema provided 
		# in goodies/totp.sql
		# UpdateQuery update totpkeys set accessed=now(), bad_logins=%0, last_timestep=%2 where username=%1'

		# If Require2Factor is set, then the user must provide their static password
		# as a prefix to their TOTP one-time-password. The correct static password
		# is retrieved from 4th field returned by AuthSelect.
		# If this flag is not set, but the user provides a static password prefix, 
		# then the static password will be checked anyway
		#Require2Factor 1

		# DefaultDigits specifies the number of TOTP digits to use if the user record
		# does not define digits. Defaults to 6.
		# DefaultDigits 6

		# MaxBadLogins specifies how many consecutive bad PINs or bad TOTP codes 
		# will be tolerated in the last BadLoginWindow seconds. If more than
		# MaxBadLogins bad authentication attempts (according to field 5 
		# from AuthSelect occurs and if the last one is 
		# within the last BadLoginWindow seconds (according to field 6 
		# from AuthSelect), the authentication attempt 
		# will be rejected. The user must wait at least BadLoginWindow 
		# seconds before attempting to authenticate again.
		# MaxBadLogins defaults to 10.
		# BadLoginWindow defaults to 10 seconds.
		# MaxBadLogins 10
		# BadLoginWindow 10

		# DelayWindow is the maximum number of timeslots time difference that can be 
		# permitted between the client and server. Defaults to 1 
		# (the value recommended by the TOTP specification).
		# DelayWindow 1

		# TimeStep is the size of the time step in seconds. Defaults to 30 seconds
		# (the value recommended by the TOTP specification).
		# TimeStep 30

		# TimeStepOrigin the Unix epoch time of the first time step. Defaults to 0 seconds
		# (Jan 1, 1970) the value recommended by the TOTP specification).
		# TimeStepOrigin 0

		# You can also support EAP-OTP and/or EAP-GTC, besides PAP
		EAPType OTP GTC
		#EAPType GTC OTP

	</AuthBy>
</Handler>
