# duo.cfg
#
# Example Radiator configuration file.  This very simple file will
# allow you to get started with authentication with Duo Security Auth
# API and 2-factor authentication.
#
# Authenticates password in the form staticpassword,factor, see below
# for detailed descriptions.
#
# Requires perl modules: HTTP::Async and Net::HTTPS::NB
# HTTP::Async 0.19 or later is needed for the AuthBy DUO SSL* options.
# On Windows active perl 5.14 and greater, install with
# ppm install HTTP::Async
# ppm install Net::HTTPS::NB
#
# In order to use AuthBy Duo, you must have signed up with Duo
# Security and used their web interface to create a new RADIUS
# integration, after which you will receive an integration key, secret
# key, and API hostname. This information must be entered into the
# configuration of <AuthBy DUO>
#
# The below chain of AuthBy clauses handles passwords that consists of
# a static password, possibly followed by a comma and a Duo 2nd factor
# (such as a passcode, 'push', 'sms', 'phone' or 'auto').
#
# The portion of the password before the comma is handled locally by
# AuthBy FILE, and the portion after the comma is handled by AuthBy DUO,
# allowing password like:
# staticpw,12345 (static password followed by Duo tokencode)
# staticpw,push
# staticpw,sms
# staticpw,phone
# staticpw,auto  (Duo decides between phone and push, depending on users enrollment)
# staticpw       (this defaults to 'auto', letting Duo decide based on what devices etc are enrolled)
#
# This last case (where there is just a static password and no
# following Duo factor) allows easy migration of existing user
# populations with just static passwords to using Duo 2 factor: all
# the existing users need to enter is their existing static password,
# and Duo will authenticate the user with the 'best' 2nd factor for
# that user, with maybe phone or sms or push.  The 'push', 'sms',
# 'phone' factors can be followed with a number to indicate which of
# the user's enrolled devices to use:
# staticpw,push2
# staticpw,sms3
# etc.
#
# In typical use, the user will attempt to log in with their normal
# static password.  While waiting for the authentication, their Duo
# Push app on their smartphone will alert them and give them the
# choice of 'Approve' or 'Deny'. Finally the RADIUS authentication
# will complete according to which option the user selected.
#
# Note that AuthBy DUO can also be used on its own to provide
# single-factor authentication.
#
# Note carefully the RADIUS client timeout requirements that Duo
# Security require and which are discussed below:
#
# CAUTION: The Duo Security API can block for up to a minute when
# handling some types of authentication requests. This puts strong
# constraints on the RADIUS timeout requirements for RADIUS clients
# using this module: If your users intend to use 'push' or 'phone',
# these can take up to 1 minute between Access-Request and
# Access-Accept/Reject. Your RADIUS clients must be configured to
# tolerate this long delay otherwise your users will not be able to
# use 'push' or 'phone' authentication. The Radiator <Client> clause
# for the incoming requests needs to have DupInterval set to for
# example 100 seconds. The RADIUS clients need to have their RADIUS
# retry timeout and number of retries configured so the product
# timeout * retry_count is more than 60 seconds. This means that the
# RADIUS clients will retransmit their requests for up to 60 seconds
# or until a reply is received from Radiator, and Radiator will only
# reply after it gets its reply from Duo. The recommended settings for
# the RADIUS client are:
# timeout: 10 seconds
# retries: 10
#
# Other Duo authentication types, such as passcodes and 'sms' will
# usually be answered within a few seconds.
#
# Test with eg:
# radpwtst -noacct -retries 0 -timeout 160 -user mikem -password fred,push
#
# See radius.cfg for more complete examples of features and syntax,
# and refer to the reference manual for a complete description of all
# the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: duo.cfg,v 1.3 2013/09/04 20:39:26 hvn Exp $

Foreground
LogStdout
LogDir          .
DbDir           .
# User a lower trace level in production systems:
Trace           4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
        Secret  mysecret
        DupInterval 100
</Client>

<Handler>
       AuthByPolicy ContinueWhileAccept

        # Here we adjust the decoded password so AuthBy FILE only sees
        # the chars before the ',' separator
        <AuthBy INTERNAL>
                DefaultResult    ACCEPT
                # Split the original password on a ',' and use the
                # first part as the static password
                AuthHook sub { $_[0]->{DecodedPassword} = (split(/,/, $_[0]->decodedPassword()))[0];\
                         return ($main::ACCEPT);}
        </AuthBy>

        # Now authenticate the first part of the submitted password as
        # a static password in a local users file
        <AuthBy FILE>
                Filename %D/users
        </AuthBy>

        # Now we readjust the decoded password so the AuthBy DUO only
        # sees the characters after the ',' from of the original
        # password
        <AuthBy INTERNAL>
                DefaultResult    ACCEPT
                AuthHook sub { $_[0]->{DecodedPassword} = undef; \
                         $_[0]->{DecodedPassword} = (split(/,/, $_[0]->decodedPassword()))[1] . '';\
                         return ($main::ACCEPT);}
        </AuthBy>

        # Now authenticate the second part of the submitted password
        # as a Duo tokencode If you just want single factor
        # authentication using the Duo push app for example, you can
        # remove the previous 3 AuthBys, leaving just the AuthBy DUO.
        <AuthBy DUO>
                # You must get these names and codes from your Duo Security integration details
                # when you register your organisation with Duo:
                Hostname api-aabbcczz.duosecurity.com
                SecretKey aaaabbbbccccddddeeeeffffgggghhhhiiiijjjj
                IntegrationKey kkkkllllmmmmnnnnoooo

                # You can use these settings with the simple Duo simulator script duosim.cgi from goodies
                # installed in the /cgi-bin of your local web server. This will allow you to test
                # with some fixed tokencodes etc.
		# Hostname localhost
		# SecretKey notusedfortesting
		# IntegrationKey notusedfortesting
		# Protocol http
		# EndpointPrefix /cgi-bin/duosim.cgi

                # Address specifies what details in the incoming request will
		# be used in the 'Address' field sent to Duo. The contents of
		# the field will show up in the Duo logs. It does not actually
		# have to be an address (which in any case is not usually
		# available until after authentication is complete), and the
		# default of Calling-Station-Id might be a sensible option.
		# Address %{Calling-Station-Id}

                # DefaultFactor. If the user does not specify a valid password or factor,
                # this will be the factor requested from Duo.
                # May be one of "push", "sms", "phone", "auto".
                # Defaults to "auto".
                # DefaultFactor push

                # These permit tuning of the HTTP connection to the Duo server,
                # and should not need to be changed.
                # PollTimerInterval 5
                # Slots 20
                # Timeout 180
                # MaxRequestTime 300
                # ProxyHost xyzzy
                # ProxyPort 1234

		# SSL* options allow controlling how the Duo server's certificate is verified.
		# By default no SSL* options are set and require HTTP::Async 0.19 or later.
		# Usually there is no need to set both SSLCAFile and SSLCAPath
		# SSLVerify require
		# SSLCAFile /etc/ssl/certs/Entrust.net_Secure_Server_CA.pem
		# SSLCAPath /etc/ssl/certs/

		# These allow wildcard certificate name *.duosecurity.com to match.
		# SSLVerifyCNName duosecurity.com
		# SSLVerifyCNScheme http

		# You can add further certificate checks with a custom hook.
		# See IO::Socket::SSL SSL_verify_callback for the details.
		# SSLCertificateVerifyHook sub { \
		#    my ($certOK, $store, $certname, $error, $peerCertificate) = @_; \
		#    main::log($main::LOG_DEBUG, "SSLCertificateVerifyHook: certOK: $certOK, \
		# 	     store: $store, certname: $certname, \
		# 	     error: $error, peerCertificate $peerCertificate"); \
		#    return $certOK; \
		#    }
        </AuthBy>
</Handler>
