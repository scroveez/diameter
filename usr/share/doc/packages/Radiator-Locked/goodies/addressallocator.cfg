# addressallocator.cfg
#
# Example Radiator configuration file showing how to
# do dynamic address allocation using an SQL database
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: addressallocator.cfg,v 1.10 2014/11/19 21:03:27 hvn Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to change this to suit your site.
<Client DEFAULT>
	Secret	mysecret
</Client>

<AddressAllocator SQL>
	# This name allows us to refer to it from inside
	# an AuthBy DYNADDRESS
	Identifier myallocator

	# For mysql, use something like this
	DBSource        dbi:mysql:radius
	DBUsername      mikem
	DBAuth          fred

	# If SessionTimeout is set by a previous AuthBy
	# then that is used as the expiry time. Otherwise
	# DefaultLeasePeriod (in seconds) is used.
	# Defaults to 1 day
	#DefaultLeasePeriod	86400

	# How often we check the database for expired leases
	# leases can expire if an acounting stop is lost
	# or if the session goes longer than the lease
	# we originally asked for. Defaults to 1 day.
	#LeaseReclaimInterval 86400

	# Define the pools that are to be in our database
	# defining pools here will make AddressAllocator SQL
	# ensure that all the addresses are present in the database
	# at startup. You dont have to define pools here. If you dont,
	# AddressAllocator SQL will just use whatever addresses
	# it finds in the RADPOOL table.
	# Address ranges can be either in the form of lower and 
	# upper addresses in a class C block, eg
	#  Range 192.1.1.10 192.1.1.20
	# or a CIDR block eg
	#  Range 192.1.2.0/24
	#
	<AddressPool pool1>
		Subnetmask	255.255.255.0
		Range	192.1.1.1 192.1.1.50
		Range	192.1.1.60 192.1.1.120
		Range	192.1.2.0/31
	</AddressPool>
	<AddressPool pool2>
		Subnetmask	255.255.255.127
		Range	192.2.2.62 192.2.2.99
	</AddressPool>

	# AddressAllocatorSQL supports DBI bind variables for improved
	# SQL database performance.  You can specify any query with ?,
	# marking the place where variables are to be bound, and then
	# specify the variables to be bound with xxxBindVar
	# parameters. The bind variables (marked by the ?s) will be
	# replaced in the order of the xxxBindVar parameters.  marking
	# the place where variables are to be bound
	#
	# Here are example queries using Bind Variables for improved
	# performance The following queries works exactly the same as
	# the default queries but (on some databases) will work much
	# faster
	# Caution: not all databases support Bind Variables. See the documentation for
	# your database's Perl DBD module for details for more details
	#
	# See goodies/address-allocator-sql.txt for examples of how to
	# configure FindQuery and AllocateQuery when multiple Radiator
	# instances (server farm and/or multiple servers) are
	# allocating from the same SQL database.
	#
	#FindQuery select TIME_STAMP, YIADDR, SUBNETMASK, DNSSERVER from RADPOOL where POOL=? and STATE=0 order by TIME_STAMP
	#FindQueryBindVar %0

	#AllocateQuery update RADPOOL set STATE=1,TIME_STAMP=?,EXPIRY=?, USERNAME=? where YIADDR=? and TIME_STAMP =?
	#AllocateQueryBindVar %0
	#AllocateQueryBindVar %1
	#AllocateQueryBindVar %2
	#AllocateQueryBindVar %3
	#AllocateQueryBindVar %4

	# If UpdateQuery is set, it will run for each accounting Start
	# and Alive message. UpdateQuery is not set by default.
	#UpdateQuery update RADPOOL set TIME_STAMP=?, EXPIRY=? where YIADDR=?
	#UpdateQueryBindVar %t
	#UpdateQueryBindVar %0
	#UpdateQueryBindVar %1

	#DeallocateQuery update RADPOOL set STATE=0, TIME_STAMP=? where YIADDR=?
	#DeallocateQueryBindVar %t
	#DeallocateQueryBindVar %0
	#CheckPoolQuery select STATE from RADPOOL where YIADDR=?
	#CheckPoolQueryBindVar %0
	#AddAddressQuery insert into RADPOOL (STATE, TIME_STAMP,POOL, YIADDR, SUBNETMASK, DNSSERVER) values (0, ?, ?, ?, ?, ?)
	# If CheckPoolQuery is set to an empty string, no pool checking will be done at startup:
	#CheckPoolQuery

	#AddAddressQueryBindVar %t
	#AddAddressQueryBindVar %0
	#AddAddressQueryBindVar %1
	#AddAddressQueryBindVar %2
	#AddAddressQueryBindVar %3
	# If AddAddressQuery is set to an empty string, addresses will not be automatically added to the pool 
	# if they are not present
	#AddAddressQuery

	#ReclaimQuery update RADPOOL set STATE=0 where STATE!=0 and EXPIRY < ?
	#ReclaimQueryBindVar %0
</AddressAllocator>

<Handler>
	AuthByPolicy ContinueWhileAccept

	<AuthBy FILE>
		# The file can contain entries like:
		#u1	Password=x
		#	PoolHint = pool1
		#u2	Password=x
		#	PoolHint = pool2,
		#	Session-Timeout=1000

		Filename users
	</AuthBy>

	# AuthBy DYNADDRESS needs to be the last AuthBy. If
	# all the previous ones have succeeded, then an address
	# is allocated
	<AuthBy DYNADDRESS>
		# This refers to the AddressAllocator
		# defined below. IT says tyo us that allocator
		# to get an address. Insterad ofg this, you can
		# put the <AddressAllocator xxx> clause directly
		# in here
		AddressAllocator myallocator

		# This specifies how to form the pool hint, that
		# the allocator uses to specifiy which pool
		# to allocate an address from. The default
		# is %{Reply:PoolHint}, ie a pseudo
		# attribute in teh current reply,
		# presumably set by an earlier
		# AuthBy, but it could be for example
		# the NAS IP address or similar, or a hardwired
		# string.
		#PoolHint %{Reply:PoolHint}

		# These parameters tell us how to set reply
		# attribtues from the result of the allocation.
		# The left hand side of each pair is
		# the "name" of the data item. The right hand
		# side is the Radius attribute name to use
		# in the reply. The valid data item names are:
		# yiaddr - The allocated address
		# subnetmask - The subnet mask to use
		# dnsserver - the IP address of the DNS server
		# The defualt mappings are:
		#MapAttribute	yiaddr, Framed-IP-Address
		#MapAttribute	subnetmask, Framed-IP-Netmask

		# The AuthBy FILE above sets the pseudo reply attribute
		# PoolHint as the clue to the address allocator
		# need to strip it out at the end of processing
		StripFromReply PoolHint
	</AuthBy>
</Handler>
