#!/usr/bin/perl
# restartWrapper
# Wrapper that can restart programs such as Radiator
#
# Author: Mike McCauley (mikem@open.com.au)
# Copyright (C) 1998 Open System Consultants
# $Id: restartWrapper,v 1.9 2011/11/07 22:01:39 mikem Exp $

use Getopt::Long;

my @options = 
    (
     "h", 	    # Help, show usage
     "delay=n",   # Delay between restarts, seconds default: 10
     "min_interval=n", # Minimum interval between successive restarts (secs) default: 0
     "mail=s",    # Address to email notification to default: no email
     "sendmail=s", # Path to sendmail prog default: /usr/lib/sendmail
     "syslog=s",    # facility and level for syslog default: user.err
     "logger=s", # Path to logger prog default: /usr/lib/logger
    );

&GetOptions(@options) || &usage;
$opt_h++ if $opt_h; # Prevent warnings about single use
&usage if $opt_h;
&usage if @ARGV <= 0;

# How long to wait before restarting the prog
$delay = 10;
$delay = $opt_delay if defined $opt_delay;

# How long after the previous START time to wait
# before restarting the prog
$min_interval = 0;
$min_interval = $opt_min_interval if defined $opt_min_interval;

# Where to find sendmail so we can send mail
$sendmail = '/usr/lib/sendmail';
$sendmail = $opt_sendmail if defined $opt_sendmail;

# Where to find logger so we can send mail
$logger = '/usr/bin/logger';
$logger = $opt_logger if defined $opt_logger;

# facility and level to use with syslog
$syslog = 'user.err';
$syslog = $opt_syslog if defined $opt_syslog;

# The command we are going to run
$command = join ' ', @ARGV;

while (1)
{
    $start_time = time;
    $stderr_output = `$command 2>&1 1>/dev/null`;
    $exit_signal_num  = $? & 127;
    $exit_dumped_core = $? & 128;        
    $exit_status = $? >> 8;
    # wait time must satisfy both delay and min_interval
    $wait = $min_interval - (time - $start_time);
    $wait = $delay if $wait < $delay;
    if (defined $opt_syslog)
    {
	open (LOGGER, "| $logger -t$0 -p $syslog >/dev/null 2>&1") 
	    || warn ("Can't open $logger: $!\n");
        print LOGGER "ERROR: $command terminated!";
        close (LOGGER);
    }
    if (defined $opt_mail)
    {
	# Send email to someone
	open (MAIL, "| $sendmail -oi -t>/dev/null 2>&1") 
	    || die ("Can't open $sendmail: $!\n");
	print MAIL <<_END_OF_FORM_;
To: $opt_mail
Subject: Your program exited

Your program

   $command

exited unexpectedly with exit status $exit_status, 
signal number $exit_signal_num and dump indication $exit_dumped_core. 

The STDERR output was $stderr_output.

The program will be restarted again by $0 in $wait seconds.

==================================================================
This mail message was automatically generated by restartWrapper,
part of the OSC Radiator package.
==================================================================
_END_OF_FORM_

        close (MAIL);
	warn "$0: error running $sendmail" if $?;
    }
    sleep $wait;
}

#####################################################################
sub usage
{
    print "usage: $0 [-h] [-delay n] [-mail address] 
 [-min_interval n (default: 0)]
 [-sendmail path-to-sendmail] 
 [-syslog facility.level (default: user.err)]
 [-logger path-to-logger (default: /usr/bin/logger)]
 \"command to run\"\n";
    exit;
}





