# eap_multi.cfg
#
# Example Radiator configuration file.
# This configuration file shows how you can handle multiple types of
# EAP and non-EAP authentication at the same time. This config file
# will handle
# PAP
# CHAP
# MSCHAP
# MSCHAPV2
# EAP-MD5
# EAP-MSCHAPV2
# TTLS-EAP-MD5
# TTLS-PAP
# TTLS-CHAP
# TTLS-MSCHAP
# TTLS-MSCHAPV2
# TTLS-TLS
# TLS
# PEAP-MD5
# PEAP-MSCHAPV2
# PEAP-Generic-Token
# PEAP-TLS
# EAP-Generic-Token
# LEAP
# FAST-EAP-MSCHAPV2
# FAST-EAP-Generic-Token
# using the passwords in %D/users
#
# We suggest you start simple, prove to yourself that it works and
# then develop a more complicated configuration.
#
# This example will authenticate from a standard users file in the
# current directory. It will accept requests from any client and try
# to handle request for any realm. And it will print out what its
# doing in great detail.
#
# In order to authenticate, the clients user name must be in ./users 
# (the password is irrelevant for EAP TLS).
# It will also require that the certificate installed on the client
# is within one step of the root certificate, and that the subject name
# in the client certificate is the same as the user name they are trying
# to log in as.
#
# In order to test this, you WILL need to install a server certificate
# and key for Radiator to use. Runs with openssl on Unix.
#
# See radius.cfg for more complete examples of features and syntax,
# and refer to the reference manual for a complete description of all
# the features and syntax.
#
# Requires Net_SSLeay.pm-1.21 or later
# Requires openssl 0.9.7beta3 or later from www.openssl.org
# Requires Digest-HMAC
# Requires Digest-SHA
#
# You should consider this file to be a starting point only
# $Id: eap_multi.cfg,v 1.11 2014/09/26 20:42:55 hvn Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
</Client>

# This is where we authenticate a PEAP inner request, which will be
# some type of EAP request. The username of the inner request will be
# anonymous, although the identity of the EAP request will be the real
# username we are trying to authenticate.
<Handler TunnelledByPEAP=1>
	# Windows XP when configured for a workgroup might send tunnelled user names
	# in the format COMPUTERNAME\username (eg BAKER\mikem). This
	# will strip the computer name leaving just the user name
	RewriteUsername s/(.*)\\(.*)/$2/

	<AuthBy FILE>
		Filename %D/users

		# This tells the PEAP client what types of inner EAP requests
		# we will honour
		EAPType MSCHAP-V2,TLS,MD5-Challenge,Generic-Token

		# Need these for TLS:
		EAPTLS_CAFile %D/certificates/demoCA/cacert.pem
		EAPTLS_CertificateFile %D/certificates/cert-srv.pem
		EAPTLS_CertificateType PEM
		EAPTLS_PrivateKeyFile %D/certificates/cert-srv.pem
		EAPTLS_PrivateKeyPassword whatever
		EAPTLS_MaxFragmentSize 500
	</AuthBy>
</Handler>


# This is where we authenticate a EAP-TTLS inner request, which may
# also be an EAP request.
<Handler TunnelledByTTLS=1>
	<AuthBy FILE>
		Filename %D/users

		# This tells the PEAP client what types of inner EAP requests
		# we will honour
		EAPType MSCHAP-V2,MD5,TLS
		# Need these for TLS
		EAPTLS_CAFile %D/certificates/demoCA/cacert.pem
		EAPTLS_CertificateFile %D/certificates/cert-srv.pem
		EAPTLS_CertificateType PEM
		EAPTLS_PrivateKeyFile %D/certificates/cert-srv.pem
		EAPTLS_PrivateKeyPassword whatever
	</AuthBy>
</Handler>


# The original PEAP or TTLS request from a NAS will be sent to a
# matching Realm or Handler in the usual way, where it will be
# unpacked and the inner authentication extracted.
#
# The inner authentication request will sent again to a matching Realm
# or Handler. The special check item TunnelledByPEAP=1 or
# TunnelledByTTLS=1 can be used to select a specific handler. This
# allows you to select an inner authentication method based on realm,
# or the fact that they were tunnelled. You can therfore act just as a
# PEAP or EAP-TTLS server, or also act as the AAA/H home server, and
# authenticate PEAP or EAP-TTLS requests locally or proxy them to
# another remote server based on the realm of the inner authentication
# request.
#
# In this basic example the inner authentication is authenticated from
# a file by AuthBy FILE
<Handler>
	<AuthBy FILE>
		# users file will not be used for tunnelled EAP outer
		# authentication. PEAP and EAP-TTLS inner
		# authentication is handled by its own Handler above.
		Filename %D/users

		# EAPType sets the EAP type(s) that Radiator will honour.
		# Options are: MD5-Challenge, One-Time-Password
		# Generic-Token, TLS, TTLS, PEAP, MSCHAP-V2
		# Multiple types can be comma separated. With the default (most
		# preferred) type given first
		EAPType PEAP,TTLS,TLS,MD5,Generic-Token,LEAP,MSCHAP-V2,FAST

		# EAPTLS_CAFile is the name of a file of CA certificates 
		# in PEM format. The file can contain several CA certificates
		# Radiator will first look in EAPTLS_CAFile then in
		# EAPTLS_CAPath, so there usually is no need to set both
		EAPTLS_CAFile %D/certificates/demoCA/cacert.pem

		# EAPTLS_CAPath is the name of a directory containing CA
    		# certificates in PEM format. The files each contain one 
		# CA certificate. The files are looked up by the CA 
		# subject name hash value
#		EAPTLS_CAPath

		# EAPTLS_CertificateFile is the name of a file containing
		# the servers certificate. EAPTLS_CertificateType
		# specifies the type of the file. Can be PEM or ASN1
		# defaults to ASN1
		EAPTLS_CertificateFile %D/certificates/cert-srv.pem
		EAPTLS_CertificateType PEM

		# EAPTLS_PrivateKeyFile is the name of the file containing
		# the servers private key. It is sometimes in the same file
		# as the server certificate (EAPTLS_CertificateFile)
		# If the private key is encrypted (usually the case)
		# then EAPTLS_PrivateKeyPassword is the key to decrypt it
		EAPTLS_PrivateKeyFile %D/certificates/cert-srv.pem
		EAPTLS_PrivateKeyPassword whatever

		# EAPTLS_RandomFile is an optional file containing
		# randomness
#		EAPTLS_RandomFile %D/certificates/random

		# EAPTLS_MaxFragmentSize sets the maximum TLS fragemt
		# size that will be replied by Radiator. It must be small
		# enough to fit in a single Radius request (ie less than 4096)
		# and still leave enough space for other attributes
		# Aironet APs seem to need a smaller MaxFragmentSize
		# (eg 1024) than the default of 2048. Others need even smaller sizes.
		EAPTLS_MaxFragmentSize 1000.

		# If EAPTLS_CRLCheck is set  and the client presents a certificate
		# then Radiator will look for a certificate revocation list (CRL) 
		# for the certificate issuer
		# when authenticating each client. If a CRL file is not found, or
		# if the CRL says the certificate has neen revoked, the authentication will 
		# fail with an error:
		#   SSL3_GET_CLIENT_CERTIFICATE:no certificate returned
		# One or more CRLs can be named with the EAPTLS_CRLFile parameter.
		# Alternatively, CRLs may follow a file naming convention: 
		#  the hash of the issuer subject name 
		# and a suffix that depends on the serial number.
		# eg ab1331b2.r0, ab1331b2.r1 etc.
		# You can find out the hash of the issuer name in a CRL with
		#  openssl crl -in crl.pem -hash -noout
		# CRLs with tis name convention
		# will be searched in EAPTLS_CAPath, else in the openssl 
		# certificates directory typically /usr/local/openssl/certs/
		# CRLs are expected to be in PEM format.
		# A CRL files can be generated with openssl like this:
		#  openssl ca -gencrl -revoke cert-clt.pem
		#  openssl ca -gencrl -out crl.pem
		# Use of these flags requires Net_SSLeay-1.21 or later
		#EAPTLS_CRLCheck
		#EAPTLS_CRLFile %D/certificates/crl.pem
		#EAPTLS_CRLFile %D/certificates/revocations.pem
		
		# Automatically sets MS-MPPE-Send-Key and MS-MPPE-Recv-Key
		# in the final Access-Accept
		AutoMPPEKeys

		# You can configure the User-Name that will be used
		# for the inner authentication if the inner
		# authentication does not already have
		# User-Name. Defaults to 'anonymous'. This can be
		# useful when proxying the inner authentication. If
		# there is a realm, it can be used to choose a Handler
		# to handle the inner authentication.
		# %0 is replaced with the EAP identitiy
		# EAPAnonymous anonymous@some.other.realm

		# You can enable or disable support for TTLS Session Resumption and
		# PEAP Fast Reconnect with the EAPTLS_SessionResumption flag.
		# Default is enabled
		#EAPTLS_SessionResumption 0

		# You can limit how long after the initial session that a session can be resumed
		# with EAPTLS_SessionResumptionLimit (time in seconds). Defaults to 43200
		# (12 hours)
		#EAPTLS_SessionResumptionLimit 10

		# You can control which version of the PEAP protocol
		# to honour with EAPTLS_PEAPVersion. Defaults to
		# 0. Set it to 1 for unusual clients.
		EAPTLS_PEAPVersion 0

		# You can make PEAP Version 1 support compatible with
		# nonstandard PEAP V1 clients that use the old broken TLS encryption labels that
		# appear to be used frequently, due to Microsofts use of the incorrect
		# label in its V0 client. You should use this with Funk Odyssey
		# Client version 4 when EAPTLS_PEAPVersion is set to 1
		# EAPTLS_PEAPBrokenV1Label

		# EAP-FAST requires a Diffie-Hellman parameters
		# file to be precomputed and available
		# to the server. Odyssey Client will only accept the 2048 bit MODP
		EAPTLS_DHFile %D/certificates/dh2048.pem

		# Ephemeral key exchange is supported with Diffie-Hellman key
		# exchange (DHE) and Elliptic Curve Diffie-Hellman key
		# exchange (ECDHE). See the reference manual for details.
		#EAPTLS_DHFile %D/certificates/dh2048.pem
		#EAPTLS_ECDH_Curve prime256v1
	</AuthBy>
</Handler>
