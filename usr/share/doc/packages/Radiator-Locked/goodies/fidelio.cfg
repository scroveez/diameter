# fidelio.cfg
#
# Example Radiator configuration file for authenticating from and accounting
# to a Micros-Fidelio Property Management System (PMS)
#
# AuthBy FIDELIO pulls a copy of the guest database from the PMS at startup
# and keeps it in sync by receiving guest updates from the PMS.
# By default it authenticates users using the Room Number as the username and
# the Guest Number as their password (configurable).
# Accounting Stops are posted to Fidelio with PS messages,
# with the cost calculated from
# CentsPerSecond or ComputeCostHook
#
# The Fidelio simulator in goodies/fideliosim.pl provides a partial simulation
# of a serial or TCP Fidelio PMS server system, 
# with a small number of guests in its
# database. The guest in Room Number 001 has a Guest Number of 12345
#
# Can be used with the Fidelio simulator in goodies/fideliosim.pl like this:
# cd ...Radiator-3.16
# perl goodies/fideliosim.pl -trace 4
# radiusd -config goodies/fidelio.cfg
# radpwtst -user 001 -password 12345
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: fidelio.cfg,v 1.14 2014/11/22 01:30:09 hvn Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
</Client>

<Handler>
	<AuthBy FIDELIO>
		# When Protocol is 'tcp', Port specifies the
		# TCP port number 
		# and Host is the host name or address of the server
		# to use to connect to the Fidelio server
		# Defaults to localhost port 5010
#		Protocol tcp
#		Port 5010
#		Host localhost

		# When Protocol is 'serial', Port specifies the serial port and 
		# port parameters to use to connect to the Fidelio server.
		# Format is 
		#  Port devicename[:baud[:bits[:parity[:stopbits[:handshake]]]]]
		# Defaults to /dev/ttyS0:9600:8:n:1:rts
		# Requires Device::SerialPort
#		Protocol serial
#		Port /dev/ttyUSB0:9600:8:n:1:xoff


		# When an Accounting Stop occurs, Radiator will use either
		# CentsPerSecond or ComputeCostHook to work out the charge
		# to post to Fidelio in the TA field of a PS message
		# Example here is $10.00 per hour
		CentsPerSecond 0.277

		# If ComputeCostHook is defined, it will be used instead of 
		# CentsPerSecond to compute the cost in the
                # TA field. It is called like 
		# &ComputCostHook($durationsecs, $p)
		# and is expected to return the charge in cents
		#ComputeCostHook sub { return $_[0] * 2}

		# You can change the contents of the LR records sent to
		# Fidelio at link startup. When Fidelio sends a record named
		# in the first part, it will include all the fields named in
		# the second part. These fields will be stored in the
		# AuthFIDELIO room database for your reference or for use in UserPasswordHook
		#LinkRecords GI,FLP#RNG#
		#LinkRecords GC,FLP#RNG#

		# UseChecksums can be used to enable or disable the use of
		# checksums for each message. It MUST match whatever your
		# Fidelio PMS is configured to do. Defaults to enabled for
		# serial Protocol and disabled for tcp Protocol
		# You should not normally need to change this
		#UseChecksums 1

		# By default, AuthBy FIDELIO uses the contents of the Fidelio guest
		# G# field (the guest registration number) as the password.
		# You can change this behaviour with the UserPasswordHook
		# hook. 
		# UserPasswordHook is called like 
		#   UserPasswordHook($self, $guest)
		# where $self is the authenticator object, and $guest is a
		# hash containing all the guest information fields recieved
		# from Fidelio (the fields Fidelio sends are configurable with
		# the LinkRecords parameter)
		# The default is 
		#UserPasswordHook sub {return $_[1]->{'G#'}}
		# This one uses the whole guest name (case sensitive) as the
		# password:
		#UserPasswordHook sub {return $_[1]->{'GN'}}
		# This one uses the last part of the guest name (case sensitive) as the
		# password. This is usually the guest surname
		#UserPasswordHook sub {my @n = split(/\s/, $_[1]->{'GN'}); return $n[$#n];}

		# You can add override or extra data fields to be sent in the Opera posting record with 
		# PostingExtraFields. Each line is in the form:
		# PostingExtraFields <fieldid>,<data> 
		# Where <fieldid> is the 2 letter FieldID and <data> 
		# is the data to be sent in that field (special characters are permitted)
		# By default, a posting includes P#, TA, DU, PT, SO, CT and DD fields. 
		# The special characters in the <data> may include:
		#  %0 the user (room) name
		#  %1 the posting sequence number
		#  %2 the cost computed by CentsPerSecond or ComputeCostHook
		#  %3 the duration of the connection in 'hhmmss' format
		#  %4 the reservation number (G#) corresponding to the room number
		# Any fields specified by PostingExtraFields will be added to this list (or overriden
		# where the same fieldid is used
		# In this example the SO (Sales Outlet) code is changed from the default of 'I' (internet)
		# to X, and CT (Clear Text) is changed from teh default of 'Internet Connection' 
		# to 'Wireless Internet'
		#PostingExtraFields SO,X
		#PostingExtraFields CT,Wireless Internet
		
		# You can change the type of the posting record to be sent from the default of
		# PS to any other code such as PR. Use of PR would also require a suitable LinkRecords 
		# entry for the desired PR data. In this example, the type of posting is changed to 
		# PR, and the PR is defined to use the P#, TA, DU, PT, SO, CT and DD field (the defaults) \
		# and the additional field T1 tax code is set to 3, and the additional G# 
		# (reservation number) is set to the users reservation number from the Opera database
		#PostingRecordID PR
		#LinkRecords PR,FLG#P#RNPTTATIDUDADDSOCTT1
		#PostingExtraFields T1,3
		#PostingExtraFields G#,%4

		# CheckoutGraceTime permits users to log in for this period of time _after_ they have
		# checked out. Time in seconds. Default is 0 (no grace time)
		#CheckoutGraceTime 7200

		# MessageHook is called after a message from Fidelio has been unpacked into a hash and 
		# before the record is passed to handle_message(). It can 
		# be used to change or transform any fields in the record before it is passsed to handle_message()
		# and processed by AuthFIDELIO.
		# The first argument is a pointer to the AuthBy FIDELIO clause, adn the second is a pointer 
		# to a hash containing the unpacked record fields.
		#MessageHook sub { print "here in MessageHook: @_\n";}

	</AuthBy>
</Handler>
