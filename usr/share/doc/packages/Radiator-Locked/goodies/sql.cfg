# sql.cfg
#
# Example Radiator configuration file that allows you to authenticate
# from an SQL database. With Radiator you can interface with almost
# any database schema, and there are many more configurable parameters
# that allow you to control database fallback, select statements,
# column names and arrangements etc.
#
# See the reference manual for more details.
# This is a very simple example to get you started. It will
# work with the tables created by the goodies/*.sql scripts.
# You can create a test table, test user and mysql user with the following
# commands:
# mysql -uroot -p
# > CREATE DATABASE radius;
# > GRANT ALL PRIVILEGES ON radius.* TO 'mikem'@'localhost' IDENTIFIED BY 'fred';
#
# You should consider this file to be a starting point only
# $Id: sql.cfg,v 1.23 2013/09/04 20:39:26 hvn Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
Trace		4

# You will probably want to change this to suit your site.
<Client DEFAULT>
	Secret	mysecret
</Client>

# You can put client details in a database table
# and get their details from there with something like this:
<ClientListSQL>
# 	DBSource	dbi:Oracle:host=203.63.154.1;service_name=sales.open.com.au
 	DBSource	dbi:mysql:radius
	DBUsername	mikem
	DBAuth		fred

	# If RefreshPeriod is set to non-zero, it specifies the period in seconds that the client list will
	# be refreshed by rereading the database. Each RefreshPeriod,
	# any Clients previously created by this ClientList are
	# cleared and a new set of clients read from the database.
	# Clients defined in the configuration file will not be clobbered.
	# The same effect can be got by signalling the process with with SIGHUP
	#RefreshPeriod 600

	# If DisconnectAfterQuery is set, ClientListSQL will disconect from the database after each query. 
	# This can be helpful in cases where firewalls etc close connections that have been idle for a long time.
	#DisconnectAfterQuery
</ClientListSQL>

# This will authenticate users from SUBSCRIBERS
<Realm DEFAULT>
    <AuthBy SQL>
	# Adjust DBSource, DBUsername, DBAuth to suit your DB
#	DBSource	dbi:Oracle:host=203.63.154.1;service_name=sales.open.com.au
	DBSource	dbi:mysql:radius
	DBUsername	mikem
	DBAuth		fred

	# You can customise the SQL query used to get user details with the
        # AuthSelect parameter:
	#  AuthSelect select PASSWORD, FILTER from SUBSCRIBERS where USERNAME=%0
	# You can use statement caching and bound variables with AuthSelectParam:
	#  AuthSelect select PASSWORD, FILTER from SUBSCRIBERS where USERNAME=?
	#  AuthSelectParam %u
	# You can control what is done with each field returned from the
	#  AuthSelect query with the AuthColumnDef parameter:
	#  AuthColumnDef 0, User-Password, check
	#  AuthColumnDef 1, Filter-Id, reply, formatted

	# You may want to tailor these for your ACCOUNTING table
	# You can add your own columns to store whatever you like
	AccountingTable	ACCOUNTING
	AcctColumnDef	USERNAME,User-Name
	AcctColumnDef	TIME_STAMP,Timestamp,integer
	AcctColumnDef	ACCTSTATUSTYPE,Acct-Status-Type
	AcctColumnDef	ACCTDELAYTIME,Acct-Delay-Time,integer
	AcctColumnDef	ACCTINPUTOCTETS,Acct-Input-Octets,integer
	AcctColumnDef	ACCTOUTPUTOCTETS,Acct-Output-Octets,integer
	AcctColumnDef	ACCTSESSIONID,Acct-Session-Id
	AcctColumnDef	ACCTSESSIONTIME,Acct-Session-Time,integer
	AcctColumnDef	ACCTTERMINATECAUSE,Acct-Terminate-Cause
	AcctColumnDef	NASIDENTIFIER,NAS-Identifier
	AcctColumnDef	NASPORT,NAS-Port,integer
	AcctColumnDef	FRAMEDIPADDRESS,Framed-IP-Address

	# You can arrange to log accounting to a file if the
	# SQL insert fails with AcctFailedLogFileName
	# That way you could recover from a broken SQL
	# server
	#AcctFailedLogFileName %D/missedaccounting

	# Alternatively, you can arrange to save failed SQL accounting insert queries to a text
	# file with SQLRecoveryFile
	SQLRecoveryFile %D/missedaccounting

	# Normally, if Radiator gets an error or a timeout from a databse connection
	# it will try to reconect to the database, starting with the first DBSource, 
	# and trying them all in order until a successful reconnection.
	# This flag forces the search to start at the database following the DBSource (if there is one).
	# This can help with some types of overloaded database that can be connected but 
	# then timeout when a query is sent.
	#RoundRobinOnFailure

	# You can run a hook whenever Radiator (re)connects to the database. This
	# can be useful for doing database-specific config or setup
	# The hook is called like hook($object, $handle)
	# $object is the SqlDb object that is doing the connecting,
	# and $handle is the database handle if the newly connected database
	# This example shows how to set some connection specific attributes
	# for Interbase
	#ConnectionHook sub {$_[1]->func(-access_mode => 'read_write',\
        #	-isolation_level => 'read_committed',\
        #	-lock_resolution => 'wait',\
        #	'ib_set_tx_param')}

	# You can run a hook whenever Radiator attempts to connect to
	# an SQL database and fails to connect. The default just logs
	# the failure. The hook is called like hook($object,
	# $dbsource, $dbusername, $dbauth). $object is the SqlDb
	# object that is doing the connecting, and the other
	# parameters are the currently used values for DBSource,
	# DBUsername and DBAuth.
	#ConnectionAttemptFailedHook sub { }

	# You can run a hook whenever Radiator fails connect to any
	# SQL server. The default just logs the failure. The hook is
	# called like hook($object). $object is the SqlDb object that
	# is doing the connecting.
	#NoConnectionsHook sub { }

	# AuthBy SQL supports a number of special check items, with corresponding SQL queries for 
	# getting the counts:
	# Check Item            SQL Query Parameter
     	# Max-All-Session       AcctTotalQuery
     	# Max-Hourly-Session    AcctTotalSinceQuery
     	# Max-Daily-Session     AcctTotalSinceQuery
     	# Max-Monthly-Session   AcctTotalSinceQuery
     	# Max-All-Octets        AcctTotalOctetsQuery
     	# Max-All-Gigawords     AcctTotalGigawordsQuery
     	# Max-Hourly-Octets     AcctTotalOctetsSinceQuery
     	# Max-Hourly-Gigawords  AcctTotalGigawordsSinceQuery
     	# Max-Daily-Octets      AcctTotalOctetsSinceQuery
     	# Max-Daily-Gigawords   AcctTotalGigawordsSinceQuery
     	# Max-Monthly-Octets    AcctTotalOctetsSinceQuery
     	# Max-Monthly-Gigawords AcctTotalGigawordsSinceQuery
	# You can implement queries to get total session times in order
	# to enforce Max-All-Session, Max-Daily-Session,
	# Max-Hourly-Session and Max-Monthly-Session check items
	# %0 is replaced bythe username and %1 is replaced by the unix time of
	# the start of the time interval concerned.
	#AcctTotalQuery SELECT SUM(AcctSessionTime) FROM radacct WHERE UserName=%0
	#AcctTotalSinceQuery SELECT SUM(AcctSessionTime - GREATEST((%1 - UNIX_TIMESTAMP(AcctStartTime)), 0)) FROM radacct WHERE UserName=%0 AND UNIX_TIMESTAMP(AcctStartTime) + AcctSessionTime > %1
        #AcctTotalOctetsQuery SELECT SUM(ACCTINPUTOCTETS + ACCTOUTPUTOCTETS) FROM ACCOUNTING WHERE USERNAME=%0

        #AcctTotalOctetsSinceQuery SELECT SUM(ACCTINPUTOCTETS + ACCTOUTPUTOCTETS) FROM ACCOUNTING WHERE USERNAME=%0 AND TIME_STAMP > %1

        #AcctTotalGigawordsQuery SELECT SUM(ACCTINPUTOCTETS + ACCTOUTPUTOCTETS) DIV 4294967296 + SUM(ACCTINPUTGIGAWORDS + ACCTOUTPUTGIGAWORDS) FROM ACCOUNTING WHERE USERNAME=%0

        #AcctTotalGigawordsSinceQuery SELECT SUM(ACCTINPUTOCTETS + ACCTOUTPUTOCTETS) DIV 4294967296 + SUM(ACCTINPUTGIGAWORDS + ACCTOUTPUTGIGAWORDS) FROM ACCOUNTING WHERE USERNAME=%0 AND TIME_STAMP > %1

	# If you are using EAP-FAST, and wish to store PACS in a database (or to pre-provision
	# pacs in a database, define the CreateEAPFastPACQuery and GetEAPFastPACQuery parameters
	# to save and get PAC data
	# CreateEAPFastPACQuery insert into EAPFAST_PAC (PAC_OPAQUE, PAC_LIFETIME, PAC_KEY) values ('%0', '%1', '%2')
	# GetEAPFastPACQuery select PAC_LIFETIME, PAC_KEY from EAPFAST_PAC where PAC_OPAQUE='%0' and PAC_LIFETIME >= %1

	# If group membership is to be checked, this optional parameter defines the SQL
	# query that will be used to get the names of the group(s) to which the user belongs.
	# %0 is replaced by the user name being checked. %1 is replaced by the group name being checked. 
	# It is expected to return a single row, where the first field is the name of the group the user belongs to.
	# You can also use GroupMembershipQueryParam to provide bound variables. 
	# %0 is is replaced by the user name being checked. %1 is replaced by the group name being checked. 
	#GroupMembershipQuery select GROUPNAME from GROUPS where USERNAME=? and GROUPNAME=?
	#GroupMembershipQueryParam %0
	#GroupMembershipQueryParam %1
    </AuthBy>
</Realm>
