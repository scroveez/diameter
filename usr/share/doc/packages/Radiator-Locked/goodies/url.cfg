# url.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with 
# URL authentication.
# With URL authentication, Radiator sends the username and password as tags to a CGI
# or ASP program on your web server. The program validates the username nad password using 
# any method you like, and send back a string indicating succeess, bad username or bad password.
#
# We suggest you start simple, prove to yourself that it
# works and then develop a more complicated configuration.
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# To test this, copy goodies/test_url* to the cgi-bin directory of a test web server.
# then perl radiusd -config goodies/url.cfg
# perl radpwtst -noacct -user m@test -password p
#
# Other example CGI password checkers can be found in the goodies directory.
#
# You should consider this file to be a starting point only
# $Id: url.cfg,v 1.5 2010/10/09 00:21:57 mikem Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
	DupInterval 0
</Client>

# This clause identifies the URL that will be used to authenticate the username and password.
# the request wil be POSTed to AuthURL
# The username will be bassed in a tag named 'u'. 
# IF the page returned by the web server contains the words 'all ok' then the 
# authentication succeeds. See goodies/test_url*.cgi for sample CGI scripts.
<AuthBy URL>
    Identifier AURL
    Debug 1
    Timeout 5

    # The user name in the request will be encoded as a web parameter specified by UserParam
    # defaults to 'user'
    UserParam u

    UrlMethod POST

    # These parameters define the strings expected in the response for various types of result
    BadPasswordKeyword wrong pass
    BadUserKeyword wrong user
    AuthOKKeyword all ok

    # The default behaviour for PAP is to send the plaintext 
    # password to the web server as PasswordParam
    AuthUrl localhost/cgi-bin/test_url.cgi
    PasswordParam c

    # This causes all PAP requests to encode the password with MD5 before sending
    # to the web server as PasswordParam
    #PasswordEncryption MD5
    # For MD5 encryption, test with
    #AuthUrl localhost/cgi-bin/test_url_md5.cgi

    # This causes all PAP requests to encode the password with crypt before sending
    # to the web server as PasswordParam
    #PasswordEncryption crypt
    # For crypt encryption,test with
    #AuthUrl localhost/cgi-bin/test_url_crypt.cgi

    # If AcctUrl is defined, the URL wil be sent all the attributesd
    # from Accounting Requests
    #AcctUrl localhost/cgi-bin/test_url_acct.cgi

    # In order to support CHAP authentication, define 
    # ChapChallengeParam as the name of the web parameter to use to send the CHAP challenge
    # and ChapResponseParam as the name of the web parametrer to use the send the CHAP reponse
    # both are HEX encoded. ChapChallengeParam defaults to chap_challenge. ChapResponseParam defaults
    # to chap_response
    #ChapChallengeParam chap_challenge
    #ChapResponseParam chap_response

    # In order to support MSCHAP authentication, define 
    # MSChapChallengeParam as the name of the web parameter to use to send the MSCHAP challenge
    # and MSChapResponseParam as the name of the web parametrer to use the send the MSCHAP reponse
    # both are HEX encoded. MSChapChallengeParam defaults to mschap_challenge. MSChapResponseParam defaults
    # to mschap_response
    #MSChapChallengeParam mschap_challenge
    #MSChapResponseParam mschap_response

    # In order to support MSCHAPV2 authentication, define 
    # MSChapV2ChallengeParam as the name of the web parameter to use to send the MSCHAPV2 challenge
    # and MSChapV2ResponseParam as the name of the web parametrer to use the send the MSCHAPV2 reponse
    # both are HEX encoded. MSChapV2ChallengeParam defaults to mschapv2_challenge. MSChapV2ResponseParam defaults
    # to mschapv2_response
    # This works with the sample cgi in goodies:
    #AuthUrl localhost/cgi-bin/test_url_mschapv2.cgi
    #MSChapV2ChallengeParam MSCHAP-Challenge
    #MSChapV2ResponseParam MSCHAP2-Response
    #CopyReplyItem MS-CHAP2-Success

    # You can arrange for attributes to be copied from the incoming request (or its outer request if there is one)
    # with something like CopyRequestItem xxx yyy. The text of yyy (which may be contain special characters)
    # will be added to the HTTP request with the tag xxx.
    # In the special case where yyy is not defined, the value of attribute named xxx will be 
    # copied from the incoming RADIUS request 
    # and added to the HTTP request as the tagged item yyy.
    # All values are HEX encoded before adding to the HTTP request.
    #CopyRequestItem NAS-Port
    #CopyRequestItem Calling-Station-Id %{OuterRequest:Calling-Station-Id}

    # You can arrange for attribute=value pairs in a successful HTTP response to be copied
    # to the RADIUS reply with something like
    # CopyReplyItem xxx yyy
    # If a successful HTTP reply contains a string like 'xxx=hexencodedvalue' the value will be copied to the
    # RADIUS reply as attribute yyy=value
    # the value is expected to be HEX encoded and will be HEX decoded before adding to the reply
    # If yyy is not present, it defaults to xxx, so that
    # CopyReplyItem MS-CHAP2-Success
    # would ensure that if a successful HTTP repsonse contained the string MS-CHAP2-Success=hexvalue
    # the hexvalue would be HEX decoded and then added to the RADOUIS reply as MS-CHAP2-Success
</AuthBy>

# This clause specifies to handle all authentication request with the AuthBy URL above
<Handler Realm = test>
	RewriteUsername	s/^([^@]+).*/$1/
	RejectHasReason
	AuthBy AURL
</Handler>

