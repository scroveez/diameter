#
# $Id: ser.cfg,v 1.2 2006/03/01 01:31:17 mikem Exp $
#
# Sample SER configuration file for RADIUS authentication and accounting
# Requires that radiusclient-ng be installed and configured 
# (see /usr/local/etc/radiusclient-ng) and
# the SER auth and auth_radius modules be compiled.
#
# Tested with ser-0.9.6
#
# In order to enable radius support in SER, you must first install radiusclient-ng
# To enable RADIUS authentication in SER, follow  the instructions at 
# in modules/auth_radius/README in your SER distribution and
# http://www.iptel.org/ser/doc/ser_radius/ser_radius.pdf
# To enable RADIUS accounting in SER, follow the instructions at 
# modules/acc/README.
#
# Contrary to the documentation, you must use the file
# modules/acc/etc/sip_dictionary as your radiusclient-ng dictionary.
#
# We run it like this (as root):
# LD_LIBRARY_PATH=/usr/local/lib /usr/local/sbin/ser -f ./goodies/ser.cfg
#
# This example config is for a test organisation open.com.au
# mikem@open.com.au
#

# ----------- global configuration parameters ------------------------

# mikem:
debug=8
fork=no
log_stderror=yes
listen=203.63.154.29
alias=open.com.au

check_via=no	# (cmd. line: -v)
dns=no           # (cmd. line: -r)
rev_dns=no      # (cmd. line: -R)
#port=5060
#children=4
fifo="/tmp/ser_fifo"

# ------------------ module loading ----------------------------------

loadmodule "/usr/local/lib/ser/modules/sl.so"
loadmodule "/usr/local/lib/ser/modules/tm.so"
loadmodule "/usr/local/lib/ser/modules/rr.so"
loadmodule "/usr/local/lib/ser/modules/maxfwd.so"
loadmodule "/usr/local/lib/ser/modules/usrloc.so"
loadmodule "/usr/local/lib/ser/modules/registrar.so"
loadmodule "/usr/local/lib/ser/modules/textops.so"


loadmodule "/usr/local/lib/ser/modules/auth.so"
loadmodule "/usr/local/lib/ser/modules/auth_radius.so"
modparam("auth_radius", "radius_config", "/usr/local/etc/radiusclient-ng/radiusclient.conf")
modparam("auth_radius","service_type",15)

# Support for Radius accounting. Need to recompile acc module
# after modifying the Makefile according to modules/acc/README
# Caution: Radius accounting STOP records sent by SER dont have Acct-Session-Time
# which makes them less useful
loadmodule "/usr/local/lib/ser/modules/acc.so"
modparam("acc", "radius_config", "/usr/local/etc/radiusclient-ng/radiusclient.conf")
modparam("acc", "log_level", 1)
modparam("acc", "log_flag", 1)
modparam("acc", "radius_flag", 1)
# Enable missed call accounting:
modparam("acc", "radius_missed_flag", 3)

# Tell the user location register to keep data locally (no database)
modparam("usrloc", "db_mode",   0)

# -- rr params --
# add value to ;lr param to make some broken UAs happy
modparam("rr", "enable_full_lr", 1)

# -------------------------  request routing logic -------------------

# main routing logic

route{
	# initial sanity checks -- messages with
	# max_forwards==0, or excessively long requests
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		break;
	};
	if (msg:len >=  2048 ) {
		sl_send_reply("513", "Message too big");
		break;
	};
	

	# we record-route all messages -- to make sure that
	# subsequent messages will go through our proxy; that's
	# particularly good if upstream and downstream entities
	# use different transport protocol
	if (!method=="REGISTER") record_route();	

	# subsequent messages withing a dialog should take the
	# path determined by record-routing
	if (loose_route()) {
		# mark routing logic in request
		append_hf("P-hint: rr-enforced\r\n"); 
		route(1);
		break;
	};

	if (!uri==myself) {
		# mark routing logic in request
		append_hf("P-hint: outbound\r\n"); 
		route(1);
		break;
	};

	# if the request is for other domain use UsrLoc
	# (in case, it does not work, use the following command
	# with proper names and addresses in it)
	if (uri==myself) {

		if (method=="REGISTER") {

# This enables RADIUS authentication
			if (!radius_www_authorize("open.com.au")) {
				www_challenge("open.com.au", "1");
				break;
			};
# End of RADIUS authentication enabling

			save("location");
			break;
		};

		lookup("aliases");
		if (!uri==myself) {
			append_hf("P-hint: outbound alias\r\n"); 
			route(1);
			break;
		};

		# native SIP destinations are handled using our USRLOC DB
		if (!lookup("location")) {
			sl_send_reply("404", "Not Found");
			break;
		};
	};
	append_hf("P-hint: usrloc applied\r\n"); 

	route(1);
}

route[1] 
{
	# Enable all transactions for Radius accounting. 
	# Must be the same value as in log_flag above
	setflag(1);
	# End of Radius accounting logging enable

	# send it out now; use stateful forwarding as it works reliably
	# even for UDP2TCP
	if (!t_relay()) {
		sl_reply_error();
	};
}

