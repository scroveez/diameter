# radsec-server.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with 
# proxying from one Radiator to another using AuthBy RADSEC.
# It listens for AuthBy RADSEC connections on port 2083, and 
# services each request locally.
# See also radsec-client.cfg
#
# We suggest you start simple, prove to yourself that it
# works and then develop a more complicated configuration.
# This file shows how to implement the server end of an AuthBy
# RADSEC connection, which will proxy all requests to the
# remote radius server by a TCP connection
#
# This example will authenticate from a standard users file in
# the current directory and log accounting to a file in the current
# directory.
# It will accept requests from any client and try to handle request
# for any realm.
# And it will print out what its doing in great detail.
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: radsec-server.cfg,v 1.17 2014/11/22 01:30:09 hvn Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# Dont listen on any UDP ports
AuthPort
AcctPort

# Listen for AuthBy RADSEC connections from RadSec clients
<ServerRADSEC>
	# You can control the network interface(s) to listen on with
	# BindAddress.  You can specify multiple address separated by
	# commas. Defaults to the global BindAddress, which defaults
	# to 0.0.0.0 (all interfaces).
	#BindAddress 203.63.154.29, 127.0.0.1

	# This is the name or number of the TCP or SCTP port to listen
        # on. Defaults to the IANA official RadSec port 2083
	#Port 9048

	# This is the shared secret for all clients connecting to this
	# ServerRADSEC. It must agree with the Secret in each
	# AuthRADSEC connecting to us. The default shared secret
	# according to RFC 6614 is 'radsec'
	#Secret radsec

	# You can specify which protocol to use. Options are 'tcp' or
	# 'sctp'. Defaults to 'tcp'. This must agree with what is
	# configured into the AuthBy RADSEC in the clients that
	# connect to us. SCTP is not supported by all platforms.
#	Protocol sctp

	# Enable TLS on this connection for encryption and mutual
	# authentication. This ServerRADSEC will act as a TLS server,
	# and will respond to a TLS handshakes from RadSec clients. If
	# the handshake is successful, all traffic will be encrypted
	# with TLS.
	#
	# This also provides mutual authentication between the
	# AuthRADSEC client and ServerRADSEC server. You _must_ have a
	# valid server certificate for RADSEC to work with UseTLS. The
	# client will not be able to connect unless the server
	# presents a valid certificate. Requires Net_SSLeay and
	# openssl see http://www.open.com.au/radiator/faq.html#141
	# NOTE: UseTLS is enabled by default.
	UseTLS
	TLS_CAFile ./certificates/demoCA/cacert.pem
	TLS_CertificateFile ./certificates/cert-srv.pem
	TLS_CertificateType PEM
	TLS_PrivateKeyFile ./certificates/cert-srv.pem
	TLS_PrivateKeyPassword whatever

	# Force client certificate authentication. If
	# TLS_RequireClientCert is set, the server will require every
	# RadSec client to present a valid client certificate with a
	# CN that matches TLS_ExpectedPeerName. Otherwise the TLS
	# handshake will fail and the client will not be able to
	# connect. To enable the client to send a certificate, you
	# must set at least TLS_CertificateFile and TLS_PrivateKeyFile
	# in the client. The sample client certificate has a CN of
	# 'testUser' and therefore you should set TLS_ExpectedPeerName
	# as below
#	TLS_RequireClientCert

	# By default the server certificate is verified by comparing
	# the certificate CNs and subjectAltNames (IP Address types)
	# against the clients's IP address. If these fail, you can
	# specify a pattern to match against the certificate Subject.
	# In any case, the certificate must still be verified againt
	# the issuers root certificate. Defaults to .+ which will
	# match any subject, provided it is validated by the root
	# certificate and any CRLs
	#TLS_ExpectedPeerName .+

	# Alternatively, you can verify the certificate based on a
	# regexp pattern match against a SubjectAltNAme of type URI:
	#TLS_SubjectAltNameURI .*open.com.au

	# Ephemeral key exchange is supported with Diffie-Hellman key
	# exchange (DHE) and Elliptic Curve Diffie-Hellman key
	# exchange (ECDHE). To enable DHE you need to specify the name
	# of the DH group file. To enable ECDHE you need to specify
	# the EC curve name. See openssl ecparam -list_curves for the
	# curve names. Note: these options do not force ephemeral
	# keying but allow it to be used if the both peers agree to
	# use a suitable ciper suite.
	#TLS_DHFile %D/certificates/dh2048.pem
	#TLS_ECDH_Curve prime256v1

	# If TLS_CRLCheck is set then Radiator will look for a
	# certificate revocation list (CRL) for the certificate issuer
	# when authenticating each client. If a CRL file is not found,
	# or if the CRL says the certificate has neen revoked, the
	# authentication will fail with an error:
	#   SSL3_GET_CLIENT_CERTIFICATE:no certificate returned

	# One or more CRLs can be named with multiple TLS_CRLFile
	# parameters. Alternatively, CRLs may follow a file naming
	# convention: the hash of the issuer subject name and a suffix
	# that depends on the serial number. For example, ab1331b2.r0,
	# ab1331b2.r1 etc.
	# You can find out the hash of the issuer name in a CRL with
	#  openssl crl -in crl.pem -hash -noout

	# CRLs with this name convention will be searched first from
	# TLS_CAPath, then from the openssl certificates directory,
	# typically /usr/local/openssl/certs/. CRLs are expected to be
	# in PEM format.
	# CRL files can be generated with openssl like this:
	#  openssl ca -gencrl -revoke cert-clt.pem
	#  openssl ca -gencrl -out crl.pem

	# Use of these flags requires Net_SSLeay-1.21 or later Each
	# TLS_CRLFile will be reloaded and reread at the start of each
	# new RadSec session if the file has changed since the last
	# session. TLS_CRLFile can include operating system wildcards
	# to refer to multiple CRLS
#	TLS_CRLCheck
#	TLS_CRLFile %D/certificates/revocations.pem
#	TLS_CRLFile %D/certificates/revocations2.pem
#	TLS_CRLFile %D/crls/*.r0

	# TLS_PolicyOID enables certificate policy checking and
	# specifies one or more policy OIDs that must be present in
	# the certificate path. It sets the 'require explicit
	# policy' flag as defined in RFC3280. Requires Net-SSLeay
	# 1.37 or later
	#TLS_PolicyOID 2.5.29.32.0
</ServerRADSEC>

<Handler>
	<AuthBy FILE>
		Filename ./users
	</AuthBy>
</Handler>
