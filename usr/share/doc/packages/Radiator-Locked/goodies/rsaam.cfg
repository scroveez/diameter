# rsaam.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with RSA AM
# authentication using PAP or EAP-GTC.
#
# RSA AM supports a number of authentication methods, including 
# - RSA Secureid Token Car
# - Static Passwords
# - On Demand tokencode (by SMS or email)
# - A series of user-configured security questions
# and all of these can be configured with AuthBy RSAAM
#
# AuthBy RSAAM supports all the features provided by AuthBy ACE and
# AuthBy RSAMOBILE. Radiator still supports the older AuthBy ACE
# module using Authen-ACE4, which supoprts fewer features but may be
# appropriate for your circumstances
#
# We suggest you start simple, prove to yourself that it
# works and then develop a more complicated configuration.
#
# This example will authenticate all users from RSA AM. It will accept
# requests from any client and try to handle request for any realm.
# And it will print out what its doing in great detail.
#
# Requires SOAP::Lite and all its prerequisites for SSL, 
# including Crypt::SSLeay or IO::Socket::SSL+Net::SSLeay
#
# Consider examples to test AM OnDemand authentication. OnDemand requires the
# user to enter their personal PIN. If the PIN is correct AM will send a
# tokencode to the user by email or SMS, depending on how AM is configured.
# When the user received the tokencode, they enter it as the password
#
# You can test EAP Generic Token Card with 'radpwtst -noacct -eapgtc'
# You will be presented with an RSA AM Challenges for your personal PIN.
# After the PIN is entered, RSA AM will send you a Tokencode to your mobile
# phone, which you need to enter into the Tokencode prompt, something like this:
#
# [mikem@zulu Radiator]$ radpwtst -noacct -eapgtc -timeout 10 -user yourusername
# sending Access-Request...
# PIN:: abc123
# sending Access-Request...          #RSA AM now sends Token code 70840885 by SMS
# Tokencode:: 70840885
#
# You can also test with conventional Radius Access-Request/Access-Challenge like this, where
# abc123 is the users PIN. If the initial -password is empty, then RSA MOBILE will first prompt for the PIN, then
# the Tokencode:
# [mikem@zulu Radiator]$ radpwtst -noacct -timeout 30 -user yourusername -password abc123 -interactive
# sending Access-Request...          #RSA AM now sends Token code 12231051 by SMS
# Tokencode:
# 12231051
# sending Access-Request...
# OK
#
# Also tested with Funk Odyssey client, using EAP Token-Card.
#
# Caution: in some circumstances, The Radiator connection to RSA AM
# 7.1 may fail with an error message in the RSA Weblogic server like:
# Received fatal alert: bad_record_mac at sun.reflect.NativeConstructorAccessorImpl.newInstance0
# This can be fixed by adding these lines to the weblog server start file:
# -Dhttps.protocols=SSLv3,TLSv1
# -Dsun.security.ssl.allowLegacyHelloMessages=true
# -Dsun.security.ssl.allowUnsafeRenegotiation=true
#
# See radius.cfg for more complete examples of features and syntax,
# and refer to the reference manual for a complete description of all
# the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: rsaam.cfg,v 1.9 2014/03/17 15:48:09 hvn Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
</Client>

<Handler>
	<AuthBy RSAAM>
		# This defines the location of the RSA AM web service
		# You cant use localhost since AM doesnt listen on
		# 127.0.0.1 The default port number AM listens on is
		# 7002
		Host boodgie.open.com.au:7002

		# These define the username and password used to access
		# the RSA AM web service interface.
		# You must set these to be the username and password that
		# RSA AM automatically generates for AM web service access. 
		# To find them, do this on RSA AM 7.1 and earlier
		#   cd "c:\program files\rsa security\rsa authentication manager\utils"
		#   rsautil manage-secrets -m <MASTERPWD> -a list
		# On RSA AM 8.x Linux appliance, do this
		#   cd /opt/rsa/am/utils
		#   ./rsautil manage-secrets --action list
		SessionUsername CmdClient_zqikovag
		SessionPassword t6FL5D2fi5

		# Prevent looking for DEFAULT users if auth fails
		NoDefault

		# This enables the SOAP::Lite internal tracing. 
		# Allowable values are:
		# transport dispatch result parameters headers objects
		# method fault freeform trace debug all
		# or any combination. Defaults to no tracing.
#		SOAPTrace all

		# This tells RSA AM the type of authentication to use
		# options are:
		#  SecurID_Native
		#  OnDemand
		#  LDAP_Password
		#  Security_Questions
		#  SecurID_Proxy
		#  RSA_Password
		# default is RSA_Password
		Policy SecurID_Native
		#Policy OnDemand

		# EAPType sets the EAP type(s) that Radiator will honour.
		# Options are: MD5-Challenge, One-Time-Password
		# Generic-Token, TLS, TTLS, PEAP, MSCHAP-V2
		# Multiple types can be comma separated. With the default (most
		# preferred) type given first
		# Only Generic-Token would usually make sense for RSA AM 
		# in an inner EAP handler.
		EAPType Generic-Token

		# You can customise various user messages generated by this 
		# module. The key for each message is the RSA AM message, 
		# and the value is the string you want the user to see
		#Message PIN, Enter your OnDemand PIN
		#Message PASSWORD_CREDENTIAL, Enter your Static Password

		# Set the prefix for all Access-Challenge
		# responses. Defaults to CHALLENGE=
		#ChallengePrefix

		# Add RADIUS Prompt attribute to Access-Challenge messages.
		# Prompt value is based on responses received from RSA AM.
		#ChallengeHasPrompt

		# Options to control how the RSA AM HTTPS server's
		# certificate is verified.
		#
		# By default no SSL* options are set to verify the RSA
		# AM HTTPS server certifcate. To verify the
		# certificate, Perl LWP 6.0 or later is required. The
		# default for LWP 6.0 and later is to verify
		# certificates, so the CA certificate checks are
		# likely to fail unless appropriate SSL* options are
		# set. See Perl IO::Socket:SSL for verification
		# details.

		# Use 'none' to disable certificate verification checks.
		#SSLVerify require

		# Usually there is no need to set both SSLCAFile and SSLCAPath
		#SSLCAFile /etc/ssl/certs/RSArootCAforrsaam81.example.com.pem
		#SSLCAPath /etc/ssl/certs/

		# Set the name which is used when verifying the
		# hostname against the certificate presented by RSA AM
		# HTTPS server. Required if the name in the
		# certificate does not match the Host parameter
		# setting. Wildcard match is allowed. See Perl
		# IO::Socket:SSL for the details. Currently only
		# 'http' scheme is supported because of LWP module
		# restrictions.
		#SSLVerifyCNName example.com
		#SSLVerifyCNScheme http

		# You can add further certificate checks with a custom hook.
		# See IO::Socket::SSL SSL_verify_callback for the details.
		#SSLCertificateVerifyHook sub { \
		#   my ($certOK, $store, $certname, $error, $peerCertificate) = @_; \
		#   main::log($main::LOG_DEBUG, "SSLCertificateVerifyHook: certOK: $certOK, \
		#             store: $store, certname: $certname, \
		#             error: $error, peerCertificate $peerCertificate"); \
		#   return $certOK; \
		#   }

		# If your RSA AM requires client certificates for AM clients,
		# you can specify the certificate with these parameters.
		# The PrivateKeyFile must be unencrypted
		#SSL_CertificateFile %D/certificates/cert-clt.pem
		#SSL_PrivateKeyFile %D/certificates/cert-clt.pem
	</AuthBy>
</Handler>
