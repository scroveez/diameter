# radmin_otp_internode.cfg
#
# Example Radiator configuration file showing how to do One-Time-Passwords
# delivered by SMS, using the Internode NodeText Gateway, a commercial SMS gateway
# available from Internode in Australia.
#
# The NodeText Gateway is a high reliability, high performance SMS Gateway
# for Australian SMS numbers. Works with GSM, CDMA. Works with Telstra, Optus 
# and Vodafone networks. Billing of SMS delivery charges can be to the sender, 
# or the receiver. The Internode NodeText Gateway can also apply a range of special
# features, such as name to SMS number translation etc. Multiple recipients,
# message splitting etc are supported.
# They also offer an email-to-SMS gateway.
#
# The NodeText Gateway requires a username and password to authenticate the sender,
# you have to get these from Internode when you sign up for the service.
#
# As per 'NodeText Gateway User Guide', 22/05/2006
# Internode SMS gateway access for Australian SMS number is available
# from http://www.internode.on.net
# and
# http://www.internode.on.net/products/sms.htm
# 
# This fully working example allows your users to be administered with Radmin,
# using One-Time-Passwords delivered to the user by SMS.
#
# When a valid user attempts to log in with an empty password, 
# AuthBy OTP will generate a new random password (according to a configurable 
# pattern) and send it to the users SMS number. The SMS number is stored in the
# Radmin Full Name field as a complete SMS number including the '61' Australian
# country code prefix, eg '61414999999'
# When the user receives the OTP via SMS, they then log in again
# with the password they received
#
# To test:
# Install Radiator
# Install RAdmin
# Create a new user in RAdmin, enter their Australian SMS number in the RAdmin
#  Full Name field
# Get an SMS senders account from Internode
# Modify this config file by changing YOURINTERNODEUSER, YOURINTERNODEPASS
# Run Radiator with this config file:
#  perl radius goodies/radmin_otp_internode.cfg -trace 4
# Test with radpwtst:
#  perl radpwtst -interactive -noacct -user THERADMINUSERNAME -password ""
#  OTP Challenge: Wait for your password via SMS
#  EnterYourSMSPasswordHere
#
# You should consider this file to be a starting point only
# $Id $

Foreground
LogStdout
LogDir		.
DbDir		.

# Dont turn this up too high, since all log messages are logged
# to the RADMESSAGES table in the database. 3 will give you everything
# except debugging messages
Trace 4

# You will probably want to change this to suit your site.
# You should list all the clients you have, and their secrets
# If you are using the Radmin Clients table, you wil probably
# want to disable this.
<Client DEFAULT>
	Secret	mysecret
</Client>

# Handle everyone with RADMIN, then OTP
<Realm DEFAULT>
        # Ensure we first check the username validity with Radmin
	# and then check the password with OTP afterwards
        AuthByPolicy ContinueWhileAccept

	# Check username validity etc with RAdmin:
	<AuthBy RADMIN>
		# Change DBSource, DBUsername, DBAuth for your database
		# See the reference manual. You will also have to 
		# change the one in <SessionDatabase SQL> below
		# so its the same
		DBSource	dbi:mysql:radmin:localhost
		DBUsername	radmin
		DBAuth		radminpw

		# Never look up the DEFAULT user 
		NoDefault
		
		# AuthBy OTP below will check the password
		NoCheckPassword

		# Here we set up a custom select query that gets the FULLNAME
		# column, where we are storing the users SMS number
		AuthSelect select PASS_WORD, STATICADDRESS, TIMELEFT, MAXLOGINS, SERVICENAME, BADLOGINS, VALIDFROM, VALIDTO, FULLNAME from RADUSERS where USERNAME=%0

		# Here we add the users SMS number from the FULLNAME column
		# to the incoming request
		# so AuthBy OTP will get it below
		AuthColumnDef 0, SMS-Number, request

		# You can add to or change these if you want, but you
		# will probably want to change the database schema first
		AccountingTable	RADUSAGE
		AcctColumnDef	USERNAME,User-Name
		AcctColumnDef	TIME_STAMP,Timestamp,integer
		AcctColumnDef	ACCTSTATUSTYPE,Acct-Status-Type,integer
		AcctColumnDef	ACCTDELAYTIME,Acct-Delay-Time,integer
		AcctColumnDef	ACCTINPUTOCTETS,Acct-Input-Octets,integer
		AcctColumnDef	ACCTOUTPUTOCTETS,Acct-Output-Octets,integer
		AcctColumnDef	ACCTSESSIONID,Acct-Session-Id
		AcctColumnDef	ACCTSESSIONTIME,Acct-Session-Time,integer
		AcctColumnDef	ACCTTERMINATECAUSE,Acct-Terminate-Cause,integer
		AcctColumnDef	FRAMEDIPADDRESS,Framed-IP-Address
		AcctColumnDef	NASIDENTIFIER,NAS-IP-Address
		AcctColumnDef	NASIDENTIFIER,NAS-Identifier
		AcctColumnDef	NASPORT,NAS-Port,integer
		AcctColumnDef	DNIS,Called-Station-Id
#		AcctColumnDef	CALLINGSTATIONID,Calling-Station-Id

		# This updates the time and octets left
		# for this user
		AcctSQLStatement update RADUSERS set TIMELEFT=TIMELEFT-0%{Acct-Session-Time}, OCTETSINLEFT=OCTETSINLEFT-0%{Acct-Input-Octets}, OCTETSOUTLEFT=OCTETSOUTLEFT-0%{Acct-Output-Octets} where USERNAME='%n'

	</AuthBy>

	# If the username is valid etc then we get to here and issue or check
        # the One-Time-Pasword
	<AuthBy OTP>
		# This hook generates a new random password and sends it
		# to the users SMS number (which we got from the FULLNAME column
		# in the Radmin database above), using the Internode NodeText
		# https gateway.
		# You have to edit 'user' and 'pass' with the username
		# and password of your Internode SMS sender account
		# You can configure 'test' to 1 to prevent sending and charging 
		# of the SMS by Internode
		ChallengeHook sub {\
		 use Radius::SMS::Internode;\
		 my ($self, $user, $p, $context) = @_;\
		 $context->{otp_password} = $self->generate_password();\
		 my $errormsg = $self->sms_internode(\
		   debug => '-',\
		   user => 'YOURINTERNODEUSER',\
		   pass => 'YOURINTERNODEPASS',\
		   dest => $p->get_attr('SMS-Number'),\
                   msg   => "Password: $context->{otp_password}",\
		   test => 1);\
		 return (defined $errormsg) ? undef : 'Wait for your password via SMS';\
		}

	</AuthBy>

	# This clause logs all authentication successes and failures to the RADAUTHLOG table
	# Suitable for use with RAdmin version 1.6 or later
	<AuthLog SQL>
		# This database spec usually should be exactly the same
		# as in <AuthBy RADMIN> above
		DBSource	dbi:mysql:radmin:localhost
		DBUsername	radmin
		DBAuth		radminpw

		LogSuccess
		SuccessQuery insert into RADAUTHLOG (TIME_STAMP, USERNAME, TYPE) values (%t, '%n', 1)
		LogFailure
		FailureQuery insert into RADAUTHLOG (TIME_STAMP, USERNAME, TYPE, REASON) values (%t, '%n', 0, %1)
	</AuthLog>
</Realm>

<SessionDatabase SQL>
	# This database spec usually should be exactly the same
	# as in <AuthBy RADMIN> above
	DBSource	dbi:mysql:radmin:localhost
	DBUsername	radmin
	DBAuth		radminpw
</SessionDatabase>

