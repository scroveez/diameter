# motp.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with 
# MOTP authentication, see http://motp.sourceforge.net/
# MOTP is strong, two-factor authentication with mobile phones
#
# We suggest you start simple, prove to yourself that it
# works and then develop a more complicated configuration.
#
# The AuthBy SQLMOTP module extracts MOTP key and PIN information from an SQL database
# Supports RADIUS PAP, EAP-OPT and EAP-GTC
# a simple system. You can then add and change features.
# There is a sample database schema and example data record in goodies/motp.sql
#
# Caution: MOTP relies on the fact that UTC on the RADIUS server and client device are fairly closely
# synchronised in time (to within 3 minutes). It is strongly recommended that the Radiator RADIUS server
# be NTP synchronized.
#
# This example will authenticate from an SQL table called mobileotp.
# It will accept requests from any client and try to handle request
# for any realm.
# And it will print out what its doing in great detail.
# test with sample record and data from goodies/motp.sql like this
#     radpwtst -noacct -motp_secret 7ac61d4736f51a2b -password 1234
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: motp.cfg,v 1.1 2009/12/16 04:18:46 mikem Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
	DupInterval 0
</Client>

<Realm DEFAULT>
             <AuthBy SQLMOTP>
                # Authenticate access to the mobile-OTP database.
                # These need to match the values used when creating the mobile OTP database
                #DBSource        dbi:CSV:f_dir=%D;csv_eol=\012
		DBSource	dbi:mysql:radius
		DBUsername	mikem
		DBAuth		fred

                # AuthSelect is an SQL query that fetches mobile OTP data from the SQL database
                # It is passed the user name in %0.
                # It is expected to return (secret, active, userId, pin)
                # Field 0 (secret) is the hexadecimal secret for the user. It must be
                #  present for the authentication to succeed.
                # If field 1 (active) is defined is must be 1 else the authentication
                #   is rejected
                # Field 2 (userId) is the user id matching the request.
                # Field 4 (pin) is the user's static pin code. It's a 4 digit code.
		# Default is:
                #AuthSelect select secret, active, userId, pin from mobileotp where userId=%0

		# You can control how far from the current time MOTPs will be authenticated. 
		# This limits how far out of sync the clientt and the Radius server can be
		# Defaults to 3 minutes.
		#WindowSize 10

                # You can also support EAP-OTP and/or EAP-GTC, besides PAP
                #EAPType OTP GTC
                #EAPType GTC OTP

        </AuthBy>
</Realm>

