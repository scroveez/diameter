# yubikey-validationserver.cfg
#
# Example Radiator configuration file.
#
# This very simple file will allow you to get started with Yubikey
# (yubico.com) authentication where Yubikey one-time-passwords are
# authenticated against Yubikey Validation server utilising YubiHSM.
#
# Yubikeys are USB tokens that produce a one-time-password when you
# press the button on the token. The token emulates a keyboard, so its
# very easy for users to use:
#
# just put the keyboard cursor in the field that needs the
# one-time-password, and press the button. Works on Windows, Unix and
# MAC OSX, and probably others.
#
# This module also supports static passwords for 2 factor
# authentication.
#
# You can start the validation server and enable short-otp and hotp
# like this:
#
# yhsm-validation-server --short-otp --hotp --db-file database.db --debug --hmac-kh <key index> --hotp-window 20
# To download the server and for more information visit http://opensource.yubico.com/python-pyhsm/
#
# Caution:
# With current versions of yhsm-validation-server (up to 1.0.4h) there
# is a bug in handling hotp. You must insert "import pyhsm.oath_hotp"
# in the yhsm-validation-server source file
#
# Supports authentication by RADIUS PAP. If you don't use 2 factor
# authentication then you can enable also EAP-GTC and EAP-OTP
#
# Requires libwww-perl. HTTPS support requires libwww-perl 6.00 or later.
#
# We suggest you start simple, prove to yourself that it works and
# then develop a more complicated configuration if necessary.
#
# See radius.cfg for more complete examples of features and syntax,
# and refer to the reference manual for a complete description of all
# the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: yubikey-validationserver.cfg,v 1.1 2014/03/25 21:57:47 hvn Exp $

LogMicroseconds

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
</Client>

<Handler>
	AuthByPolicy ContinueWhileAccept

        # Here we adjust the decoded password so that AuthBy FILE only
        # sees the password part of decoded password. TokenID and OTP
        # are saved in attributes X-OSC-TokenID and X-OSC-OTP
        <AuthBy INTERNAL>
                DefaultResult ACCEPT
                AuthHook sub { \
		  my $submitted_pw = $_[0]->decodedPassword(); \

		  # If 2 factor authentication is used, static
		  # password must come before the token. TokenId is
		  # assumed to be 12 bytes long. Yubico's own
		  # tokencode is 32 bytes long.
                  my ($password, $tokenid, $otp) = $submitted_pw =~ /^(.*)([cbdefghijklnrtuv]{12})([cbdefghijklnrtuv]{32})$/; \

		  # If we didn't manage to parse submitted_pw lets's
                  # check if HOTP token is used. OATH-ID (TokenId) is
                  # 12 bytes long. OATH-HOTP codes can be 6 or 8 bytes
		  ($password, $tokenid, $otp) = $submitted_pw =~ /^(.*)([cbdefghijklnrtuv]{12})([0-9]{6})$/ unless defined $otp; \

                  # If we couldn't parse submitted_pw, send Access-Reject
    	          return ($main::REJECT, "Unable to parse token information") unless defined $otp; \

                  $_[0]->{DecodedPassword} = $password; \
		  $_[0]->add_attr('X-OSC-TokenID', $tokenid); \
		  $_[0]->add_attr('X-OSC-OTP', $otp); \
                  return ($main::ACCEPT);}
        </AuthBy>

        # Now authenticate the first part of the submitted password
        # from the users file. First part can also if the user has
        # correct token. Here's an example:
	#
        # mikem  User-Password = "fred", X-OSC-TokenID = "cccccccccccb"
        <AuthBy FILE>
                Filename %D/users
        </AuthBy>

        # Now we readjust the decoded password so that AuthBy
        # YUBIKEYVALIDATIONSERVER only sees the TokenID and OTP from
        # the original password
	<AuthBy INTERNAL>
                DefaultResult ACCEPT
                AuthHook sub { \
                  $_[0]->{DecodedPassword} =  $_[0]->get_attr('X-OSC-TokenID') . $_[0]->get_attr('X-OSC-OTP'); \
                  return ($main::ACCEPT);}
        </AuthBy>

        # Now authenticate the rest of the submitted password as a
        # Yubikey tokencode. If just single factor authentication is
        # required, you can remove the previous 3 AuthBys, leaving
        # just the AuthBy YUBIKEYVALIDATIONSERVER
	<AuthBy YUBIKEYVALIDATIONSERVER>
		# With this example configuration only PAP is
		# supported. If you don't use 2 factor authentication
		# then you can also enable EAP-GTC and/or EAP-OTP
		# EAPType GTC OTP

		# Method (OTP or OATH-HOTP) specific part and password
		# will be appended to the ValidationServerURL
		ValidationServerURL http://127.0.0.1:8003/yhsm/validate?

		# Connection timeout in seconds. Defaults to 3.
		#Timeout 10

		# yhsm-validation-server doesn't currently support
		# SSL. You can enable SSL if your chosen server
		# supports SSL or you have a SSL proxy. Requires
		# libwww-perl 6.00 or later.
		#SSLVerify require
		#SSLCAFile ./validationserver.pem
		#SSLCAPath ./cacertdir
	</AuthBy>
</Handler>
