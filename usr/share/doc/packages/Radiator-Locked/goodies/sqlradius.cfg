# sqlradius.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with 
# a simple AuthBy SQLRADIUS system.
#
# AuthBy SQL looks up a target radius server for every request in an
# SQL database, then proxies to the target server. It uses the realm 
# as the default lookup into the database.
#
# It is useful for managing large numbers of downstream radius servers
#
# Requires a suitable table in an SQL databse. See goodies/*.sql for example
# tables. Some sample data for a simple system:
#   insert into RADSQLRADIUS (TARGETNAME, HOST1, HOST2, SECRET)
#   values ('r1', 'oscar', '203.63.154.2', 'mysecret');
#   insert into RADSQLRADIUS (TARGETNAME, HOST1, SECRET)
#   values ('r2', '203.63.154.2', 'yy');
#
# You can have much more complicated things, including indirect lookups
# where multiple realms all map to the same target server.
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: sqlradius.cfg,v 1.2 2007/04/26 00:11:33 mikem Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
	DupInterval 0
</Client>

<Realm DEFAULT>
    	# This uses the users realm to look up the target
	# radius server in an SQL database
	<AuthBy SQLRADIUS>
		DBSource	dbi:mysql:radius
		DBUsername	mikem
		DBAuth		fred
	
		# The default HostSelect query will look up according
		# to realm in a table called RADSQLRADIUS, see
		# goodies/*.sql for examples
		# You can use HostSelect SQL query to work with
		# your own table def, eg:
		#HostSelect select HOST1, SECRET from RADSQLRADIUS where TARGETNAME='%R'
		#NumHosts 1

		# Alternatively, you could do the lookup based on 
		# eg Called-Station-Id and also handle failures gracefully:
		#HostSelect select HOST%0, SECRET, AUTHPORT, ACCTPORT, RETRIES, RETRYTIMEOUT, USEOLDASCENDPASSWORDS, SERVERHASBROKENPORTNUMBERS, SERVERHASBROKENADDRESSES, IGNOREREPLYSIGNATURE, FAILUREPOLICY, FAILUREBACKOFFTIME, MAXFAILEDREQUESTS, MAXFAILEDGRACETIME  from RADSQLRADIUS where TARGETNAME='%{Called-Station-Id}'

		# If you have lots of Realms or Called-Station-Ids 
		# that map to a single 
		# target radius server, you can use the example 
		# RADSQLRADIUSINDIRECT table to define the mappings
		# and HostSelect would be a join:
		#HostSelect select R.HOST%0, R.SECRET, R.AUTHPORT, R.ACCTPORT, R.RETRIES, R.RETRYTIMEOUT, R.USEOLDASCENDPASSWORDS, R.SERVERHASBROKENPORTNUMBERS, R.SERVERHASBROKENADDRESSES, R.IGNOREREPLYSIGNATURE, R.FAILUREPOLICY from RADSQLRADIUS R, RADSQLRADIUSINDIRECT I where I.SOURCENAME='%R' and I.TARGETNAME=R.TARGETNAME


		# You can define <Host> clauses here like in AuthBy RADIUS.
		# They will be used to proxy requests that do not
		# have an entry in the database (ie HostSelect returns
		# no rows. Use this mechanism to handle default realms.
	</AuthBy>
</Realm>

