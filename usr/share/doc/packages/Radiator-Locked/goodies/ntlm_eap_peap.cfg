# ntlm_eap_peap.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with 
# PEAP authentication.
# We suggest you start simple, prove to yourself that it
# works and then develop a more complicated configuration.
#
# This example will authenticate Wireless PEAP users from a Windows
# Domain when Radiator runs on a Linux or Unix host, with the
# assistance of utilities from the Samba suite (www.samba.org).
#
# AuthBy NTLM requires that ntlm_auth (and winbindd), both part of Samba,
# are installed and configured 
# correctly. See goodies/smb.conf.winbindd for sample configuration and installation hints.
#
# AuthBy NTLM runs the Samba utility ntlm_auth as a child process in order to authenticate
# requests. It keeps ntlm_auth running between requests and passes it authentication 
# information on stdin, and gets back the authentication results from stdout. 
# Caution:  AuthBy NTLM blocks while waiting for the result output of ntlm_auth.
#
# Because AuthBy NTLM requires that ntlm_auth be properly installed and configured with winbindd, 
# it is vitally important that you confirm that ntlm_auth is working properly before trying
# to use AuthBy NTLM. You can test ntlm_auth like this:
#  ntlm_auth --username=yourusername --domain=yourdomain --password=yourpassword
# if that does not work for a valid username and password, there is no way that 
# AuthBy NTLM will work. Make sure  ntlm_auth works first!
#
# Works with PAP, MSCHAP, MSCHAPV2
# Radiator must be run as root in order to do MSCHAP or MSCHAPV2 via ntlm_auth
# or it must belong to a group that can access the winbindd socket.
#
# In order to test this, you can use the sample test certificates
# supplied with Radiator. For production, you WILL need to install a
# real valid server certificate and key for Radiator to use.
#
# See radius.cfg for more complete examples of features and syntax,
# and refer to the reference manual for a complete description of all
# the features and syntax.
#
# Requires openssl and Net-SSLeay.
#
# You should consider this file to be a starting point only
# $Id: ntlm_eap_peap.cfg,v 1.11 2014/12/01 21:59:13 hvn Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
</Client>

# This is where we authenticate a PEAP inner request, which will be an
# EAP request. The username of the inner request will anonymous by
# default, although the identity of the EAP request will be the real
# username we are trying to authenticate.
<Handler TunnelledByPEAP=1>
	<AuthBy NTLM>
		# The name of the ntlm_auth program, supplied with
		# Samba. Defaults to '/usr/bin/ntlm_auth  --helper-protocol=ntlm-server-1'
		# You can require that authenticated users belong to a certain group with:
		#NtlmAuthProg /usr/bin/ntlm_auth  --helper-protocol=ntlm-server-1 --require-membership-of=MyGroupName
		# or you can specify that the NTLM authenticaiton requests appear to come from a workstation with
		# a specified name. This can be used to restrict authentication for certain users by setting
		# workstation requirements in their Windows user configuration.
		#NtlmAuthProg /usr/bin/ntlm_auth  --helper-protocol=ntlm-server-1 --workstation=MyWorkstationName

		# Specifies which Windows Domain is ALWAYS to be used to authenticate
		# users (even if they specify a different domain in their username). 
		# Special characters are supported. Can be an Active
		# directory domain or a Windows NT domain controller 
		# domain name
		#Domain OPEN

		# Specifies the Windows Domain to use if the user does not
		# specify a domain in their username.
		# Special characters are supported. Can be an Active
		# directory domain or a Windows NT domain controller 
		# domain name
		DefaultDomain OPEN

		# This tells the PEAP client what types of inner EAP requests
		# we will honour
		EAPType MSCHAP-V2

	</AuthBy>
</Handler>

# The original PEAP request from a NAS will be sent to a matching
# Realm or Handler in the usual way, where it will be unpacked and the inner authentication
# extracted.
# The inner authentication request will be sent again to a matching
# Realm or Handler. The special check item TunnelledByPEAP=1 can be used to select
# a specific handler, or else you can use EAPAnonymous to set a username and realm
# which can be used to select a Realm clause for the inner request.
# This allows you to select an inner authentication method based on Realm, and/or the
# fact that they were tunnelled. You can therfore act just as a PEAP server, or also 
# act as the AAA/H home server, and authenticate PEAP requests locally or proxy
# them to another remote server based on the realm of the inner authenticaiton request.
# In this basic example, both the inner and outer authentication are authenticated
# from a file by AuthBy FILE
<Handler>
	<AuthBy FILE>
		# users file will not be used for tunnelled EAP outer
		# authentication. PEAP inner authentication is handled
		# by its own Handler above.
		Filename %D/users

		# EAPType sets the EAP type(s) that Radiator will honour.
		# Options are: MD5-Challenge, One-Time-Password
		# Generic-Token, TLS, TTLS, PEAP, MSCHAP-V2
		# Multiple types can be comma separated. With the default (most
		# preferred) type given first
		EAPType PEAP

		# EAPTLS_CAFile is the name of a file of CA certificates 
		# in PEM format. The file can contain several CA certificates
		# Radiator will first look in EAPTLS_CAFile then in
		# EAPTLS_CAPath, so there usually is no need to set both
		EAPTLS_CAFile %D/certificates/demoCA/cacert.pem

		# EAPTLS_CAPath is the name of a directory containing CA
    		# certificates in PEM format. The files each contain one 
		# CA certificate. The files are looked up by the CA 
		# subject name hash value
#		EAPTLS_CAPath

		# EAPTLS_CertificateFile is the name of a file containing
		# the servers certificate. EAPTLS_CertificateType
		# specifies the type of the file. Can be PEM or ASN1
		# defaults to ASN1
		EAPTLS_CertificateFile %D/certificates/cert-srv.pem
		EAPTLS_CertificateType PEM

		# EAPTLS_PrivateKeyFile is the name of the file containing
		# the servers private key. It is sometimes in the same file
		# as the server certificate (EAPTLS_CertificateFile)
		# If the private key is encrypted (usually the case)
		# then EAPTLS_PrivateKeyPassword is the key to descrypt it
		EAPTLS_PrivateKeyFile %D/certificates/cert-srv.pem
		EAPTLS_PrivateKeyPassword whatever

		# EAPTLS_RandomFile is an optional file containing
		# randomness
#		EAPTLS_RandomFile %D/certificates/random

		# EAPTLS_MaxFragmentSize sets the maximum TLS fragemt
		# size that will be replied by Radiator. It must be small
		# enough to fit in a single Radius request (ie less than 4096)
		# and still leave enough space for other attributes
		# Aironet APs seem to need a smaller MaxFragmentSize
		# (eg 1024) than the default of 2048. Others need even smaller sizes.
		EAPTLS_MaxFragmentSize 1000

		# Ephemeral key exchange is supported with Diffie-Hellman key
		# exchange (DHE) and Elliptic Curve Diffie-Hellman key
		# exchange (ECDHE). See the reference manual for details.
		#EAPTLS_DHFile %D/certificates/dh2048.pem
		#EAPTLS_ECDH_Curve prime256v1

		# If EAPTLS_CRLCheck is set  and the client presents a certificate
		# then Radiator will look for a certificate revocation list (CRL) 
		# for the certificate issuer
		# when authenticating each client. If a CRL file is not found, or
		# if the CRL says the certificate has neen revoked, the authentication will 
		# fail with an error:
		#   SSL3_GET_CLIENT_CERTIFICATE:no certificate returned
		# One or more CRLs can be named with the EAPTLS_CRLFile parameter.
		# Alternatively, CRLs may follow a file naming convention: 
		#  the hash of the issuer subject name 
		# and a suffix that depends on the serial number.
		# eg ab1331b2.r0, ab1331b2.r1 etc.
		# You can find out the hash of the issuer name in a CRL with
		#  openssl crl -in crl.pem -hash -noout
		# CRLs with tis name convention
		# will be searched in EAPTLS_CAPath, else in the openssl 
		# certificates directory typically /usr/local/openssl/certs/
		# CRLs are expected to be in PEM format.
		# A CRL files can be generated with openssl like this:
		#  openssl ca -gencrl -revoke cert-clt.pem
		#  openssl ca -gencrl -out crl.pem
		# Use of these flags requires Net_SSLeay-1.21 or later
		#EAPTLS_CRLCheck
		#EAPTLS_CRLFile %D/certificates/crl.pem
		#EAPTLS_CRLFile %D/certificates/revocations.pem
		
		# Automatically sets MS-MPPE-Send-Key and MS-MPPE-Recv-Key
		# in the final Access-Accept
		AutoMPPEKeys

		# You can configure the User-Name that will be used for the inner
		# authentication. Defaults to 'anonymous'. This can be useful
		# when proxying the inner authentication. If there is a realm, it can 
		# be used to choose a Handler to handle the inner authentication.
		# %0 is replaced with the EAP identitiy
		# EAPAnonymous anonymous@some.other.realm

		# You can enable or disable support for TTLS Session Resumption and
		# PEAP Fast Reconnect with the EAPTLS_SessionResumption flag.
		# Default is enabled
		#EAPTLS_SessionResumption 0

		# You can limit how long after the initial session that a session can be resumed
		# with EAPTLS_SessionResumptionLimit (time in seconds). Defaults to 43200
		# (12 hours)
		#EAPTLS_SessionResumptionLimit 10

		# You can control which version of the PEAP protocol
		# to honour with EAPTLS_PEAPVersion. Defaults to
		# 0. Set it to 1 for unusual clients.
		EAPTLS_PEAPVersion 0
	</AuthBy>
</Handler>

