# simple.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with 
# authentication using SOAP to a remote Soap Radius interface via HTTP or HTTPS.
# We suggest you start simple, prove to yourself that it
# works and then develop a more complicated configuration.
#
# With AuthBy SOAP and the corresponding soapradius.cgi SOAP server, you can tunnel
# radius requests from one system to another using SOAP over HTTP or HTTPS. This can be 
# useful for improving security of Radius requests that will transit the internet or
# some other sniffable network segment. It can also be useful where UDP packet loss is high.
#
# This example will build a SOAP request and send it to a SOAP interface on localhost
# through a CGI script suitbale for use with Apache or any other CGI compatible web server.
# See goodies/soapradius.cgi for an example. The SOAP server will build a radius 
# request and send it to a Radius server.
#
# It will accept requests from any client and try to handle request
# for any realm.
# And it will print out what its doing in great detail.
#
# Requires the following Perl modules (any possibly others depending on your installation):
# SOAP-Lite
# MIME-Lite
# MIME-Types 
# MIME-toole
# IO-stringy
# MailTools
# Unicode-Map
# Unicode-String
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#A
# You should consider this file to be a starting point only
# Author: Mike McCauley (mikem@open.com.au)
# Copyright (C) 2001 Open System Consultants
# $Id: soap.cfg,v 1.2 2003/09/08 00:33:19 mikem Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
	DupInterval 0
</Client>

<Realm DEFAULT>
	<AuthBy SOAP>

		# You can specify any number of SOAP proxy points with
		# The Endpoint paramter. AuthBy SOAP will try each one in turn
		# until the SOAP call succeeds in getting a reply
		# Defaults to http://localhost/cgi-bin/soapradius.cgi
		#Endpoint http://your.first.host/cgi-bin/soapradius.cgi	
		#Endpoint http://your.second.host/cgi-bin/soapradius.cgi	
		Endpoint http://localhost/cgi-bin/soapradius.cgi

		# This is the SOAP URI that AuthBy SOAP will try to run
		# This is not a URL. It is used by the server to deduce the right module to load.
		# You should not need to change this.
		# Defaults to http://www.open.com.au/Radius/SOAPRequest
		#URI http://www.open.com.au/Radius/SOAPRequest

		# You can control how long to wait for terh SOAP reply from the SOAP server
		# with Timeout. Defaults to 3 seconds
		#Timeout 5
		
		# This enables the SOAP::Lite internal tracing. Allowable values are
		# transport dispatch result parameters headers objects method fault 
		# freeform trace debug all
		# or any combination. Defaults to no tracing.
		#SOAPTrace all

		# Normally, AuthBy SOAP blocks until a reply is received for
		# each SOAP request. You can make it run multi-threaded
		# with Fork.
		# Caution: the overheads of creating and processing SOAP requests
		# mean you will never get carrier class performance from AuthBy SOAP
		#Fork

	</AuthBy>
</Realm>

