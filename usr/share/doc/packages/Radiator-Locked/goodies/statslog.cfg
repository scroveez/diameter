# simple.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with 
# statistics logging
# We suggest you start simple, prove to yourself that it
# works and then develop a more complicated configuration.
#
# Radiator collects statistics for the server as a whole and for each 
# configured object ('clause')
# that a request passes 'through'. The statistics logging clauses
# allow you to log all the recorded statistics to a flat file and/or
# an SQL database. The example shows how. 
#
# For each object that requests pass through, the following statistics are
# collected:
#     name                      meaning
#     requests 			Total requests
#     droppedRequests		Total dropped requests
#     duplicateRequests 	Total duplicate requests
#     proxiedRequests 		Total proxied requests
#     proxiedNoReply 		Total proxied requests with no reply
#     badAuthRequests 		Total Bad authenticators in requests
#     responseTime 		Average response time (seconds)
#
#     accessRequests 		Access requests
#     dupAccessRequests 	Duplicate access requests
#     accessAccepts 		Access accepts
#     accessRejects 		Access rejects	
#     accessChallenges 		Access challenges
#     malformedAccessRequests 	Malformed acccess requests
#     badAuthAccessRequests 	Bad authenticators in authentication requests
#     droppedAccessRequests 	Dropped access requests
#
#     accountingRequests 	Accounting requests
#     dupAccountingRequests 	Duplicate accounting requests
#     accountingResponses 	Accounting responses
#     malformedAccountingRequests Malformed accounting requests
#     badAuthAccountingRequests Bad authenticators in accounting requests
#     droppedAccountingRequests Dropped accounting requests
#
# These numbers are collected for:
#  The server as a whole (ServerConfig)
#  Each Client clause
#  Each Realm and Handler clause
#  Each AuthBy in each Realm and Handler (recursively for AuthBy GROUP)
#  Each Host within each AuthBy RADIUS
#
# Each statstics log alspo provides the current time_stamp, the 
# type of object the statistics are comoing from and the Identifier or
# name of the object
#
# Hint: responseTime measures the per-request processing time, the time required for Radiator
# to fully process a single request. It does not measure the Access-Request/Access-Accept delay.
# Hint: If the Perl Time::HiRes module is available on the Radiator host, responseTime will be 
# computed based on time measurements accurate to 1 microsecond. Otherwise responseTime will 
# be based on time measurements accurate to only one second. For highest accuracy, 
# install Time::HiRes.
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: statslog.cfg,v 1.2 2010/08/10 22:37:25 mikem Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# This will appear as the Identifier of the server as a whole (ServerConfig)
Identifier server1

# Here we make up a non-trivial configuration, just to give us
# something interesting to log.
#
# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with

# Stats for each Client clause will be logged
<Client DEFAULT>
	Secret	mysecret
	DupInterval 0
</Client>
<Client 1.1.1.1>
	Secret	mysecret
</Client>

# Stats for each Realm and Handler clause will be logged, as well as all
# AuthBy clauses within them.
<Realm DEFAULT>
	<AuthBy FILE>
		Identifier id1
		Filename ./users
	</AuthBy>
</Realm>

<Realm my.realm>
	<AuthBy FILE>
		Identifier id2
		Filename ./users
	</AuthBy>
</Realm>

# This clause will log all statistics in the server to a flat file, 
# one line per, one set every Interval seconds
#
# eg: the default logging format will produce for the above config:
##time_stamp:type:identifier:accessAccepts:accessChallenges:accessRejects:accessRequests:accountingRequests:accountingResponses:badAuthAccessRequests:badAuthAccountingRequests:badAuthRequests:droppedAccessRequests:droppedAccountingRequests:droppedRequests:dupAccessRequests:dupAccountingRequests:duplicateRequests:malformedAccessRequests:malformedAccountingRequests:proxiedNoReply:proxiedRequests:requests:responseTime
#1012954338:ServerConfig:server1:46:0:0:46:90:90:0:0:0:0:0:0:0:0:0:0:0:0:0:136:0.0634664733232673
#1012954338:Client:DEFAULT:46:0:0:46:90:90:0:0:0:0:0:0:0:0:0:0:0:0:0:136:0.0634664733232673
#1012954338:Client:1.1.1.1:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0
#1012954338:Handler:Realm=DEFAULT:46:0:0:46:90:90:0:0:0:0:0:0:0:0:0:0:0:0:0:136:0.0634664733232673
#1012954338:AuthBy:id1:46:0:0:46:90:90:0:0:0:0:0:0:0:0:0:0:0:0:0:136:0.0634664733232673
#1012954338:Handler:Realm=my.realm:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0
#1012954338:AuthBy:id2:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0
#

<StatsLog FILE>
	# This is the time interval in seconds between each statistics dump
	# Default is 600 seconds (10 minutes)
#	Interval 2

	# Statistics will be appended to Filename
	# The default filename is %L/statistics. dash means stdout
	# special formatting characters are honoured
#	Filename -

	# You can specify your own format for each line
	# %0, %1 etc are replaced by each statistic, in alphabetical order
	# of their name.This example just logs the time, object type, id and 
	# average responseTime
#	Format %0:%1:%2:%23

	# Each set of statistics is preceded by a header line, which by
	# default is a # followed by the name of each data column (for the
	# use of various numeric pprocessing packages, such as Excel.
	# You can set your own header format.
	# You can prevent any headers being written by setting
	# Header to be an empty string.
#	Header #time:type:id:responsetime
</StatsLog>

# This one logs to an SQL table. The default is to insert one row
# for each object containing all the statistics for that object:
# eg for the above config, it would do something like this for
# each object:
# insert into RADSTATSLOG (TIME_STAMP,TYPE,IDENTIFIER,ACCESSACCEPTS,
# ACCESSCHALLENGES,ACCESSREJECTS,ACCESSREQUESTS,ACCOUNTINGREQUESTS,
# ACCOUNTINGRESPONSES,BADAUTHACCESSREQUESTS,BADAUTHACCOUNTINGREQUESTS,
# BADAUTHREQUESTS,DROPPEDACCESSREQUESTS,DROPPEDACCOUNTINGREQUESTS,
# DROPPEDREQUESTS,DUPACCESSREQUESTS,DUPACCOUNTINGREQUESTS,
# DUPLICATEREQUESTS,MALFORMEDACCESSREQUESTS,MALFORMEDACCOUNTINGREQUESTS,
# PROXIEDNOREPLY,PROXIEDREQUESTS,REQUESTS,RESPONSETIME) values 
# (1012954257,'ServerConfig','server1',45,0,0,45,90,90,0,0,0,0,0,0,
# 0,0,0,0,0,0,0,135,0.142740745511493)
#
<StatsLog SQL>
	# You need to specify which database to connect to:
	DBSource	dbi:mysql:radius
	DBUsername	mikem
	DBAuth		fred


	# The logging interval in seconds
#	Interval 2

	# You can configure the SQL query to be used for each log.
	# %0, %1 etc are replaced by each statistic, in alphabetical order
	# of their name.This example just logs the time, object type, id and 
	# average responseTime
#	InsertQuery insert into MYTABLE (TIME_STAMP, TYPE, ID, RESPONSETIME) values (%0, %1, %2, %23)
</StatsLog>

