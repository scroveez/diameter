# yubikey.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with 
# Yubikey (yubico.com) authentication.
# Yubikeys are USB tokens that produce a one-time-password when you press the button 
# on the token. The token emulates a keyboard, so its very easy for users to use: 
# just put the keyboard cursor in the field that needs the one-time-password, 
# and press the button. Works on Windows, Unix and MAC OSX, and probably others.
#
# Can also support static passwords for 2 factor authentication when the user prefixes 
# their static password and ':' before the Yubikey one-time-password.
# Yubikey one-time-passwords are authenticated based on a secret key stored in an SQL 
# database. The secret key for each token you use has to be got from Yubico, 
# using their AES key self-service interface https://api.yubico.com/yms/
#
# Supports authentication by RADIUS PAP, EAP-OTP and EAP-GTC
#
# This configuration works with the sample database schema in goodies/yubikey.sql
# to test:
# mysql -Dyubico -ureadwrite -ppassword <goodies/yubikey.sql
# ./radiusd -config goodies/yubikey.cfg
#  radpwtst -noacct -user mikem -password vvcjnihvlfbvnnhtrhdtkktctfnicfccgfbventrlhrc
#    (succeeeds)
#   or with a static password for 2 factor:
#  radpwtst -noacct -user mikem -password fred:vvcjnihvlfbvnnhtrhdtkktctfnicfccgfbventrlhrc
#    (succeeeds)
# If you attempt to auth again with the same password without resetting the database
# radpwtst -noacct -user mikem -password vvcjnihvlfbvnnhtrhdtkktctfnicfccgfbventrlhrc
#    (fails due to replay detection)
#
# Requires Auth-Yubikey_Decrypter-0.05 or later, and Crypt::Rijndael
#
# We suggest you start simple, prove to yourself that it
# works and then develop a more complicated configuration if necessary.
#
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: yubikey.cfg,v 1.15 2014/11/22 01:30:09 hvn Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
</Client>

<Handler>
	<AuthBy SQLYUBIKEY>
		# Authenticate access to the Yubikey token database.
		# These need to match the values used when creating the Yubikey token database
		# Values given here are the defaults suggested by Yubikey when installing
		# the YubiKey Validation Server
		DBSource	dbi:mysql:yubico
		DBUsername	readwrite
		DBAuth		password

		# AuthSelect is an SQL query that fetches Yubikey data from the SQL database
		# It is passed the user name in %0, the Token ID in Base64 format in %1
		# the Token ID in hex format in %2 and the Token ID in modhex format in %3
		# It is expected to return (secret, active, userId, counter, session_use_counter, ignored, staticpassword)
		# Field 0 (secret) is the base64 encoded AES secret for the key. It must be
		#  present for the authentication to succeed. All others fields are optional
		# If field 1 (active) is defined is must be 1 else the authentication 
		#   is rejected
		# Field 2 (secretId) is the token secret_id. In some systems where CheckSecretId
		#   is set, it is used to verify
		#   the User Name in the incoming request.
		# Field 3 (counter) is the key use counter. If defined, it will be used
		#  to detect replay attacks, and must be updated by UpdateQuery
		# Field 4 (session_use) is the session_use counter. 
		# Field 5 is currently ignored
		# Field 6 (staticpassword) is the users static password. It will be checked
		#  if the user specifies a static password or if Require2Factor is set. It can contain
		# the users correct static password in any of the formats supported by Radiator
		# including plaintext, {SHA}, {crypt}, {MD5}, {rcrypt}, {mysql},
		# {mssql}, {nthash}, {dechpwd}, {NS-MTA-MD5}, {clear} etc. TranslatePasswordHook
		# is also supported. 
		#
		# The default works with the (obsolete) sample databse schema provided 
		# by db_schema.sql from the YubiKey Validation Server. 
		# Note that 'low' timestamp column is used
		# to hold the session_use counter.
		AuthSelect select yubikeys.secret, yubikeys.active, yubikeys.userId, yubikeys.counter, yubikeys.low, yubikeys.high, clients.secret from yubikeys, clients where clients.email=%0 and clients.id=yubikeys.id

		# UpdateQuery is an SQL query that updates the Yubikey data in the SQL database
		# After a successful authentication
		# It will be passed the 
		#  new authentication counter in %0
		#  new session_use counter in %1
		#  0 in %2 (this column currently not used)
		#  the user name in %3 
		#  the Token ID in Bas64 format in %4.
		#  The current Unix time in %5
		#  the Token ID in Hex format in %6.
		#  the Token ID in modhex format in %7.
		# The default works with the sample database schema provided 
		# by db_schema.sql from the YubiKey Validation Server.
		UpdateQuery update yubikeys set accessed=current_timestamp(), counter=%0, low=%1, high=%2 where tokenId=%7
		# If your SQL does not have now() or current_timestamp():
		# UpdateQuery update yubikeys set accessed=%5, counter=%0, low=%1, high=%2 where tokenId=%7

		# If Require2Factor is set, then the user must provide their static password
		# as a prefix to their Yubikey one-time-password. The correct static password
		# is retrieved from 5th field returned by AuthSelect.
		# If this flag is not set, but the user provides a static password prefix, then
		# the static password will be checked anyway
		#Require2Factor 1

		# If CheckSecretId is set, then check that
		# the secretId fetched from the database matches the secretId encoded in the 
		# submitted Yubikey OTP. This increases the security of the Yubikey
		# OTP and is recommended best practice.
		CheckSecretId

		# You can also support EAP-OTP and/or EAP-GTC, besides PAP
		EAPType OTP GTC
		#EAPType GTC OTP
	</AuthBy>
</Handler>

