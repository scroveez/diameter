# imap.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with IMAP authentication
# a simple system. You can then add and change features.
# We suggest you start simple, prove to yourself that it
# works and then develop a more complicated configuration.
#
# This example will authenticate from an IMAP server.
# And it will print out what its doing in great detail.
# Only PAP authentication is supported by AuthBy IMAP
#
# Requires Mail::IMAPClient 2.2.5 or better
# If UseSSL is set, requires IO::Socket::SSL and OpenSSL.
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: imap.cfg,v 1.8 2013/08/29 06:58:47 hvn Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
</Client>

<Realm DEFAULT>
	<AuthBy IMAP>
		# Host specifies the name or address of the IMAP server to use
		# You should set this to suit your own site
		Host localhost

		# This prevents looking for DEFAULT users if the 
		# first authentication fails
		NoDefault

		# If Debug is set, IMAPClient will print details
		# of its communications to stdout
#		Debug 1

		# Timeout specifies a connection timeout in seconds, If the IMAP
		# server does not respond to attempts to conenct to it
		# within this time, the authenticaiton
		# will fail.
		# Defaults to 10 seconds
#		Timeout 2

		# Port specifies the number of the IMAP port to use on
		# Host.
		# Defaults to 143, or 993 if UseSSL
#		Port 9000

		# You can tell AuthBy IMAP to use SSL to connect to
		# the IMAP server: 
		#UseSSL
		# You can also set these parameters if client
		# verification is required with UseSSL. is
		# SSLVerify can be none, optional or require.
		# Defaults to none
		SSLVerify none
		# If you want to verify that the peer certificate has been signed
                # by a reputable certificate authority, then you should use this
                # option to locate the file containing the certificate(s) of the
                # reputable certificate authorities if it is not already in the
                # file certs/my-ca.pem
		#SSLCAFile %D/certificates/demoCA/cacert.pem
		# If you are unusually friendly with the OpenSSL documentation, you
                # might have set yourself up a directory containing several trusted
                # certificates as separate files as well as an index of the cer-
                # tificates.  If you want to use that directory for validation pur-
                # poses, and that directory is not ca/, then use this option to
                # point IO::Socket::SSL to the right place to look.
		#SSLCAPath /path/to/ca/directory
		# If your SSL certificate is not in the default place
                # (certs/server-cert.pem for servers, certs/client-cert.pem for
                # clients), then you should use this option to specify the location
                # of your certificate.  Note that a key and certificate are only
                # required for an SSL server, so you do not need to bother with
                # these trifling options should you be setting up an unauthenti-
                # cated client.
		#SSLCAClientCert %D/certificates/cert-clt.pem
		# If your RSA private key is not in default place
                # (certs/server-key.pem for servers, certs/client-key.pem for
                # clients), then this is the option that you would use to specify a
                # different location.  Keys should be PEM formatted,
		# If a passwrod is required to decode the private key
		# file, specifiy the password in SSLCAClientKeyPassword
		#SSLCAClientKey %D/certificates/cert-clt.pem
		#SSLCAClientKeyPassword whatever

		# If you also require authentication of TTLS-PAP by IMAP,
                # set the following parameters. See
		# goodies/eap_ttls.cfg for documentation
		#EAPType TTLS
		#EAPTLS_CAFile %D/certificates/demoCA/cacert.pem
		#EAPTLS_CertificateFile %D/certificates/cert-srv.pem
		#EAPTLS_CertificateType PEM
		#EAPTLS_PrivateKeyFile %D/certificates/cert-srv.pem
		#EAPTLS_PrivateKeyPassword whatever
		#EAPTLS_MaxFragmentSize 1000
		#AutoMPPEKeys
	</AuthBy>
</Realm>

