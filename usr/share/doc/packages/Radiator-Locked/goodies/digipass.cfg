# digipass.cfg
#
# Example Radiator configuration file.
# This very simple file will allow you to get started with 
# native Vasco Digipass authentication from an SQL database.
#
# Digipass is a token-based authentication system from Vasco
# (www.vasco.com)
# Digipass tokens can be either challenge-response, or straight
# one-time-password (with or without a static PIN).
#
# Requires the Authen::Digipass module which is available for Solaris,
# Linux, Windows and other platforms:
#    A binary for Windows platforms is included in the Radiator
#    distribution, which you can install with this command
#    ppm install file://c:path/to/your/radiator/dist/ppm/Authen-Digipass.ppd
#    Linux users will need to install suitable RPM in goodies/Authen-Digipass*
#    Solaris Sparc package is available in goodies/OSCAuthDP-sparc.pkg
#    See goodies/README for package descriptions
#
# This example will authenticate from token data stored in an SQL
# database. You can use the digipass.pl tools provided with the
# Authen::Digipass to import token data from Vasco DPX files and
# assign a token to each user, etc.
# Requires a suitable SQL table to hold Digipass data, see
# goodies/*.sql for samples.
#
# For a web-based GUI for administering users and Digipass tokens see
# http://www.open.com.au/radmin
#
# This example will accept requests from any client and try to handle
# request for any realm. And it will print out what its doing in great
# detail.
#
# Supports PAP, CHAP, MSCHAPV2, EAP-MSCHAPV2, EAP-OTP and EAP-GTC requests.
# MSCHAPV2, EAP-MSCHAPV2 require Digest-MD4 and Digest-SHA
#
# Test with radpwtst like this (where 123456 is the current token code
# on your test token):
#
#   Standard Radius PAP, suitable for RO Digipass:
# radpwtst -noacct -user username -password 123456
#   Standard Radius PAP, suitable for CR Digipass:
# radpwtst -noacct -user username -password '' -interactive
#   CHAP, suitable for RO Digipass:
# radpwtst -noacct -user username -password 123456 -chap
#   MSCHAP, suitable for RO Digipass:
# radpwtst -noacct -user username -password 123456 -mschap
#   MSCHAPV2, suitable for RO Digipass:
# radpwtst -noacct -user username -password 123456 -mschapv2
#   EAP-one-time-password, works with RO or CR digipass:
# radpwtst -noacct -user username -password 123456 -eapotp
#   EAP-Generic-Token-Card, works with RO or CR digipass:
# radpwtst -noacct -user username -password 123456 -eapgtc
#
# See radius.cfg for more complete examples of features and syntax,
# and refer to the reference manual for a complete description of all
# the features and syntax.
#
# You should consider this file to be a starting point only
# $Id: digipass.cfg,v 1.13 2013/08/29 06:58:47 hvn Exp $

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# You will probably want to add other Clients to suit your site,
# one for each NAS you want to work with
<Client DEFAULT>
	Secret	mysecret
</Client>

<Handler>
	<AuthBy SQLDIGIPASS>
		# Adjust DBSource, DBUsername, DBAuth to suit your DB
		DBSource	dbi:mysql:radius
		DBUsername	mikem
		DBAuth		fred
	
		# Select which EAP type(s) you are willing to support	
		EAPType One-Time-Password
#		EAPType Generic-Token

		# You can configure the SQL queries that will be used
		# to fetch Digipass token data and update the database (the
		# token data must be updated after each successful of
		# unsuccessful authentication attempt)
		#AuthSelect select DP_DATA, DIGIPASS from TBL_VASCODP where USER_ID=%0
		#UpdateQuery update TBL_VASCODP set DP_DATA='%0' where DIGIPASS='%1'

		# ChallengeTimeout sets the maximum period of time that a
		# challenge from a Challenge-Response (CR) token will be valid
		# for. Time is in seconds and defaults to 300 seconds (5 minutes)
		#ChallengeTimeout 3600

		# You can alter a number of Digipass parameters:
		# ITimeWindow - this is the size of the window
		# of opportunity that a token can login with (this is counted in multiples
		# of one-time password "rollovers" in the token. Value can be 2 to 1000
		# Default is 100 (that means +- 30 mins for default tokens)
		#ITimeWindow 50

		# IThreshold - this is the number of times that
		# a person can unsuccessfully try to login before being locked out.
		# 0 means disabled. Defaults to 0.
		#IThreshold 5

		# SyncWindow - this is the size of the larger
		# window that is created for use the first time after a token has been
		# reset. This means that if a token gets out of sync (which isn't an often
		# occurrence), the user cant login so the admin resets the token, then a
		# larger sync window is produced after the reset so that the token can be
		# recognised and calibrated by the software to allow subsequent use. This
		# parameter is expressed in hours. Value can be 1 to 60. Default is 6 (hours)
		#SyncWindow 10

		# The folling paramters also control the bahaviour of Digipass authenticaiton, but should
		# rarely need to be changed from their default values:

		# CheckChallenge. Verify or not if the challnege has been corruptred before validation
		# Value can be 0 to 4:
		# 0: no password checking
		# 1: Check the parameter then verify (default)
		# 2: Always use the DPData to validate responses
		# 3: Avoid Challenge-Repsonse Replay Attack by allowing only one challenge-response authentication 
		#    per timestep.
		# 4: Avoid Challenge-Repsonse Replay Attack by rejecting the second response if repsonses from
		#    two consecutive authenticasiotn requests are equal and in the same time-step
		# Defaults to 1
		#CheckChallenge 0

		# ChkInactDays. Acceptable number of days of token inactivity. PAst this
		# number of days, the token will have to be reset. Values from 0 to 1024. Default is 0
		# which means the feature is disabled
		#ChkInactDays 100
		
		# Other parameters may be controlled in accordance with Digipass documentation. Default
		# values are shown:
		#DeriveVector 0
		#EventWindow 100
		#HSMSlotId 0
		#StorageKeyId 0
		#TransportKeyId 0x7fffff
		#StorageDeriveKey1 0
		#StorageDeriveKey2 0
		#StorageDeriveKey3 0
		#StorageDeriveKey4 0

		# You may need AutoMPPEKeys for MSCHAP authentication
		AutoMPPEKeys

		# ChallengeMessage allows you to customise or internationalise
		# the Digipass challenge message 
		#ChallengeMessage Votre challenge du Digipass: %0

		# AuthBy DIGIPASS supports Virtual Digipass. This allows
		# Vasco token support even of the user does not have a physical 
		# token (or has lost it). 
		# SupportVirtualDigipass makes AuthBy DIGIPASS support Virtual
		# Digipass tokens: If the incoming password is empty, and the
		# token supports Virtual Digipass,
		# AuthBy DIGIPASS generates the user's correct tokencode
		# and passes it to the VirtualTokencodeHook for delivery to
		# the user by some secure out-of-band method such as SMS. 
		# The VirtualTokencodeHook is called like:
		# VirtualTokencodeHook($self, $username, $tokencode, $p)
		# VirtualTokencodeHook must return an error message if it
		# fails to start delivery the message the user
#		SupportVirtualDigipass
#		ChallengeMessage Your password has been sent to you by SMS
#		VirtualTokencodeHook  sub { my ($self, $username, $tokencode, $p) = @_;\
#		            print "send tokencode $tokencode to user $username\n";\
#		            system('sms_delivery_command', $username, $tokencode);\
#			    return;}
	</AuthBy>
</Handler>

